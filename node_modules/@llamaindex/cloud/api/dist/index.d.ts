import * as _hey_api_client_fetch from '@hey-api/client-fetch';
import { TDataShape, Options as Options$1, Client } from '@hey-api/client-fetch';

/**
 * Schema for an API Key.
 */
type ApiKey = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name?: string | null;
    project_id?: string | null;
    user_id: string;
    redacted_api_key: string;
};
/**
 * Schema for creating an API key.
 */
type ApiKeyCreate = {
    name?: string | null;
    /**
     * The project ID to associate with the API key.
     */
    project_id?: string | null;
};
/**
 * Schema for updating an API key.
 */
type ApiKeyUpdate = {
    name?: string | null;
};
type AdvancedModeTransformConfig = {
    mode?: "advanced";
    /**
     * Configuration for the segmentation.
     */
    segmentation_config?: NoneSegmentationConfig | PageSegmentationConfig | ElementSegmentationConfig;
    /**
     * Configuration for the chunking.
     */
    chunking_config?: NoneChunkingConfig | CharacterChunkingConfig | TokenChunkingConfig | SentenceChunkingConfig | SemanticChunkingConfig;
};
/**
 * This is the input schema for the chat app endpoint
 */
type AppChatInputParams = {
    messages?: Array<InputMessage>;
};
type AudioBlock = {
    block_type?: "audio";
    audio?: (Blob | File) | null;
    path?: string | null;
    url?: string | null;
    format?: string | null;
};
type AutoTransformConfig = {
    mode?: "auto";
    /**
     * Chunk size for the transformation.
     */
    chunk_size?: number;
    /**
     * Chunk overlap for the transformation.
     */
    chunk_overlap?: number;
};
type AzureOpenAiEmbedding = {
    /**
     * The name of the OpenAI embedding model.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Additional kwargs for the OpenAI API.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The OpenAI API key.
     */
    api_key?: string | null;
    /**
     * The base URL for Azure deployment.
     */
    api_base?: string;
    /**
     * The version for Azure OpenAI API.
     */
    api_version?: string;
    /**
     * Maximum number of retries.
     */
    max_retries?: number;
    /**
     * Timeout for each request.
     */
    timeout?: number;
    /**
     * The default headers for API requests.
     */
    default_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.
     */
    reuse_client?: boolean;
    /**
     * The number of dimensions on the output embedding vectors. Works only with v3 embedding models.
     */
    dimensions?: number | null;
    /**
     * The Azure endpoint to use.
     */
    azure_endpoint?: string | null;
    /**
     * The Azure deployment to use.
     */
    azure_deployment?: string | null;
    class_name?: string;
};
type AzureOpenAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "AZURE_EMBEDDING";
    /**
     * Configuration for the Azure OpenAI embedding model.
     */
    component?: AzureOpenAiEmbedding;
};
/**
 * Base response model for connection validation.
 */
type BaseConnectionValidation = {
    success: boolean;
    message: string;
};
type BasePlan = {
    /**
     * The ID of the plan in Metronome
     */
    id?: string | null;
    name: "free" | "llama_parse" | "enterprise" | "unknown" | "free_contract" | "pro" | "enterprise_contract" | "enterprise_poc" | "free_v1" | "starter_v1" | "pro_v1";
    metronome_plan_type: "plan" | "contract";
    metronome_rate_card_alias: string | null;
    limits: PlanLimits;
    recurring_credits?: Array<RecurringCreditGrant> | null;
    plan_frequency: "MONTHLY" | "QUARTERLY" | "ANNUAL";
    /**
     * The ID of the customer in Metronome
     */
    metronome_customer_id?: string | null;
    /**
     * The date the plan starts on
     */
    starting_on?: string | null;
    /**
     * The date the plan ends on
     */
    ending_before?: string | null;
    /**
     * The current billing period
     */
    current_billing_period?: BillingPeriod | null;
    /**
     * Whether the organization has a failed payment that requires support contact
     */
    is_payment_failed?: boolean;
};
type Batch = {
    /**
     * The tool to be used for all requests in the batch.
     */
    tool: string;
    /**
     * The data to be used for the tool.
     */
    tool_data?: LlamaParseParameters | null;
    /**
     * The type of input file. Currently only 'datasource' is supported.
     */
    input_type: string;
    /**
     * The ID of the input file for the batch.
     */
    input_id: string;
    /**
     * The type of output file. Currently only 'datasource' is supported.
     */
    output_type?: string | null;
    /**
     * The ID of the output file for the batch.
     */
    output_id?: string | null;
    /**
     * Unique identifier for the batch
     */
    id: string;
    /**
     * The ID of the project to which the batch belongs
     */
    project_id: string;
    /**
     * The ID of the organization to which the batch belongs
     */
    organization_id: string;
    /**
     * The ID of the user who created the batch
     */
    user_id: string;
    /**
     * A developer-provided ID for the batch. This ID will be returned in the response.
     */
    external_id?: string | null;
    /**
     * The time frame within which the batch should be processed
     */
    completion_window: number;
    /**
     * The ID of the pipeline to which the batch belongs
     */
    pipeline_id: string;
    /**
     * The current status of the batch
     */
    status: string;
    /**
     * The Unix timestamp (in seconds) for when the batch was created
     */
    created_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch was last updated
     */
    updated_at?: string | null;
};
type BatchCreate = {
    /**
     * The tool to be used for all requests in the batch.
     */
    tool: string;
    /**
     * The data to be used for the tool.
     */
    tool_data?: LlamaParseParameters | null;
    /**
     * The type of input file. Currently only 'datasource' is supported.
     */
    input_type: string;
    /**
     * The ID of the input file for the batch.
     */
    input_id: string;
    /**
     * The type of output file. Currently only 'datasource' is supported.
     */
    output_type?: string | null;
    /**
     * The ID of the output file for the batch.
     */
    output_id?: string | null;
    /**
     * The ID of the project to which the batch belongs
     */
    project_id: string;
    /**
     * A developer-provided ID for the batch. This ID will be returned in the response.
     */
    external_id: string;
    /**
     * The time frame within which the batch should be processed. Currently only 24h is supported.
     */
    completion_window?: number;
};
type BatchItem = {
    /**
     * Unique identifier for the batch item
     */
    id: string;
    /**
     * The ID of the batch to which the item belongs
     */
    batch_id: string;
    /**
     * The current status of the batch item
     */
    status: string;
    /**
     * The Unix timestamp (in seconds) for when the batch item status was last updated
     */
    status_updated_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch item was created
     */
    created_at?: string | null;
    /**
     * The Unix timestamp (in seconds) for when the batch item was last updated
     */
    updated_at?: string | null;
    /**
     * The input file associated with the batch item
     */
    input_file: string;
    /**
     * The output file associated with the batch item
     */
    output_file?: string | null;
    /**
     * Worker Task for that item
     */
    task?: FileParsePublic | null;
};
type BatchPaginatedList = {
    /**
     * List of batches
     */
    data: Array<Batch>;
    /**
     * Pagination limit
     */
    limit: number;
    /**
     * Pagination offset
     */
    offset: number;
    /**
     * Total number of batches
     */
    total_count: number;
};
type BatchPublicOutput = {
    batch: Batch;
    batch_items: Array<BatchItem>;
    ingestion_status: ManagedIngestionStatusResponse;
};
type BedrockEmbedding = {
    /**
     * The modelId of the Bedrock model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The name of aws profile to use. If not given, then the default profile is used.
     */
    profile_name?: string | null;
    /**
     * AWS Access Key ID to use
     */
    aws_access_key_id?: string | null;
    /**
     * AWS Secret Access Key to use
     */
    aws_secret_access_key?: string | null;
    /**
     * AWS Session Token to use
     */
    aws_session_token?: string | null;
    /**
     * AWS region name to use. Uses region configured in AWS CLI if not passed
     */
    region_name?: string | null;
    /**
     * The maximum number of API retries.
     */
    max_retries?: number;
    /**
     * The timeout for the Bedrock API request in seconds. It will be used for both connect and read timeouts.
     */
    timeout?: number;
    /**
     * Additional kwargs for the bedrock client.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
type BedrockEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "BEDROCK_EMBEDDING";
    /**
     * Configuration for the Bedrock embedding model.
     */
    component?: BedrockEmbedding;
};
type BillingPeriod = {
    start_date: string;
    end_date: string;
};
type BodyCreateReportApiV1ReportsPost = {
    name: string;
    template_text?: string;
    template_instructions?: string | null;
    existing_retriever_id?: string | null;
    files: Array<Blob | File>;
    template_file?: (Blob | File) | null;
};
type BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut = {
    upload_file: Blob | File;
};
type BodyRunJobOnFileApiV1ExtractionJobsFilePost = {
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The file to run the job on
     */
    file: Blob | File;
    /**
     * The data schema to override the extraction agent's data schema with as a JSON string
     */
    data_schema_override?: string | null;
    /**
     * The config to override the extraction agent's config with as a JSON string
     */
    config_override?: string | null;
};
type BodyRunJobTestUserApiV1ExtractionJobsTestPost = {
    job_create: ExtractJobCreate;
    extract_settings?: LlamaExtractSettings | null;
};
type BodyScreenshotApiParsingScreenshotPost = {
    file?: (Blob | File) | null;
    do_not_cache?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    max_pages?: number | null;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    target_pages?: string;
    webhook_url?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
};
type BodyScreenshotApiV1ParsingScreenshotPost = {
    file?: (Blob | File) | null;
    do_not_cache?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    max_pages?: number | null;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    target_pages?: string;
    webhook_url?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
};
type BodyUploadFileApiParsingUploadPost = {
    file?: (Blob | File) | null;
    adaptive_long_table?: boolean;
    annotate_links?: boolean;
    auto_mode?: boolean;
    auto_mode_trigger_on_image_in_page?: boolean;
    auto_mode_trigger_on_table_in_page?: boolean;
    auto_mode_trigger_on_text_in_page?: string;
    auto_mode_trigger_on_regexp_in_page?: string;
    auto_mode_configuration_json?: string;
    azure_openai_api_version?: string;
    azure_openai_deployment_name?: string;
    azure_openai_endpoint?: string;
    azure_openai_key?: string;
    bbox_bottom?: number;
    bbox_left?: number;
    bbox_right?: number;
    bbox_top?: number;
    compact_markdown_table?: boolean;
    disable_ocr?: boolean;
    disable_reconstruction?: boolean;
    disable_image_extraction?: boolean;
    do_not_cache?: boolean;
    do_not_unroll_columns?: boolean;
    extract_charts?: boolean;
    guess_xlsx_sheet_name?: boolean;
    html_make_all_elements_visible?: boolean;
    html_remove_fixed_elements?: boolean;
    html_remove_navigation_elements?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    language?: Array<ParserLanguages>;
    extract_layout?: boolean;
    max_pages?: number | null;
    output_pdf_of_document?: boolean;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    page_prefix?: string;
    page_separator?: string;
    page_suffix?: string;
    preserve_layout_alignment_across_pages?: boolean;
    skip_diagonal_text?: boolean;
    spreadsheet_extract_sub_tables?: boolean;
    structured_output?: boolean;
    structured_output_json_schema?: string;
    structured_output_json_schema_name?: string;
    take_screenshot?: boolean;
    target_pages?: string;
    vendor_multimodal_api_key?: string;
    vendor_multimodal_model_name?: string;
    model?: string;
    webhook_url?: string;
    preset?: string;
    parse_mode?: ParsingMode | null;
    page_error_tolerance?: number;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string;
    replace_failed_page_with_error_message_suffix?: string;
    system_prompt?: string;
    system_prompt_append?: string;
    user_prompt?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
    strict_mode_image_extraction?: boolean;
    strict_mode_image_ocr?: boolean;
    strict_mode_reconstruction?: boolean;
    strict_mode_buggy_font?: boolean;
    save_images?: boolean;
    ignore_document_elements_for_layout_detection?: boolean;
    output_tables_as_HTML?: boolean;
    markdown_table_multiline_header_separator?: string;
    use_vendor_multimodal_model?: boolean;
    bounding_box?: string;
    gpt4o_mode?: boolean;
    gpt4o_api_key?: string;
    complemental_formatting_instruction?: string;
    content_guideline_instruction?: string;
    premium_mode?: boolean;
    is_formatting_instruction?: boolean;
    continuous_mode?: boolean;
    parsing_instruction?: string;
    fast_mode?: boolean;
    formatting_instruction?: string;
};
type BodyUploadFileApiV1FilesPost = {
    upload_file: Blob | File;
};
type BodyUploadFileApiV1ParsingUploadPost = {
    file?: (Blob | File) | null;
    adaptive_long_table?: boolean;
    annotate_links?: boolean;
    auto_mode?: boolean;
    auto_mode_trigger_on_image_in_page?: boolean;
    auto_mode_trigger_on_table_in_page?: boolean;
    auto_mode_trigger_on_text_in_page?: string;
    auto_mode_trigger_on_regexp_in_page?: string;
    auto_mode_configuration_json?: string;
    azure_openai_api_version?: string;
    azure_openai_deployment_name?: string;
    azure_openai_endpoint?: string;
    azure_openai_key?: string;
    bbox_bottom?: number;
    bbox_left?: number;
    bbox_right?: number;
    bbox_top?: number;
    compact_markdown_table?: boolean;
    disable_ocr?: boolean;
    disable_reconstruction?: boolean;
    disable_image_extraction?: boolean;
    do_not_cache?: boolean;
    do_not_unroll_columns?: boolean;
    extract_charts?: boolean;
    guess_xlsx_sheet_name?: boolean;
    html_make_all_elements_visible?: boolean;
    html_remove_fixed_elements?: boolean;
    html_remove_navigation_elements?: boolean;
    http_proxy?: string;
    input_s3_path?: string;
    input_s3_region?: string;
    input_url?: string;
    invalidate_cache?: boolean;
    language?: Array<ParserLanguages>;
    extract_layout?: boolean;
    max_pages?: number | null;
    output_pdf_of_document?: boolean;
    output_s3_path_prefix?: string;
    output_s3_region?: string;
    page_prefix?: string;
    page_separator?: string;
    page_suffix?: string;
    preserve_layout_alignment_across_pages?: boolean;
    skip_diagonal_text?: boolean;
    spreadsheet_extract_sub_tables?: boolean;
    structured_output?: boolean;
    structured_output_json_schema?: string;
    structured_output_json_schema_name?: string;
    take_screenshot?: boolean;
    target_pages?: string;
    vendor_multimodal_api_key?: string;
    vendor_multimodal_model_name?: string;
    model?: string;
    webhook_url?: string;
    preset?: string;
    parse_mode?: ParsingMode | null;
    page_error_tolerance?: number;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string;
    replace_failed_page_with_error_message_suffix?: string;
    system_prompt?: string;
    system_prompt_append?: string;
    user_prompt?: string;
    job_timeout_in_seconds?: number;
    job_timeout_extra_time_per_page_in_seconds?: number;
    strict_mode_image_extraction?: boolean;
    strict_mode_image_ocr?: boolean;
    strict_mode_reconstruction?: boolean;
    strict_mode_buggy_font?: boolean;
    save_images?: boolean;
    ignore_document_elements_for_layout_detection?: boolean;
    output_tables_as_HTML?: boolean;
    markdown_table_multiline_header_separator?: string;
    use_vendor_multimodal_model?: boolean;
    bounding_box?: string;
    gpt4o_mode?: boolean;
    gpt4o_api_key?: string;
    complemental_formatting_instruction?: string;
    content_guideline_instruction?: string;
    premium_mode?: boolean;
    is_formatting_instruction?: boolean;
    continuous_mode?: boolean;
    parsing_instruction?: string;
    fast_mode?: boolean;
    formatting_instruction?: string;
};
type BoxAuthMechanism = "developer_token" | "ccg";
declare const BoxAuthMechanism: {
    readonly DEVELOPER_TOKEN: "developer_token";
    readonly CCG: "ccg";
};
type CharacterChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "character";
};
/**
 * Schema for a chat app
 */
type ChatApp = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
    /**
     * ID of the project the chat app belongs to
     */
    project_id: string;
};
/**
 * Schema for creating a new chat app
 */
type ChatAppCreate = {
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
};
type ChatAppResponse = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Name of the chat app
     */
    name: string;
    /**
     * ID of the retriever to use for the chat app
     */
    retriever_id: string;
    /**
     * Configuration for the LLM model to use for the chat app
     */
    llm_config: LlmParameters;
    /**
     * Configuration for the retrieval model to use for the chat app
     */
    retrieval_config: PresetCompositeRetrievalParams;
    /**
     * ID of the project the chat app belongs to
     */
    project_id: string;
    retriever_name: string;
};
/**
 * Schema for updating a chat app
 */
type ChatAppUpdate = {
    name?: string | null;
    llm_config?: LlmParameters | null;
    retrieval_config?: PresetCompositeRetrievalParams | null;
};
type ChatData = {
    retrieval_parameters?: PresetRetrievalParams;
    llm_parameters?: LlmParameters | null;
    class_name?: string;
};
type ChatInputParams = {
    messages?: Array<InputMessage>;
    data?: ChatData;
    class_name?: string;
};
type CheckoutSessionCreatePayload = {
    success_url: string;
    cancel_url: string;
};
type ChunkMode = "PAGE" | "DOCUMENT" | "SECTION" | "GROUPED_PAGES";
declare const ChunkMode: {
    readonly PAGE: "PAGE";
    readonly DOCUMENT: "DOCUMENT";
    readonly SECTION: "SECTION";
    readonly GROUPED_PAGES: "GROUPED_PAGES";
};
type CloudAzStorageBlobDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The name of the Azure Storage Blob container to read from.
     */
    container_name: string;
    /**
     * The Azure Storage Blob account URL to use for authentication.
     */
    account_url: string;
    /**
     * The blob name to read from.
     */
    blob?: string | null;
    /**
     * The prefix of the Azure Storage Blob objects to read from.
     */
    prefix?: string | null;
    /**
     * The Azure Storage Blob account name to use for authentication.
     */
    account_name?: string | null;
    /**
     * The Azure Storage Blob account key to use for authentication.
     */
    account_key?: string | null;
    /**
     * The Azure AD tenant ID to use for authentication.
     */
    tenant_id?: string | null;
    /**
     * The Azure AD client ID to use for authentication.
     */
    client_id?: string | null;
    /**
     * The Azure AD client secret to use for authentication.
     */
    client_secret?: string | null;
    class_name?: string;
};
type CloudAzStorageBlobDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The name of the Azure Storage Blob container to read from.
     */
    container_name: string;
    /**
     * The Azure Storage Blob account URL to use for authentication.
     */
    account_url: string;
    /**
     * The blob name to read from.
     */
    blob?: string | null;
    /**
     * The prefix of the Azure Storage Blob objects to read from.
     */
    prefix?: string | null;
    /**
     * The Azure Storage Blob account name to use for authentication.
     */
    account_name?: string | null;
    /**
     * The Azure Storage Blob account key to use for authentication.
     */
    account_key?: string | null;
    /**
     * The Azure AD tenant ID to use for authentication.
     */
    tenant_id?: string | null;
    /**
     * The Azure AD client ID to use for authentication.
     */
    client_id?: string | null;
    /**
     * The Azure AD client secret to use for authentication.
     */
    client_secret?: string | null;
    class_name?: string;
};
/**
 * Cloud Azure AI Search Vector Store.
 */
type CloudAzureAiSearchVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    search_service_endpoint: string;
    search_service_api_version?: string | null;
    index_name?: string | null;
    filterable_metadata_field_keys?: {
        [key: string]: unknown;
    } | null;
    embedding_dimension?: number | null;
    client_id?: string | null;
    client_secret?: string | null;
    tenant_id?: string | null;
    class_name?: string;
};
/**
 * Cloud Azure AI Search Vector Store.
 */
type CloudAzureAiSearchVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    search_service_api_key: string;
    search_service_endpoint: string;
    search_service_api_version?: string | null;
    index_name?: string | null;
    filterable_metadata_field_keys?: {
        [key: string]: unknown;
    } | null;
    embedding_dimension?: number | null;
    client_id?: string | null;
    client_secret?: string | null;
    tenant_id?: string | null;
    class_name?: string;
};
type CloudBoxDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The ID of the Box folder to read from.
     */
    folder_id?: string | null;
    /**
     * The type of authentication to use (Developer Token or CCG)
     */
    authentication_mechanism: BoxAuthMechanism;
    /**
     * Developer token for authentication if authentication_mechanism is 'developer_token'.
     */
    developer_token?: string | null;
    /**
     * Box API key used for identifying the application the user is authenticating with
     */
    client_id?: string | null;
    /**
     * Box API secret used for making auth requests.
     */
    client_secret?: string | null;
    /**
     * Box User ID, if provided authenticates as user.
     */
    user_id?: string | null;
    /**
     * Box Enterprise ID, if provided authenticates as service.
     */
    enterprise_id?: string | null;
    class_name?: string;
};
type CloudBoxDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The ID of the Box folder to read from.
     */
    folder_id?: string | null;
    /**
     * The type of authentication to use (Developer Token or CCG)
     */
    authentication_mechanism: BoxAuthMechanism;
    /**
     * Developer token for authentication if authentication_mechanism is 'developer_token'.
     */
    developer_token?: string | null;
    /**
     * Box API key used for identifying the application the user is authenticating with
     */
    client_id?: string | null;
    /**
     * Box API secret used for making auth requests.
     */
    client_secret?: string | null;
    /**
     * Box User ID, if provided authenticates as user.
     */
    user_id?: string | null;
    /**
     * Box Enterprise ID, if provided authenticates as service.
     */
    enterprise_id?: string | null;
    class_name?: string;
};
type CloudConfluenceDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The server URL of the Confluence instance.
     */
    server_url: string;
    /**
     * Type of Authentication for connecting to Confluence APIs.
     */
    authentication_mechanism: string;
    /**
     * The username to use for authentication.
     */
    user_name?: string | null;
    /**
     * The API token to use for authentication.
     */
    api_token?: string | null;
    /**
     * The space key to read from.
     */
    space_key?: string | null;
    /**
     * The page IDs of the Confluence to read from.
     */
    page_ids?: string | null;
    /**
     * The CQL query to use for fetching pages.
     */
    cql?: string | null;
    /**
     * The label to use for fetching pages.
     */
    label?: string | null;
    /**
     * Whether to index restricted pages.
     */
    index_restricted_pages?: boolean;
    /**
     * Whether to keep the markdown format.
     */
    keep_markdown_format?: boolean;
    class_name?: string;
};
type CloudConfluenceDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The server URL of the Confluence instance.
     */
    server_url: string;
    /**
     * Type of Authentication for connecting to Confluence APIs.
     */
    authentication_mechanism: string;
    /**
     * The username to use for authentication.
     */
    user_name?: string | null;
    /**
     * The API token to use for authentication.
     */
    api_token?: string | null;
    /**
     * The space key to read from.
     */
    space_key?: string | null;
    /**
     * The page IDs of the Confluence to read from.
     */
    page_ids?: string | null;
    /**
     * The CQL query to use for fetching pages.
     */
    cql?: string | null;
    /**
     * The label to use for fetching pages.
     */
    label?: string | null;
    /**
     * Whether to index restricted pages.
     */
    index_restricted_pages?: boolean;
    /**
     * Whether to keep the markdown format.
     */
    keep_markdown_format?: boolean;
    class_name?: string;
};
/**
 * Cloud document stored in S3.
 */
type CloudDocument = {
    text: string;
    metadata: {
        [key: string]: unknown;
    };
    excluded_embed_metadata_keys?: Array<string>;
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1].
     */
    page_positions?: Array<number> | null;
    id: string;
};
/**
 * Create a new cloud document.
 */
type CloudDocumentCreate = {
    text: string;
    metadata: {
        [key: string]: unknown;
    };
    excluded_embed_metadata_keys?: Array<string>;
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * indices in the CloudDocument.text where a new page begins. e.g. Second page starts at index specified by page_positions[1].
     */
    page_positions?: Array<number> | null;
    id?: string | null;
};
type CloudGoogleDriveDataSource = {
    supports_access_control?: boolean;
    /**
     * The ID of the Google Drive folder to read from.
     */
    folder_id: string;
    /**
     * The service account key JSON to use for authentication.
     */
    service_account_key: {
        [key: string]: unknown;
    };
    class_name?: string;
};
/**
 * Cloud Jira Data Source integrating JiraReader.
 */
type CloudJiraDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API/ Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url?: string | null;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    class_name?: string;
};
/**
 * Cloud Jira Data Source integrating JiraReader.
 */
type CloudJiraDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The email address to use for authentication.
     */
    email?: string | null;
    /**
     * The API/ Access Token used for Basic, PAT and OAuth2 authentication.
     */
    api_token?: string | null;
    /**
     * The server url for Jira Cloud.
     */
    server_url?: string | null;
    /**
     * The cloud ID, used in case of OAuth2.
     */
    cloud_id?: string | null;
    /**
     * Type of Authentication for connecting to Jira APIs.
     */
    authentication_mechanism: string;
    /**
     * JQL (Jira Query Language) query to search.
     */
    query: string;
    class_name?: string;
};
/**
 * Cloud Milvus Vector Store.
 */
type CloudMilvusVectorStoreReadable = {
    supports_nested_metadata_filters?: boolean;
    uri: string;
    collection_name?: string | null;
    token?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud Milvus Vector Store.
 */
type CloudMilvusVectorStoreWritable = {
    supports_nested_metadata_filters?: boolean;
    uri: string;
    collection_name?: string | null;
    token?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud MongoDB Atlas Vector Store.
 *
 * This class is used to store the configuration for a MongoDB Atlas vector store,
 * so that it can be created and used in LlamaCloud.
 *
 * Args:
 * mongodb_uri (str): URI for connecting to MongoDB Atlas
 * db_name (str): name of the MongoDB database
 * collection_name (str): name of the MongoDB collection
 * vector_index_name (str): name of the MongoDB Atlas vector index
 * fulltext_index_name (str): name of the MongoDB Atlas full-text index
 */
type CloudMongoDbAtlasVectorSearchReadable = {
    supports_nested_metadata_filters?: boolean;
    db_name: string;
    collection_name: string;
    vector_index_name?: string | null;
    fulltext_index_name?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
/**
 * Cloud MongoDB Atlas Vector Store.
 *
 * This class is used to store the configuration for a MongoDB Atlas vector store,
 * so that it can be created and used in LlamaCloud.
 *
 * Args:
 * mongodb_uri (str): URI for connecting to MongoDB Atlas
 * db_name (str): name of the MongoDB database
 * collection_name (str): name of the MongoDB collection
 * vector_index_name (str): name of the MongoDB Atlas vector index
 * fulltext_index_name (str): name of the MongoDB Atlas full-text index
 */
type CloudMongoDbAtlasVectorSearchWritable = {
    supports_nested_metadata_filters?: boolean;
    mongodb_uri: string;
    db_name: string;
    collection_name: string;
    vector_index_name?: string | null;
    fulltext_index_name?: string | null;
    embedding_dimension?: number | null;
    class_name?: string;
};
type CloudNotionPageDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The Notion Database Id to read content from.
     */
    database_ids?: string | null;
    /**
     * The Page ID's of the Notion to read from.
     */
    page_ids?: string | null;
    class_name?: string;
};
type CloudNotionPageDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The integration token to use for authentication.
     */
    integration_token: string;
    /**
     * The Notion Database Id to read content from.
     */
    database_ids?: string | null;
    /**
     * The Page ID's of the Notion to read from.
     */
    page_ids?: string | null;
    class_name?: string;
};
type CloudOneDriveDataSourceReadable = {
    supports_access_control?: true;
    /**
     * The user principal name to use for authentication.
     */
    user_principal_name: string;
    /**
     * The path of the OneDrive folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the OneDrive folder to read from.
     */
    folder_id?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    class_name?: string;
};
type CloudOneDriveDataSourceWritable = {
    supports_access_control?: true;
    /**
     * The user principal name to use for authentication.
     */
    user_principal_name: string;
    /**
     * The path of the OneDrive folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the OneDrive folder to read from.
     */
    folder_id?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The client secret to use for authentication.
     */
    client_secret: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    class_name?: string;
};
/**
 * Cloud Pinecone Vector Store.
 *
 * This class is used to store the configuration for a Pinecone vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * api_key (str): API key for authenticating with Pinecone
 * index_name (str): name of the Pinecone index
 * namespace (optional[str]): namespace to use in the Pinecone index
 * insert_kwargs (optional[dict]): additional kwargs to pass during insertion
 */
type CloudPineconeVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    index_name: string;
    namespace?: string | null;
    insert_kwargs?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
/**
 * Cloud Pinecone Vector Store.
 *
 * This class is used to store the configuration for a Pinecone vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * api_key (str): API key for authenticating with Pinecone
 * index_name (str): name of the Pinecone index
 * namespace (optional[str]): namespace to use in the Pinecone index
 * insert_kwargs (optional[dict]): additional kwargs to pass during insertion
 */
type CloudPineconeVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    /**
     * The API key for authenticating with Pinecone
     */
    api_key: string;
    index_name: string;
    namespace?: string | null;
    insert_kwargs?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
type CloudPostgresVectorStoreReadable = {
    supports_nested_metadata_filters?: boolean;
    database: string;
    host: string;
    port: number;
    user: string;
    table_name: string;
    schema_name: string;
    embed_dim: number;
    hybrid_search?: boolean | null;
    perform_setup?: boolean;
    /**
     * HNSW settings for PGVector index. Set to null to disable HNSW indexing in favor of a brute force indexing/exact search strategy instead.
     */
    hnsw_settings?: PgVectorHnswSettings | null;
    class_name?: string;
};
type CloudPostgresVectorStoreWritable = {
    supports_nested_metadata_filters?: boolean;
    database: string;
    host: string;
    password: string;
    port: number;
    user: string;
    table_name: string;
    schema_name: string;
    embed_dim: number;
    hybrid_search?: boolean | null;
    perform_setup?: boolean;
    /**
     * HNSW settings for PGVector index. Set to null to disable HNSW indexing in favor of a brute force indexing/exact search strategy instead.
     */
    hnsw_settings?: PgVectorHnswSettings | null;
    class_name?: string;
};
/**
 * Cloud Qdrant Vector Store.
 *
 * This class is used to store the configuration for a Qdrant vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * collection_name (str): name of the Qdrant collection
 * url (str): url of the Qdrant instance
 * api_key (str): API key for authenticating with Qdrant
 * max_retries (int): maximum number of retries in case of a failure. Defaults to 3
 * client_kwargs (dict): additional kwargs to pass to the Qdrant client
 */
type CloudQdrantVectorStoreReadable = {
    supports_nested_metadata_filters?: true;
    collection_name: string;
    url: string;
    max_retries?: number;
    client_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
/**
 * Cloud Qdrant Vector Store.
 *
 * This class is used to store the configuration for a Qdrant vector store, so that it can be
 * created and used in LlamaCloud.
 *
 * Args:
 * collection_name (str): name of the Qdrant collection
 * url (str): url of the Qdrant instance
 * api_key (str): API key for authenticating with Qdrant
 * max_retries (int): maximum number of retries in case of a failure. Defaults to 3
 * client_kwargs (dict): additional kwargs to pass to the Qdrant client
 */
type CloudQdrantVectorStoreWritable = {
    supports_nested_metadata_filters?: true;
    collection_name: string;
    url: string;
    api_key: string;
    max_retries?: number;
    client_kwargs?: {
        [key: string]: unknown;
    };
    class_name?: string;
};
type CloudS3DataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * The name of the S3 bucket to read from.
     */
    bucket: string;
    /**
     * The prefix of the S3 objects to read from.
     */
    prefix?: string | null;
    /**
     * The regex pattern to filter S3 objects. Must be a valid regex pattern.
     */
    regex_pattern?: string | null;
    /**
     * The AWS access ID to use for authentication.
     */
    aws_access_id?: string | null;
    /**
     * The AWS access secret to use for authentication.
     */
    aws_access_secret?: string | null;
    /**
     * The S3 endpoint URL to use for authentication.
     */
    s3_endpoint_url?: string | null;
    class_name?: string;
};
type CloudS3DataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * The name of the S3 bucket to read from.
     */
    bucket: string;
    /**
     * The prefix of the S3 objects to read from.
     */
    prefix?: string | null;
    /**
     * The regex pattern to filter S3 objects. Must be a valid regex pattern.
     */
    regex_pattern?: string | null;
    /**
     * The AWS access ID to use for authentication.
     */
    aws_access_id?: string | null;
    /**
     * The AWS access secret to use for authentication.
     */
    aws_access_secret?: string | null;
    /**
     * The S3 endpoint URL to use for authentication.
     */
    s3_endpoint_url?: string | null;
    class_name?: string;
};
type CloudSharepointDataSourceReadable = {
    supports_access_control?: true;
    /**
     * The name of the SharePoint site to download from.
     */
    site_name?: string | null;
    /**
     * The ID of the SharePoint site to download from.
     */
    site_id?: string | null;
    /**
     * The path of the Sharepoint folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the Sharepoint folder to read from.
     */
    folder_id?: string | null;
    /**
     * The name of the Sharepoint drive to read from.
     */
    drive_name?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    /**
     * Whether to get permissions for the sharepoint site.
     */
    get_permissions?: boolean | null;
    class_name?: string;
};
type CloudSharepointDataSourceWritable = {
    supports_access_control?: true;
    /**
     * The name of the SharePoint site to download from.
     */
    site_name?: string | null;
    /**
     * The ID of the SharePoint site to download from.
     */
    site_id?: string | null;
    /**
     * The path of the Sharepoint folder to read from.
     */
    folder_path?: string | null;
    /**
     * The ID of the Sharepoint folder to read from.
     */
    folder_id?: string | null;
    /**
     * The name of the Sharepoint drive to read from.
     */
    drive_name?: string | null;
    /**
     * The client ID to use for authentication.
     */
    client_id: string;
    /**
     * The client secret to use for authentication.
     */
    client_secret: string;
    /**
     * The tenant ID to use for authentication.
     */
    tenant_id: string;
    /**
     * The list of required file extensions.
     */
    required_exts?: Array<string> | null;
    /**
     * Whether to get permissions for the sharepoint site.
     */
    get_permissions?: boolean | null;
    class_name?: string;
};
type CloudSlackDataSourceReadable = {
    supports_access_control?: boolean;
    /**
     * Slack Channel.
     */
    channel_ids?: string | null;
    /**
     * Latest date.
     */
    latest_date?: string | null;
    /**
     * Earliest date.
     */
    earliest_date?: string | null;
    /**
     * Earliest date timestamp.
     */
    earliest_date_timestamp?: number | null;
    /**
     * Latest date timestamp.
     */
    latest_date_timestamp?: number | null;
    /**
     * Slack Channel name pattern.
     */
    channel_patterns?: string | null;
    class_name?: string;
};
type CloudSlackDataSourceWritable = {
    supports_access_control?: boolean;
    /**
     * Slack Bot Token.
     */
    slack_token: string;
    /**
     * Slack Channel.
     */
    channel_ids?: string | null;
    /**
     * Latest date.
     */
    latest_date?: string | null;
    /**
     * Earliest date.
     */
    earliest_date?: string | null;
    /**
     * Earliest date timestamp.
     */
    earliest_date_timestamp?: number | null;
    /**
     * Latest date timestamp.
     */
    latest_date_timestamp?: number | null;
    /**
     * Slack Channel name pattern.
     */
    channel_patterns?: string | null;
    class_name?: string;
};
type CohereEmbedding = {
    /**
     * The modelId of the Cohere model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The Cohere API key.
     */
    api_key: string | null;
    /**
     * Truncation type - START/ END/ NONE
     */
    truncate?: string;
    /**
     * Model Input type. If not provided, search_document and search_query are used when needed.
     */
    input_type?: string | null;
    /**
     * Embedding type. If not provided float embedding_type is used when needed.
     */
    embedding_type?: string;
    class_name?: string;
};
type CohereEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "COHERE_EMBEDDING";
    /**
     * Configuration for the Cohere embedding model.
     */
    component?: CohereEmbedding;
};
/**
 * Enum for the mode of composite retrieval.
 */
type CompositeRetrievalMode = "routing" | "full";
/**
 * Enum for the mode of composite retrieval.
 */
declare const CompositeRetrievalMode: {
    readonly ROUTING: "routing";
    readonly FULL: "full";
};
type CompositeRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
    /**
     * The query to retrieve against.
     */
    query: string;
};
type CompositeRetrievalResult = {
    /**
     * The retrieved nodes from the composite retrieval.
     */
    nodes?: Array<CompositeRetrievedTextNodeWithScore>;
    /**
     * The image nodes retrieved by the pipeline for the given query.
     */
    image_nodes?: Array<PageScreenshotNodeWithScore>;
};
type CompositeRetrievedTextNode = {
    /**
     * The ID of the retrieved node.
     */
    id: string;
    /**
     * The ID of the retriever this node was retrieved from.
     */
    retriever_id: string;
    /**
     * The name of the retrieval pipeline this node was retrieved from.
     */
    retriever_pipeline_name: string;
    /**
     * The ID of the pipeline this node was retrieved from.
     */
    pipeline_id: string;
    /**
     * Metadata associated with the retrieved node.
     */
    metadata?: {
        [key: string]: unknown;
    };
    /**
     * The text of the retrieved node.
     */
    text: string;
    /**
     * The start character index of the retrieved node in the document
     */
    start_char_idx: number | null;
    /**
     * The end character index of the retrieved node in the document
     */
    end_char_idx: number | null;
};
type CompositeRetrievedTextNodeWithScore = {
    node: CompositeRetrievedTextNode;
    score?: number | null;
    class_name?: string;
};
type ConfigurableDataSinkNames = "PINECONE" | "POSTGRES" | "QDRANT" | "AZUREAI_SEARCH" | "MONGODB_ATLAS" | "MILVUS";
declare const ConfigurableDataSinkNames: {
    readonly PINECONE: "PINECONE";
    readonly POSTGRES: "POSTGRES";
    readonly QDRANT: "QDRANT";
    readonly AZUREAI_SEARCH: "AZUREAI_SEARCH";
    readonly MONGODB_ATLAS: "MONGODB_ATLAS";
    readonly MILVUS: "MILVUS";
};
type ConfigurableDataSourceNames = "S3" | "AZURE_STORAGE_BLOB" | "GOOGLE_DRIVE" | "MICROSOFT_ONEDRIVE" | "MICROSOFT_SHAREPOINT" | "SLACK" | "NOTION_PAGE" | "CONFLUENCE" | "JIRA" | "BOX";
declare const ConfigurableDataSourceNames: {
    readonly S3: "S3";
    readonly AZURE_STORAGE_BLOB: "AZURE_STORAGE_BLOB";
    readonly GOOGLE_DRIVE: "GOOGLE_DRIVE";
    readonly MICROSOFT_ONEDRIVE: "MICROSOFT_ONEDRIVE";
    readonly MICROSOFT_SHAREPOINT: "MICROSOFT_SHAREPOINT";
    readonly SLACK: "SLACK";
    readonly NOTION_PAGE: "NOTION_PAGE";
    readonly CONFLUENCE: "CONFLUENCE";
    readonly JIRA: "JIRA";
    readonly BOX: "BOX";
};
type CreateIntentAndCustomerSessionResponse = {
    client_secret: string;
    customer_session_client_secret: string | null;
};
type CreditType = {
    id: string;
    name: string;
};
type CustomerPortalSessionCreatePayload = {
    return_url: string;
};
/**
 * Schema for a data sink.
 */
type DataSinkReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable;
    project_id: string;
};
/**
 * Schema for a data sink.
 */
type DataSinkWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable;
    project_id: string;
};
/**
 * Schema for creating a data sink.
 */
type DataSinkCreateReadable = {
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable;
};
/**
 * Schema for creating a data sink.
 */
type DataSinkCreateWritable = {
    /**
     * The name of the data sink.
     */
    name: string;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable;
};
/**
 * Schema for updating a data sink.
 */
type DataSinkUpdateReadable = {
    /**
     * The name of the data sink.
     */
    name?: string | null;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component?: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreReadable | CloudPostgresVectorStoreReadable | CloudQdrantVectorStoreReadable | CloudAzureAiSearchVectorStoreReadable | CloudMongoDbAtlasVectorSearchReadable | CloudMilvusVectorStoreReadable | null;
};
/**
 * Schema for updating a data sink.
 */
type DataSinkUpdateWritable = {
    /**
     * The name of the data sink.
     */
    name?: string | null;
    sink_type: ConfigurableDataSinkNames;
    /**
     * Component that implements the data sink
     */
    component?: {
        [key: string]: unknown;
    } | CloudPineconeVectorStoreWritable | CloudPostgresVectorStoreWritable | CloudQdrantVectorStoreWritable | CloudAzureAiSearchVectorStoreWritable | CloudMongoDbAtlasVectorSearchWritable | CloudMilvusVectorStoreWritable | null;
};
/**
 * Schema for a data source.
 */
type DataSourceReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudBoxDataSourceReadable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: {
        [key: string]: unknown;
    } | null;
    project_id: string;
};
/**
 * Schema for a data source.
 */
type DataSourceWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudBoxDataSourceWritable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: {
        [key: string]: unknown;
    } | null;
    project_id: string;
};
/**
 * Schema for creating a data source.
 */
type DataSourceCreateReadable = {
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudBoxDataSourceReadable;
};
/**
 * Schema for creating a data source.
 */
type DataSourceCreateWritable = {
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudBoxDataSourceWritable;
};
/**
 * Schema for updating a data source.
 */
type DataSourceUpdateReadable = {
    /**
     * The name of the data source.
     */
    name?: string | null;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component?: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudBoxDataSourceReadable | null;
};
/**
 * Schema for updating a data source.
 */
type DataSourceUpdateWritable = {
    /**
     * The name of the data source.
     */
    name?: string | null;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component?: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudBoxDataSourceWritable | null;
};
/**
 * Schema for the parameters of a data source dispatcher job.
 */
type DataSourceUpdateDispatcherConfig = {
    type?: "data_source_update_dispatcher";
    /**
     * Whether to delete the data source from the pipeline
     */
    should_delete?: boolean | null;
    /**
     * The custom metadata to attach to the data source.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
/**
 * Schema for updating the default organization for a user.
 */
type DefaultOrganizationUpdate = {
    /**
     * The organization's ID.
     */
    organization_id: string;
};
/**
 * Schema for the parameters of a delete job.
 */
type DeleteParams = {
    /**
     * The IDs for the documents to delete.
     */
    document_ids_to_delete?: Array<string> | null;
    /**
     * The IDs for the files to delete.
     */
    files_ids_to_delete?: Array<string> | null;
    /**
     * The IDs for the data sources to delete.
     */
    data_sources_ids_to_delete?: Array<string> | null;
    /**
     * The collection name to delete.
     */
    embed_collection_name?: string | null;
    /**
     * The ID for the data sink from which to delete data.
     */
    data_sink_id?: string | null;
};
type DirectRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
    /**
     * The query to retrieve against.
     */
    query: string;
    /**
     * The pipelines to use for retrieval.
     */
    pipelines?: Array<RetrieverPipeline>;
};
type DocumentChunkMode = "PAGE" | "SECTION";
declare const DocumentChunkMode: {
    readonly PAGE: "PAGE";
    readonly SECTION: "SECTION";
};
/**
 * Schema for the parameters of a document ingestion job.
 */
type DocumentIngestionJobParams = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "document_ingestion";
    /**
     * Whether to delete the documents
     */
    should_delete?: boolean | null;
    /**
     * The IDs for the Documents this execution ran against.
     */
    document_ids?: Array<string> | null;
    /**
     * The ID for the File this execution ran against.
     */
    pipeline_file_id?: string | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
    /**
     * Whether the file is new
     */
    is_new_file?: boolean;
    /**
     * The number of pages in the file. Only used if used llama-parse
     */
    page_count?: number | null;
};
/**
 * A suggestion for an edit to a report.
 */
type EditSuggestion = {
    justification: string;
    blocks: Array<ReportBlock | ReportPlanBlock>;
    removed_indices?: Array<number>;
};
/**
 * A request to suggest edits for a report.
 */
type EditSuggestionCreate = {
    user_query: string;
    chat_history: Array<LlamaIndexCoreBaseLlmsTypesChatMessage>;
};
type ElementSegmentationConfig = {
    mode?: "element";
};
/**
 * Schema for an embedding model config.
 */
type EmbeddingModelConfig = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the embedding model config.
     */
    name: string;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    project_id: string;
};
type EmbeddingModelConfigCreate = {
    /**
     * The name of the embedding model config.
     */
    name: string;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
};
type EmbeddingModelConfigUpdate = {
    /**
     * The name of the embedding model config.
     */
    name?: string | null;
    /**
     * The embedding configuration for the embedding model config.
     */
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
};
/**
 * Schema for the params for an eval execution.
 */
type EvalExecutionParams = {
    /**
     * The LLM model to use within eval execution.
     */
    llm_model?: SupportedLlmModelNames;
    /**
     * The template to use for the question answering prompt.
     */
    qa_prompt_tmpl?: string;
};
/**
 * Schema and configuration for creating an extraction agent.
 */
type ExtractAgent = {
    /**
     * The id of the extraction agent.
     */
    id: string;
    /**
     * The name of the extraction agent.
     */
    name: string;
    /**
     * The ID of the project that the extraction agent belongs to.
     */
    project_id: string;
    /**
     * The schema of the data.
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
    /**
     * The creation time of the extraction agent.
     */
    created_at?: string | null;
    /**
     * The last update time of the extraction agent.
     */
    updated_at?: string | null;
};
/**
 * Settings for creating an extraction agent.
 */
type ExtractAgentCreate = {
    /**
     * The name of the extraction schema
     */
    name: string;
    /**
     * The schema of the data.
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
};
/**
 * Settings for updating an extraction schema.
 */
type ExtractAgentUpdate = {
    /**
     * The schema of the data
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
    /**
     * The configuration parameters for the extraction agent.
     */
    config: ExtractConfig;
};
/**
 * Additional parameters for the extraction agent.
 */
type ExtractConfig = {
    /**
     * The extraction target specified.
     */
    extraction_target?: ExtractTarget;
    /**
     * The extraction mode specified.
     */
    extraction_mode?: ExtractMode;
    /**
     * The system prompt to use for the extraction.
     */
    system_prompt?: string | null;
    /**
     * Whether to use reasoning for the extraction.
     */
    use_reasoning?: boolean;
    /**
     * Whether to cite sources for the extraction.
     */
    cite_sources?: boolean;
    /**
     * The mode to use for chunking the document.
     */
    chunk_mode?: DocumentChunkMode;
    /**
     * Whether to invalidate the cache for the extraction.
     */
    invalidate_cache?: boolean;
};
type ExtractJob = {
    /**
     * The id of the extraction job
     */
    id: string;
    /**
     * The agent that the job was run on.
     */
    extraction_agent: ExtractAgent;
    /**
     * The status of the extraction job
     */
    status: StatusEnum;
    /**
     * The error that occurred during extraction
     */
    error?: string | null;
    /**
     * The file that the extract was extracted from
     */
    file: File;
};
/**
 * Schema for creating an extraction job.
 */
type ExtractJobCreate = {
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The id of the file
     */
    file_id: string;
    /**
     * The data schema to override the extraction agent's data schema with
     */
    data_schema_override?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string | null;
    /**
     * The config to override the extraction agent's config with
     */
    config_override?: ExtractConfig | null;
};
/**
 * Schema for creating extraction jobs in batch.
 */
type ExtractJobCreateBatch = {
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The ids of the files
     */
    file_ids: Array<string>;
    /**
     * The data schema to override the extraction agent's data schema with
     */
    data_schema_override?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string | null;
    /**
     * The config to override the extraction agent's config with
     */
    config_override?: ExtractConfig | null;
};
type ExtractMode = "FAST" | "BALANCED" | "PREMIUM" | "MULTIMODAL" | "ACCURATE";
declare const ExtractMode: {
    readonly FAST: "FAST";
    readonly BALANCED: "BALANCED";
    readonly PREMIUM: "PREMIUM";
    readonly MULTIMODAL: "MULTIMODAL";
    readonly ACCURATE: "ACCURATE";
};
type ExtractModels = "gpt-4o" | "gpt-4o-mini" | "gpt-4.1" | "gpt-4.1-mini" | "o3-mini";
declare const ExtractModels: {
    readonly GPT_4O: "gpt-4o";
    readonly GPT_4O_MINI: "gpt-4o-mini";
    readonly GPT_4_1: "gpt-4.1";
    readonly GPT_4_1_MINI: "gpt-4.1-mini";
    readonly O3_MINI: "o3-mini";
};
/**
 * Schema for an extraction resultset.
 */
type ExtractResultset = {
    /**
     * The id of the extraction run
     */
    run_id: string;
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The data extracted from the file
     */
    data: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | Array<{
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    }> | null;
    /**
     * The metadata extracted from the file
     */
    extraction_metadata: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
};
/**
 * Schema for an extraction run.
 */
type ExtractRun = {
    /**
     * The id of the extraction run
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The id of the extraction agent
     */
    extraction_agent_id: string;
    /**
     * The schema used for extraction
     */
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
    /**
     * The config used for extraction
     */
    config: ExtractConfig;
    /**
     * The file that the extract was extracted from
     */
    file: File;
    /**
     * The status of the extraction run
     */
    status: ExtractState;
    /**
     * The error that occurred during extraction
     */
    error?: string | null;
    /**
     * The id of the job that the extraction run belongs to
     */
    job_id?: string | null;
    /**
     * The data extracted from the file
     */
    data?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | Array<{
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    }> | null;
    /**
     * The metadata extracted from the file
     */
    extraction_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Whether this extraction run was triggered from the UI
     */
    from_ui: boolean;
};
type ExtractSchemaValidateRequest = {
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | string;
};
type ExtractSchemaValidateResponse = {
    data_schema: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    };
};
type ExtractState = "CREATED" | "PENDING" | "SUCCESS" | "ERROR";
declare const ExtractState: {
    readonly CREATED: "CREATED";
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
};
type ExtractTarget = "PER_DOC" | "PER_PAGE";
declare const ExtractTarget: {
    readonly PER_DOC: "PER_DOC";
    readonly PER_PAGE: "PER_PAGE";
};
/**
 * Enum for representing the different available page error handling modes
 */
type FailPageMode = "raw_text" | "blank_page" | "error_message";
/**
 * Enum for representing the different available page error handling modes
 */
declare const FailPageMode: {
    readonly RAW_TEXT: "raw_text";
    readonly BLANK_PAGE: "blank_page";
    readonly ERROR_MESSAGE: "error_message";
};
/**
 * Schema for a file.
 */
type File = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    /**
     * The ID of the file in the external system
     */
    external_file_id: string;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * File type (e.g. pdf, docx, etc.)
     */
    file_type?: string | null;
    /**
     * The ID of the project that the file belongs to
     */
    project_id: string;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
};
type FileCountByStatusResponse = {
    /**
     * The counts of files by status
     */
    counts: {
        [key: string]: number;
    };
    /**
     * The total number of files
     */
    total_count: number;
    /**
     * The ID of the pipeline that the files belong to
     */
    pipeline_id?: string | null;
    /**
     * The ID of the data source that the files belong to
     */
    data_source_id?: string | null;
    /**
     * Whether to only count manually uploaded files
     */
    only_manually_uploaded?: boolean;
};
type FileCreate = {
    /**
     * Name that will be used for created file. If possible, always include the file extension in the name.
     */
    name: string;
    /**
     * The ID of the file in the external system
     */
    external_file_id?: string | null;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
};
type FileCreateFromUrl = {
    /**
     * Name that will be used for created file. If possible, always include the file extension in the name.
     */
    name?: string | null;
    /**
     * URL of the file to download
     */
    url: string;
    /**
     * URL of the proxy server to use for downloading the file
     */
    proxy_url?: string | null;
    /**
     * Headers to include in the request when downloading the file
     */
    request_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Whether to verify the SSL certificate when downloading the file
     */
    verify_ssl?: boolean;
    /**
     * Whether to follow redirects when downloading the file
     */
    follow_redirects?: boolean;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
type FileParsePublic = {
    /**
     * The date and time when the file was parsed.
     */
    created_at: string;
    /**
     * The status of the parse task.
     */
    status: string;
    /**
     * The date and time when the file parse started.
     */
    started_at?: string | null;
    /**
     * The date and time when the file parse ended.
     */
    ended_at?: string | null;
    /**
     * The path to the input file.
     */
    input_path: string;
    /**
     * The path to the data file.
     */
    data_path: string;
};
/**
 * Vector store filter conditions to combine different filters.
 */
type FilterCondition = "and" | "or" | "not";
/**
 * Vector store filter conditions to combine different filters.
 */
declare const FilterCondition: {
    readonly AND: "and";
    readonly OR: "or";
    readonly NOT: "not";
};
/**
 * Vector store filter operator.
 */
type FilterOperator = "==" | ">" | "<" | "!=" | ">=" | "<=" | "in" | "nin" | "any" | "all" | "text_match" | "text_match_insensitive" | "contains" | "is_empty";
/**
 * Vector store filter operator.
 */
declare const FilterOperator: {
    readonly "==": "==";
    readonly ">": ">";
    readonly "<": "<";
    readonly "!=": "!=";
    readonly ">=": ">=";
    readonly "<=": "<=";
    readonly IN: "in";
    readonly NIN: "nin";
    readonly ANY: "any";
    readonly ALL: "all";
    readonly TEXT_MATCH: "text_match";
    readonly TEXT_MATCH_INSENSITIVE: "text_match_insensitive";
    readonly CONTAINS: "contains";
    readonly IS_EMPTY: "is_empty";
};
type FreeCreditsUsage = {
    starting_balance: number;
    remaining_balance: number;
    grant_name: string;
    expires_at: string;
};
type GeminiEmbedding = {
    /**
     * The modelId of the Gemini model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Title is only applicable for retrieval_document tasks, and is used to represent a document title. For other tasks, title is invalid.
     */
    title?: string | null;
    /**
     * The task for embedding model.
     */
    task_type?: string | null;
    /**
     * API key to access the model. Defaults to None.
     */
    api_key?: string | null;
    /**
     * API base to access the model. Defaults to None.
     */
    api_base?: string | null;
    /**
     * Transport to access the model. Defaults to None.
     */
    transport?: string | null;
    class_name?: string;
};
type GeminiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "GEMINI_EMBEDDING";
    /**
     * Configuration for the Gemini embedding model.
     */
    component?: GeminiEmbedding;
};
type HttpValidationError = {
    detail?: Array<ValidationError>;
};
type HuggingFaceInferenceApiEmbedding = {
    /**
     * Hugging Face model name. If None, the task will be used.
     */
    model_name?: string | null;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Pooling strategy. If None, the model's default pooling is used.
     */
    pooling?: Pooling | null;
    /**
     * Instruction to prepend during query embedding.
     */
    query_instruction?: string | null;
    /**
     * Instruction to prepend during text embedding.
     */
    text_instruction?: string | null;
    /**
     * Hugging Face token. Will default to the locally saved token. Pass token=False if you don’t want to send your token to the server.
     */
    token?: string | boolean | null;
    /**
     * The maximum number of seconds to wait for a response from the server. Loading a new model in Inference API can take up to several minutes. Defaults to None, meaning it will loop until the server is available.
     */
    timeout?: number | null;
    /**
     * Additional headers to send to the server. By default only the authorization and user-agent headers are sent. Values in this dictionary will override the default values.
     */
    headers?: {
        [key: string]: string;
    } | null;
    /**
     * Additional cookies to send to the server.
     */
    cookies?: {
        [key: string]: string;
    } | null;
    /**
     * Optional task to pick Hugging Face's recommended model, used when model_name is left as default of None.
     */
    task?: string | null;
    class_name?: string;
};
type HuggingFaceInferenceApiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "HUGGINGFACE_API_EMBEDDING";
    /**
     * Configuration for the HuggingFace Inference API embedding model.
     */
    component?: HuggingFaceInferenceApiEmbedding;
};
type ImageBlock = {
    block_type?: "image";
    image?: (Blob | File) | null;
    path?: string | null;
    url?: string | null;
    image_mimetype?: string | null;
    detail?: string | null;
};
type IngestionErrorResponse = {
    /**
     * ID of the job that failed.
     */
    job_id: string;
    /**
     * List of errors that occurred during ingestion.
     */
    message: string;
    /**
     * Name of the job that failed.
     */
    step: JobNameMapping;
};
/**
 * This is distinct from a ChatMessage because this schema is enforced by the AI Chat library used in the frontend
 */
type InputMessage = {
    /**
     * ID of the message, if any. a UUID.
     */
    id?: string;
    role: MessageRole;
    content: string;
    /**
     * Additional data to be stored with the message.
     */
    data?: {
        [key: string]: unknown;
    } | null;
    class_name?: string;
};
/**
 * Enum for mapping original job names to readable names.
 */
type JobNameMapping = "MANAGED_INGESTION" | "DATA_SOURCE" | "FILES_UPDATE" | "FILE_UPDATER" | "PARSE" | "TRANSFORM" | "INGESTION" | "METADATA_UPDATE";
/**
 * Enum for mapping original job names to readable names.
 */
declare const JobNameMapping: {
    readonly MANAGED_INGESTION: "MANAGED_INGESTION";
    readonly DATA_SOURCE: "DATA_SOURCE";
    readonly FILES_UPDATE: "FILES_UPDATE";
    readonly FILE_UPDATER: "FILE_UPDATER";
    readonly PARSE: "PARSE";
    readonly TRANSFORM: "TRANSFORM";
    readonly INGESTION: "INGESTION";
    readonly METADATA_UPDATE: "METADATA_UPDATE";
};
/**
 * Enum for executable pipeline job names.
 */
type JobNames = "load_documents_job" | "load_files_job" | "playground_job" | "pipeline_managed_ingestion_job" | "data_source_managed_ingestion_job" | "data_source_update_dispatcher_job" | "pipeline_file_update_dispatcher_job" | "pipeline_file_updater_job" | "file_managed_ingestion_job" | "document_ingestion_job" | "metadata_update_job" | "parse_raw_file_job_cached" | "extraction_job" | "extract_job" | "asyncio_test_job" | "parse_raw_file_job" | "llama_parse_transform_job";
/**
 * Enum for executable pipeline job names.
 */
declare const JobNames: {
    readonly LOAD_DOCUMENTS_JOB: "load_documents_job";
    readonly LOAD_FILES_JOB: "load_files_job";
    readonly PLAYGROUND_JOB: "playground_job";
    readonly PIPELINE_MANAGED_INGESTION_JOB: "pipeline_managed_ingestion_job";
    readonly DATA_SOURCE_MANAGED_INGESTION_JOB: "data_source_managed_ingestion_job";
    readonly DATA_SOURCE_UPDATE_DISPATCHER_JOB: "data_source_update_dispatcher_job";
    readonly PIPELINE_FILE_UPDATE_DISPATCHER_JOB: "pipeline_file_update_dispatcher_job";
    readonly PIPELINE_FILE_UPDATER_JOB: "pipeline_file_updater_job";
    readonly FILE_MANAGED_INGESTION_JOB: "file_managed_ingestion_job";
    readonly DOCUMENT_INGESTION_JOB: "document_ingestion_job";
    readonly METADATA_UPDATE_JOB: "metadata_update_job";
    readonly PARSE_RAW_FILE_JOB_CACHED: "parse_raw_file_job_cached";
    readonly EXTRACTION_JOB: "extraction_job";
    readonly EXTRACT_JOB: "extract_job";
    readonly ASYNCIO_TEST_JOB: "asyncio_test_job";
    readonly PARSE_RAW_FILE_JOB: "parse_raw_file_job";
    readonly LLAMA_PARSE_TRANSFORM_JOB: "llama_parse_transform_job";
};
/**
 * Schema for a job's metadata.
 */
type JobRecord = {
    /**
     * The name of the job.
     */
    job_name: JobNames;
    /**
     * The partitions for this execution. Used for determining where to save job output.
     */
    partitions: {
        [key: string]: string;
    };
    /**
     * Additional metadata for the job execution.
     */
    parameters?: (({
        type: "parse";
    } & ParseJobConfig) | ({
        type: "legacy_parse";
    } & LegacyParseJobConfig) | ({
        type: "load_files";
    } & LoadFilesJobConfig) | ({
        type: "llama_parse_transform";
    } & LLamaParseTransformConfig) | ({
        type: "pipeline_managed_ingestion";
    } & PipelineManagedIngestionJobParams) | ({
        type: "data_source_update_dispatcher";
    } & DataSourceUpdateDispatcherConfig) | ({
        type: "pipeline_file_update_dispatcher";
    } & PipelineFileUpdateDispatcherConfig) | ({
        type: "pipeline_file_updater";
    } & PipelineFileUpdaterConfig) | ({
        type: "document_ingestion";
    } & DocumentIngestionJobParams)) | null;
    /**
     * The upstream request ID that created this job. Used for tracking the job across services.
     */
    session_id?: string | null;
    /**
     * The correlation ID for this job. Used for tracking the job across services.
     */
    correlation_id?: string | null;
    /**
     * The ID of the parent job execution.
     */
    parent_job_execution_id?: string | null;
    /**
     * The ID of the user that created this job
     */
    user_id?: string | null;
    /**
     * Creation datetime
     */
    created_at: string;
    /**
     * The ID of the project this job belongs to.
     */
    project_id?: string | null;
    /**
     * Unique identifier
     */
    id?: string;
    status: StatusEnum;
    error_code?: string | null;
    error_message?: string | null;
    /**
     * The number of times this job has been attempted
     */
    attempts?: number | null;
    started_at?: string | null;
    ended_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string;
};
type JobRecordWithUsageMetrics = {
    job_record: JobRecord;
    usage_metrics?: UsageMetricResponse | null;
    user: UserJobRecord;
};
/**
 * Schema for an eval LLM model.
 */
type LlmModelData = {
    /**
     * The name of the LLM model.
     */
    name: string;
    /**
     * The description of the LLM model.
     */
    description: string;
    /**
     * Whether the model supports multi-modal image input
     */
    multi_modal: boolean;
    model_name?: string;
};
type LlmParameters = {
    /**
     * The name of the model to use for LLM completions.
     */
    model_name?: SupportedLlmModelNames;
    /**
     * The system prompt to use for the completion.
     */
    system_prompt?: string | null;
    /**
     * The temperature value for the model.
     */
    temperature?: number | null;
    /**
     * Whether to use chain of thought reasoning.
     */
    use_chain_of_thought_reasoning?: boolean | null;
    /**
     * Whether to show citations in the response.
     */
    use_citation?: boolean | null;
    class_name?: string;
};
/**
 * Schema for the parameters of llamaparse transform job.
 */
type LLamaParseTransformConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "llama_parse_transform";
    /**
     * Whether to delete the files
     */
    file_output: string;
};
/**
 * Configuration for llamaparse job
 */
type LegacyParseJobConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "legacy_parse";
    /**
     * The user ID.
     */
    userId: string;
    /**
     * The file name.
     */
    fileName: string;
    /**
     * The original file name.
     */
    originalFileName: string;
    /**
     * The file key.
     */
    fileKey: string;
    /**
     * The input URL.
     */
    inputUrl?: string | null;
    /**
     * The HTTP proxy.
     */
    httpProxy?: string | null;
    /**
     * Whether to use fast mode.
     */
    fastMode?: boolean | null;
    /**
     * The language.
     */
    lang: string;
    /**
     * The parsing instruction.
     */
    template?: string;
    /**
     * The pipeline ID.
     */
    pipelineId?: string | null;
    /**
     * The output bucket.
     */
    outputBucket?: string | null;
    /**
     * The file ID.
     */
    fileId?: string | null;
    /**
     * The full file path.
     */
    fullFilePath?: string | null;
    /**
     * Whether the file is from LLama cloud.
     */
    fromLLamaCloud?: boolean;
    /**
     * Whether to skip diagonal text.
     */
    skipDiagonalText?: boolean;
    /**
     * Whether to preserve layout alignment across pages.
     */
    preserveLayoutAlignmentAcrossPages?: boolean;
    /**
     * Whether to invalidate the cache.
     */
    invalidateCache: boolean;
    /**
     * Whether to output PDF of document
     */
    outputPDFOfDocument?: boolean | null;
    /**
     * Whether to output images contained in the document
     */
    saveImages?: boolean | null;
    /**
     * Whether to use GPT4o.
     */
    gpt4o?: boolean;
    /**
     * The OpenAI API key.
     */
    openAIAPIKey: string;
    /**
     * Whether to unroll columns.
     */
    doNotUnrollColumns?: boolean;
    /**
     * Whether to extract subTables from spreadsheet.
     */
    spreadSheetExtractSubTables?: boolean | null;
    /**
     * Whether to perform layout extraction.
     */
    extractLayout?: boolean | null;
    /**
     * Whether to make all elements visible.
     */
    htmlMakeAllElementsVisible?: boolean | null;
    /**
     * Whether to remove fixed elements.
     */
    htmlRemoveFixedElements?: boolean | null;
    /**
     * Whether to remove navigation elements.
     */
    htmlRemoveNavigationElements?: boolean | null;
    /**
     * Whether to guess the XLSX sheet name when generation output xlsx.
     */
    guessXLSXSheetName?: boolean;
    /**
     * Whether to cache.
     */
    doNotCache?: boolean;
    /**
     * The page separator.
     */
    pageSeparator?: string | null;
    /**
     * A string describing a bounding box to use to parse the document. Contain 4 value between 0 to 1 representing in clock wise order the margin top, right, bottom, left of the selection bounding box in ratio of the document.
     */
    boundingBox?: string | null;
    /**
     * The top side of the bounding box.
     */
    bboxTop?: number | null;
    /**
     * The right side of the bounding box.
     */
    bboxRight?: number | null;
    /**
     * The bottom side of the bounding box.
     */
    bboxBottom?: number | null;
    /**
     * The left side of the bounding box.
     */
    bboxLeft?: number | null;
    /**
     * Whether to disable markdown reconstruction.
     */
    disableReconstruction?: boolean | null;
    /**
     * A string containing a list of comma separated containing the page number to extract. If not specified all pages are extracted from the document. The first page is the page 0.
     */
    targetPages?: string | null;
    /**
     * True if parsing happen in multimodal mode.
     */
    multimodalPipeline?: boolean | null;
    /**
     * The multimodal model to use.
     */
    multimodalModel?: string | null;
    /**
     * The model to use.
     */
    model?: string | null;
    /**
     * The multimodal vendor API key.
     */
    vendorAPIKey?: string | null;
    /**
     * A page prefix to add before each page.
     */
    pagePrefix?: string | null;
    /**
     * A page suffix to add after each page.
     */
    pageSuffix?: string | null;
    /**
     * The URL that needs to be called at the end of the parsing job.
     */
    webhookUrl?: string | null;
    /**
     * The preset of options to be used.
     */
    preset?: string | null;
    /**
     * Force to capture an image of each pages
     */
    takeScreenshot?: boolean;
    /**
     * Allow the parsing instruction to also format the output.
     */
    isFormattingInstruction?: boolean;
    /**
     * Whether to use premiumMode pipeline.
     */
    premiumMode?: boolean;
    /**
     * Whether to use continuousMode pipeline.
     */
    continuousMode?: boolean;
    /**
     * Disable the OCR on the document. LlamaParse will only extract the copyable text from the document
     */
    disableOcr?: boolean;
    /**
     * Disable the image extraction from the document. LlamaParse will not extract any image from the document.
     */
    disableImageExtraction?: boolean;
    /**
     * Annotate links in markdown. LlamaParse will try to add links from document into the markdown.
     */
    annotateLinks?: boolean;
    /**
     * Adaptive long table. LlamaParse will try to detect long table and adapt the output.
     */
    adaptiveLongTable?: boolean;
    /**
     * Compact markdown table. LlamaParse will compact the markdown table to not include too many spaces.
     */
    compactMarkdownTable?: boolean;
    /**
     * If specified, llamaParse will take the specified file. should be a valid s3:// url
     */
    inputS3Path?: string | null;
    /**
     * The region for the input S3 bucket.
     */
    inputS3Region?: string | null;
    /**
     * If specified, llamaParse will save the output to the specified path. All output file will use this 'prefix' should be a valid s3:// url
     */
    outputS3PathPrefix?: string | null;
    /**
     * The region for the output S3 bucket.
     */
    outputS3Region?: string | null;
    /**
     * The project ID.
     */
    projectId?: string | null;
    /**
     * Custom azure deployment name.
     */
    azureOpenAiDeploymentName?: string | null;
    /**
     * Custom azure endpoint.
     */
    azureOpenAiEndpoint?: string | null;
    /**
     * Custom azure API version.
     */
    azureOpenAiApiVersion?: string | null;
    /**
     * Custom azure API key.
     */
    azureOpenAiKey?: string | null;
    /**
     * Whether to use auto mode.
     */
    autoMode?: boolean;
    /**
     * Whether to trigger on table in page.
     */
    autoModeTriggerOnTableInPage?: boolean;
    /**
     * Whether to trigger on image in page.
     */
    autoModeTriggerOnImageInPage?: boolean;
    /**
     * The regexp to trigger on.
     */
    autoModeTriggerOnRegexpInPage?: string | null;
    /**
     * The text to trigger on.
     */
    autoModeTriggerOnTextInPage?: string | null;
    /**
     * The auto mode configuration JSON. This is a JSON string that contains the configuration for the auto mode.
     */
    autoModeConfigurationJSON?: string | null;
    /**
     * Whether to use structured output.
     */
    structuredOutput?: boolean;
    /**
     * The structured output JSON schema.
     */
    structuredOutputJSONSchema?: string | null;
    /**
     * The structured output JSON schema name.
     */
    structuredOutputJSONSchemaName?: string | null;
    /**
     * The maximum number of pages to parse.
     */
    maxPages?: number | null;
    /**
     * Extract charts from the document.
     */
    extractCharts?: boolean;
    /**
     * A natural language instruction on how to format the result. Override LlamaParse default instruction.
     */
    formattingInstruction?: string | null;
    /**
     * A natural language instruction on how to format the result that complement LlamaParse default instruction.
     */
    complementalFormattingInstruction?: string | null;
    /**
     * A natural language instruction on how to transform the content of the result (not the format).
     */
    contentGuidelineInstruction?: string | null;
    /**
     * Manually set a timeout in second for a job. Minimum is 120
     */
    jobTimeoutInSeconds?: number | null;
    /**
     * Manually set additional time per page for timeout in second for a job.
     */
    jobTimeoutExtraTimePerPageInSeconds?: number | null;
    /**
     * If true, the job will fail when we are not able to extract an image from a document.
     */
    strictModeImageExtraction?: boolean;
    /**
     * If true, the job will fail when we are not able to OCR an image from a document.
     */
    strictModeImageOCR?: boolean;
    /**
     * If true, the job will fail when we are not able to transform a page to Markdown in a document.
     */
    strictModeReconstruction?: boolean;
    /**
     * If true, the job will fail when we are not able to extract a glyph from the document due to buggy font.
     */
    strictModeBuggyFont?: boolean;
    /**
     * If true, the job will ignore document element for layout detection, and instead just rely on a visual model, only apply to layout detection.
     */
    ignoreDocumentElementsForLayoutDetection?: boolean;
    /**
     * If true, the job will output tables as HTML in the markdown output, useful for merged cells.
     */
    outputTablesAsHTML?: boolean;
    /**
     * The parsing mode.
     */
    parseMode?: string | null;
    /**
     * The system prompt.
     */
    systemPrompt?: string | null;
    /**
     * The append to system prompt.
     */
    systemPromptAppend?: string | null;
    /**
     * The user prompt.
     */
    userPrompt?: string | null;
};
/**
 * All settings for the extraction agent. Only the settings in ExtractConfig
 * are exposed to the user.
 */
type LlamaExtractSettings = {
    /**
     * The maximum file size (in bytes) allowed for the document.
     */
    max_file_size?: number;
    /**
     * The maximum file size (in bytes) allowed for the document.
     */
    max_file_size_ui?: number;
    /**
     * The maximum number of pages allowed for the document.
     */
    max_pages?: number;
    /**
     * The mode to use for chunking the document.
     */
    chunk_mode?: ChunkMode;
    /**
     * The maximum size of the chunks (in tokens) to use for chunking the document.
     */
    max_chunk_size?: number;
    /**
     * The configuration for the extraction agent.
     */
    extraction_agent_config?: {
        [key: string]: StructParseConf;
    };
    use_multimodal_extraction?: boolean;
    /**
     * LlamaParse related settings.
     */
    llama_parse_params?: LlamaParseParameters;
};
/**
 * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
 */
type LlamaParseParameters = {
    languages?: Array<ParserLanguages>;
    parsing_instruction?: string | null;
    disable_ocr?: boolean | null;
    annotate_links?: boolean | null;
    adaptive_long_table?: boolean | null;
    compact_markdown_table?: boolean | null;
    disable_reconstruction?: boolean | null;
    disable_image_extraction?: boolean | null;
    invalidate_cache?: boolean | null;
    output_pdf_of_document?: boolean | null;
    do_not_cache?: boolean | null;
    fast_mode?: boolean | null;
    skip_diagonal_text?: boolean | null;
    preserve_layout_alignment_across_pages?: boolean | null;
    gpt4o_mode?: boolean | null;
    gpt4o_api_key?: string | null;
    do_not_unroll_columns?: boolean | null;
    extract_layout?: boolean | null;
    html_make_all_elements_visible?: boolean | null;
    html_remove_navigation_elements?: boolean | null;
    html_remove_fixed_elements?: boolean | null;
    guess_xlsx_sheet_name?: boolean | null;
    page_separator?: string | null;
    bounding_box?: string | null;
    bbox_top?: number | null;
    bbox_right?: number | null;
    bbox_bottom?: number | null;
    bbox_left?: number | null;
    target_pages?: string | null;
    use_vendor_multimodal_model?: boolean | null;
    vendor_multimodal_model_name?: string | null;
    model?: string | null;
    vendor_multimodal_api_key?: string | null;
    page_prefix?: string | null;
    page_suffix?: string | null;
    webhook_url?: string | null;
    preset?: string | null;
    take_screenshot?: boolean | null;
    is_formatting_instruction?: boolean | null;
    premium_mode?: boolean | null;
    continuous_mode?: boolean | null;
    input_s3_path?: string | null;
    input_s3_region?: string | null;
    output_s3_path_prefix?: string | null;
    output_s3_region?: string | null;
    project_id?: string | null;
    azure_openai_deployment_name?: string | null;
    azure_openai_endpoint?: string | null;
    azure_openai_api_version?: string | null;
    azure_openai_key?: string | null;
    input_url?: string | null;
    http_proxy?: string | null;
    auto_mode?: boolean | null;
    auto_mode_trigger_on_regexp_in_page?: string | null;
    auto_mode_trigger_on_text_in_page?: string | null;
    auto_mode_trigger_on_table_in_page?: boolean | null;
    auto_mode_trigger_on_image_in_page?: boolean | null;
    auto_mode_configuration_json?: string | null;
    structured_output?: boolean | null;
    structured_output_json_schema?: string | null;
    structured_output_json_schema_name?: string | null;
    max_pages?: number | null;
    max_pages_enforced?: number | null;
    extract_charts?: boolean | null;
    formatting_instruction?: string | null;
    complemental_formatting_instruction?: string | null;
    content_guideline_instruction?: string | null;
    spreadsheet_extract_sub_tables?: boolean | null;
    job_timeout_in_seconds?: number | null;
    job_timeout_extra_time_per_page_in_seconds?: number | null;
    strict_mode_image_extraction?: boolean | null;
    strict_mode_image_ocr?: boolean | null;
    strict_mode_reconstruction?: boolean | null;
    strict_mode_buggy_font?: boolean | null;
    save_images?: boolean | null;
    ignore_document_elements_for_layout_detection?: boolean | null;
    output_tables_as_HTML?: boolean | null;
    internal_is_screenshot_job?: boolean | null;
    parse_mode?: ParsingMode | null;
    system_prompt?: string | null;
    system_prompt_append?: string | null;
    user_prompt?: string | null;
    page_error_tolerance?: number | null;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string | null;
    replace_failed_page_with_error_message_suffix?: string | null;
    markdown_table_multiline_header_separator?: string | null;
};
type LlamaParseSupportedFileExtensions = ".pdf" | ".doc" | ".docx" | ".docm" | ".dot" | ".dotx" | ".dotm" | ".rtf" | ".wps" | ".wpd" | ".sxw" | ".stw" | ".sxg" | ".pages" | ".mw" | ".mcw" | ".uot" | ".uof" | ".uos" | ".uop" | ".ppt" | ".pptx" | ".pot" | ".pptm" | ".potx" | ".potm" | ".key" | ".odp" | ".odg" | ".otp" | ".fopd" | ".sxi" | ".sti" | ".epub" | ".jpg" | ".jpeg" | ".png" | ".gif" | ".bmp" | ".svg" | ".tiff" | ".webp" | ".html" | ".htm" | ".xls" | ".xlsx" | ".xlsm" | ".xlsb" | ".xlw" | ".csv" | ".dif" | ".sylk" | ".slk" | ".prn" | ".numbers" | ".et" | ".ods" | ".fods" | ".uos1" | ".uos2" | ".dbf" | ".wk1" | ".wk2" | ".wk3" | ".wk4" | ".wks" | ".wq1" | ".wq2" | ".wb1" | ".wb2" | ".wb3" | ".qpw" | ".xlr" | ".eth" | ".tsv";
declare const LlamaParseSupportedFileExtensions: {
    readonly ".PDF": ".pdf";
    readonly ".DOC": ".doc";
    readonly ".DOCX": ".docx";
    readonly ".DOCM": ".docm";
    readonly ".DOT": ".dot";
    readonly ".DOTX": ".dotx";
    readonly ".DOTM": ".dotm";
    readonly ".RTF": ".rtf";
    readonly ".WPS": ".wps";
    readonly ".WPD": ".wpd";
    readonly ".SXW": ".sxw";
    readonly ".STW": ".stw";
    readonly ".SXG": ".sxg";
    readonly ".PAGES": ".pages";
    readonly ".MW": ".mw";
    readonly ".MCW": ".mcw";
    readonly ".UOT": ".uot";
    readonly ".UOF": ".uof";
    readonly ".UOS": ".uos";
    readonly ".UOP": ".uop";
    readonly ".PPT": ".ppt";
    readonly ".PPTX": ".pptx";
    readonly ".POT": ".pot";
    readonly ".PPTM": ".pptm";
    readonly ".POTX": ".potx";
    readonly ".POTM": ".potm";
    readonly ".KEY": ".key";
    readonly ".ODP": ".odp";
    readonly ".ODG": ".odg";
    readonly ".OTP": ".otp";
    readonly ".FOPD": ".fopd";
    readonly ".SXI": ".sxi";
    readonly ".STI": ".sti";
    readonly ".EPUB": ".epub";
    readonly ".JPG": ".jpg";
    readonly ".JPEG": ".jpeg";
    readonly ".PNG": ".png";
    readonly ".GIF": ".gif";
    readonly ".BMP": ".bmp";
    readonly ".SVG": ".svg";
    readonly ".TIFF": ".tiff";
    readonly ".WEBP": ".webp";
    readonly ".HTML": ".html";
    readonly ".HTM": ".htm";
    readonly ".XLS": ".xls";
    readonly ".XLSX": ".xlsx";
    readonly ".XLSM": ".xlsm";
    readonly ".XLSB": ".xlsb";
    readonly ".XLW": ".xlw";
    readonly ".CSV": ".csv";
    readonly ".DIF": ".dif";
    readonly ".SYLK": ".sylk";
    readonly ".SLK": ".slk";
    readonly ".PRN": ".prn";
    readonly ".NUMBERS": ".numbers";
    readonly ".ET": ".et";
    readonly ".ODS": ".ods";
    readonly ".FODS": ".fods";
    readonly ".UOS1": ".uos1";
    readonly ".UOS2": ".uos2";
    readonly ".DBF": ".dbf";
    readonly ".WK1": ".wk1";
    readonly ".WK2": ".wk2";
    readonly ".WK3": ".wk3";
    readonly ".WK4": ".wk4";
    readonly ".WKS": ".wks";
    readonly ".WQ1": ".wq1";
    readonly ".WQ2": ".wq2";
    readonly ".WB1": ".wb1";
    readonly ".WB2": ".wb2";
    readonly ".WB3": ".wb3";
    readonly ".QPW": ".qpw";
    readonly ".XLR": ".xlr";
    readonly ".ETH": ".eth";
    readonly ".TSV": ".tsv";
};
/**
 * Schema for the parameters of a load files job.
 */
type LoadFilesJobConfig = {
    type?: "load_files";
    /**
     * The names of the files this execution should run against.
     */
    file_ids?: Array<string> | null;
};
/**
 * Status of managed ingestion with partial Updates.
 */
type ManagedIngestionStatus = "NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Status of managed ingestion with partial Updates.
 */
declare const ManagedIngestionStatus: {
    readonly NOT_STARTED: "NOT_STARTED";
    readonly IN_PROGRESS: "IN_PROGRESS";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};
type ManagedIngestionStatusResponse = {
    /**
     * ID of the latest job.
     */
    job_id?: string | null;
    /**
     * Date of the deployment.
     */
    deployment_date?: string | null;
    /**
     * Status of the ingestion.
     */
    status: ManagedIngestionStatus;
    /**
     * List of errors that occurred during ingestion.
     */
    error?: Array<IngestionErrorResponse> | null;
    /**
     * When the status is effective
     */
    effective_at?: string | null;
};
type MessageAnnotation = {
    type: string;
    data: string;
    class_name?: string;
};
/**
 * Message role.
 */
type MessageRole = "system" | "developer" | "user" | "assistant" | "function" | "tool" | "chatbot" | "model";
/**
 * Message role.
 */
declare const MessageRole: {
    readonly SYSTEM: "system";
    readonly DEVELOPER: "developer";
    readonly USER: "user";
    readonly ASSISTANT: "assistant";
    readonly FUNCTION: "function";
    readonly TOOL: "tool";
    readonly CHATBOT: "chatbot";
    readonly MODEL: "model";
};
/**
 * Comprehensive metadata filter for vector stores to support more operators.
 *
 * Value uses Strict* types, as int, float and str are compatible types and were all
 * converted to string before.
 *
 * See: https://docs.pydantic.dev/latest/usage/types/#strict-types
 */
type MetadataFilter = {
    key: string;
    value: number | number | string | Array<string> | Array<number> | Array<number> | null;
    operator?: FilterOperator;
};
/**
 * Metadata filters for vector stores.
 */
type MetadataFilters = {
    filters: Array<MetadataFilter | MetadataFilters>;
    condition?: FilterCondition | null;
};
type MetronomeDashboardResponse = {
    url: string;
};
type MetronomeDashboardType = "invoices" | "usage";
declare const MetronomeDashboardType: {
    readonly INVOICES: "invoices";
    readonly USAGE: "usage";
};
/**
 * Node relationships used in `BaseNode` class.
 *
 * Attributes:
 * SOURCE: The node is the source document.
 * PREVIOUS: The node is the previous node in the document.
 * NEXT: The node is the next node in the document.
 * PARENT: The node is the parent node in the document.
 * CHILD: The node is a child node in the document.
 */
type NodeRelationship = "1" | "2" | "3" | "4" | "5";
/**
 * Node relationships used in `BaseNode` class.
 *
 * Attributes:
 * SOURCE: The node is the source document.
 * PREVIOUS: The node is the previous node in the document.
 * NEXT: The node is the next node in the document.
 * PARENT: The node is the parent node in the document.
 * CHILD: The node is a child node in the document.
 */
declare const NodeRelationship: {
    readonly 1: "1";
    readonly 2: "2";
    readonly 3: "3";
    readonly 4: "4";
    readonly 5: "5";
};
type NoneChunkingConfig = {
    mode?: "none";
};
type NoneSegmentationConfig = {
    mode?: "none";
};
type ObjectType = "1" | "2" | "3" | "4" | "5";
declare const ObjectType: {
    readonly 1: "1";
    readonly 2: "2";
    readonly 3: "3";
    readonly 4: "4";
    readonly 5: "5";
};
type OpenAiEmbedding = {
    /**
     * The name of the OpenAI embedding model.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * Additional kwargs for the OpenAI API.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The OpenAI API key.
     */
    api_key?: string | null;
    /**
     * The base URL for OpenAI API.
     */
    api_base?: string | null;
    /**
     * The version for OpenAI API.
     */
    api_version?: string | null;
    /**
     * Maximum number of retries.
     */
    max_retries?: number;
    /**
     * Timeout for each request.
     */
    timeout?: number;
    /**
     * The default headers for API requests.
     */
    default_headers?: {
        [key: string]: string;
    } | null;
    /**
     * Reuse the OpenAI client between requests. When doing anything with large volumes of async API calls, setting this to false can improve stability.
     */
    reuse_client?: boolean;
    /**
     * The number of dimensions on the output embedding vectors. Works only with v3 embedding models.
     */
    dimensions?: number | null;
    class_name?: string;
};
type OpenAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "OPENAI_EMBEDDING";
    /**
     * Configuration for the OpenAI embedding model.
     */
    component?: OpenAiEmbedding;
};
/**
 * Schema for an organization.
 */
type Organization = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the organization.
     */
    name: string;
    /**
     * The Stripe customer ID for the organization.
     */
    stripe_customer_id?: string | null;
    /**
     * Whether the organization is a Parse Premium customer.
     */
    parse_plan_level?: ParsePlanLevel;
};
/**
 * Schema for creating an organization.
 */
type OrganizationCreate = {
    /**
     * A name for the organization.
     */
    name: string;
};
/**
 * Schema for updating an organization.
 */
type OrganizationUpdate = {
    /**
     * A name for the organization.
     */
    name: string;
};
/**
 * Distance methods for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
type PgVectorDistanceMethod = "l2" | "ip" | "cosine" | "l1" | "hamming" | "jaccard";
/**
 * Distance methods for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
declare const PgVectorDistanceMethod: {
    readonly L2: "l2";
    readonly IP: "ip";
    readonly COSINE: "cosine";
    readonly L1: "l1";
    readonly HAMMING: "hamming";
    readonly JACCARD: "jaccard";
};
/**
 * HNSW settings for PGVector.
 */
type PgVectorHnswSettings = {
    /**
     * The number of edges to use during the construction phase.
     */
    ef_construction?: number;
    /**
     * The number of edges to use during the search phase.
     */
    ef_search?: number;
    /**
     * The number of bi-directional links created for each new element.
     */
    m?: number;
    /**
     * The type of vector to use.
     */
    vector_type?: PgVectorVectorType;
    /**
     * The distance method to use.
     */
    distance_method?: PgVectorDistanceMethod;
};
/**
 * Vector storage formats for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
type PgVectorVectorType = "vector" | "half_vec" | "bit" | "sparse_vec";
/**
 * Vector storage formats for PGVector.
 * Docs:
 * https://github.com/pgvector/pgvector?tab=readme-ov-file#query-options
 */
declare const PgVectorVectorType: {
    readonly VECTOR: "vector";
    readonly HALF_VEC: "half_vec";
    readonly BIT: "bit";
    readonly SPARSE_VEC: "sparse_vec";
};
type PageFigureMetadata = {
    /**
     * The name of the figure
     */
    figure_name: string;
    /**
     * The ID of the file that the figure was taken from
     */
    file_id: string;
    /**
     * The index of the page for which the figure is taken (0-indexed)
     */
    page_index: number;
    /**
     * The size of the figure in bytes
     */
    figure_size: number;
    /**
     * Whether the figure is likely to be noise
     */
    is_likely_noise?: boolean;
    /**
     * The confidence of the figure
     */
    confidence: number;
};
type PageScreenshotMetadata = {
    /**
     * The index of the page for which the screenshot is taken (0-indexed)
     */
    page_index: number;
    /**
     * The ID of the file that the page screenshot was taken from
     */
    file_id: string;
    /**
     * The size of the image in bytes
     */
    image_size: number;
    /**
     * Metadata for the screenshot
     */
    metadata?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Page screenshot metadata with score
 */
type PageScreenshotNodeWithScore = {
    node: PageScreenshotMetadata;
    /**
     * The score of the screenshot node
     */
    score: number;
    class_name?: string;
};
type PageSegmentationConfig = {
    mode?: "page";
    page_separator?: string;
};
/**
 * Schema for paginated extraction runs response.
 */
type PaginatedExtractRunsResponse = {
    /**
     * The list of extraction runs
     */
    items: Array<ExtractRun>;
    /**
     * The total number of extraction runs
     */
    total: number;
    /**
     * The number of extraction runs skipped
     */
    skip: number;
    /**
     * The maximum number of extraction runs returned
     */
    limit: number;
};
type PaginatedJobsHistoryWithMetrics = {
    jobs: Array<JobRecordWithUsageMetrics>;
    total_count: number;
    limit: number;
    offset: number;
};
type PaginatedListCloudDocumentsResponse = {
    /**
     * The documents to list
     */
    documents: Array<CloudDocument>;
    /**
     * The limit of the documents
     */
    limit: number;
    /**
     * The offset of the documents
     */
    offset: number;
    /**
     * The total number of documents
     */
    total_count: number;
};
type PaginatedListPipelineFilesResponse = {
    /**
     * The files to list
     */
    files: Array<PipelineFile>;
    /**
     * The limit of the files
     */
    limit: number;
    /**
     * The offset of the files
     */
    offset: number;
    /**
     * The total number of files
     */
    total_count: number;
};
type PaginatedReportResponse = {
    report_responses: Array<ReportResponse>;
    limit: number;
    offset: number;
    total_count: number;
};
/**
 * Configuration for llamaparse job
 */
type ParseJobConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    languages?: Array<ParserLanguages>;
    parsing_instruction?: string | null;
    disable_ocr?: boolean | null;
    annotate_links?: boolean | null;
    adaptive_long_table?: boolean | null;
    compact_markdown_table?: boolean | null;
    disable_reconstruction?: boolean | null;
    disable_image_extraction?: boolean | null;
    invalidate_cache?: boolean | null;
    output_pdf_of_document?: boolean | null;
    do_not_cache?: boolean | null;
    fast_mode?: boolean | null;
    skip_diagonal_text?: boolean | null;
    preserve_layout_alignment_across_pages?: boolean | null;
    gpt4o_mode?: boolean | null;
    gpt4o_api_key?: string | null;
    do_not_unroll_columns?: boolean | null;
    extract_layout?: boolean | null;
    html_make_all_elements_visible?: boolean | null;
    html_remove_navigation_elements?: boolean | null;
    html_remove_fixed_elements?: boolean | null;
    guess_xlsx_sheet_name?: boolean | null;
    page_separator?: string | null;
    bounding_box?: string | null;
    bbox_top?: number | null;
    bbox_right?: number | null;
    bbox_bottom?: number | null;
    bbox_left?: number | null;
    target_pages?: string | null;
    use_vendor_multimodal_model?: boolean | null;
    vendor_multimodal_model_name?: string | null;
    model?: string | null;
    vendor_multimodal_api_key?: string | null;
    page_prefix?: string | null;
    page_suffix?: string | null;
    webhook_url?: string | null;
    preset?: string | null;
    take_screenshot?: boolean | null;
    is_formatting_instruction?: boolean | null;
    premium_mode?: boolean | null;
    continuous_mode?: boolean | null;
    /**
     * If specified, llamaParse will take the specified file. should be a valid s3:// url
     */
    input_s3_path?: string | null;
    /**
     * The region for the input S3 bucket.
     */
    input_s3_region?: string | null;
    /**
     * If specified, llamaParse will save the output to the specified path. All output file will use this 'prefix' should be a valid s3:// url
     */
    output_s3_path_prefix?: string | null;
    /**
     * The region for the output S3 bucket.
     */
    output_s3_region?: string | null;
    project_id?: string | null;
    azure_openai_deployment_name?: string | null;
    azure_openai_endpoint?: string | null;
    azure_openai_api_version?: string | null;
    azure_openai_key?: string | null;
    input_url?: string | null;
    http_proxy?: string | null;
    auto_mode?: boolean | null;
    auto_mode_trigger_on_regexp_in_page?: string | null;
    auto_mode_trigger_on_text_in_page?: string | null;
    auto_mode_trigger_on_table_in_page?: boolean | null;
    auto_mode_trigger_on_image_in_page?: boolean | null;
    auto_mode_configuration_json?: string | null;
    structured_output?: boolean | null;
    structured_output_json_schema?: string | null;
    structured_output_json_schema_name?: string | null;
    max_pages?: number | null;
    max_pages_enforced?: number | null;
    extract_charts?: boolean | null;
    formatting_instruction?: string | null;
    complemental_formatting_instruction?: string | null;
    content_guideline_instruction?: string | null;
    spreadsheet_extract_sub_tables?: boolean | null;
    job_timeout_in_seconds?: number | null;
    job_timeout_extra_time_per_page_in_seconds?: number | null;
    strict_mode_image_extraction?: boolean | null;
    strict_mode_image_ocr?: boolean | null;
    strict_mode_reconstruction?: boolean | null;
    strict_mode_buggy_font?: boolean | null;
    save_images?: boolean | null;
    ignore_document_elements_for_layout_detection?: boolean | null;
    output_tables_as_HTML?: boolean | null;
    internal_is_screenshot_job?: boolean | null;
    parse_mode?: ParsingMode | null;
    system_prompt?: string | null;
    system_prompt_append?: string | null;
    user_prompt?: string | null;
    page_error_tolerance?: number | null;
    replace_failed_page_mode?: FailPageMode | null;
    replace_failed_page_with_error_message_prefix?: string | null;
    replace_failed_page_with_error_message_suffix?: string | null;
    markdown_table_multiline_header_separator?: string | null;
    type?: "parse";
    /**
     * The file name.
     */
    file_name: string;
    /**
     * The original file name.
     */
    original_file_name: string;
    /**
     * The file key.
     */
    file_key: string;
    /**
     * The language.
     */
    lang: string;
    /**
     * The output bucket.
     */
    outputBucket?: string | null;
    /**
     * The file ID.
     */
    file_id?: string | null;
    /**
     * The pipeline ID.
     */
    pipeline_id?: string | null;
};
/**
 * Enum for the Parse plan level.
 */
type ParsePlanLevel = "DEFAULT" | "PREMIUM";
/**
 * Enum for the Parse plan level.
 */
declare const ParsePlanLevel: {
    readonly DEFAULT: "DEFAULT";
    readonly PREMIUM: "PREMIUM";
};
/**
 * Enum for representing the languages supported by the parser
 */
type ParserLanguages = "af" | "az" | "bs" | "cs" | "cy" | "da" | "de" | "en" | "es" | "et" | "fr" | "ga" | "hr" | "hu" | "id" | "is" | "it" | "ku" | "la" | "lt" | "lv" | "mi" | "ms" | "mt" | "nl" | "no" | "oc" | "pi" | "pl" | "pt" | "ro" | "rs_latin" | "sk" | "sl" | "sq" | "sv" | "sw" | "tl" | "tr" | "uz" | "vi" | "ar" | "fa" | "ug" | "ur" | "bn" | "as" | "mni" | "ru" | "rs_cyrillic" | "be" | "bg" | "uk" | "mn" | "abq" | "ady" | "kbd" | "ava" | "dar" | "inh" | "che" | "lbe" | "lez" | "tab" | "tjk" | "hi" | "mr" | "ne" | "bh" | "mai" | "ang" | "bho" | "mah" | "sck" | "new" | "gom" | "sa" | "bgc" | "th" | "ch_sim" | "ch_tra" | "ja" | "ko" | "ta" | "te" | "kn";
/**
 * Enum for representing the languages supported by the parser
 */
declare const ParserLanguages: {
    readonly AF: "af";
    readonly AZ: "az";
    readonly BS: "bs";
    readonly CS: "cs";
    readonly CY: "cy";
    readonly DA: "da";
    readonly DE: "de";
    readonly EN: "en";
    readonly ES: "es";
    readonly ET: "et";
    readonly FR: "fr";
    readonly GA: "ga";
    readonly HR: "hr";
    readonly HU: "hu";
    readonly ID: "id";
    readonly IS: "is";
    readonly IT: "it";
    readonly KU: "ku";
    readonly LA: "la";
    readonly LT: "lt";
    readonly LV: "lv";
    readonly MI: "mi";
    readonly MS: "ms";
    readonly MT: "mt";
    readonly NL: "nl";
    readonly NO: "no";
    readonly OC: "oc";
    readonly PI: "pi";
    readonly PL: "pl";
    readonly PT: "pt";
    readonly RO: "ro";
    readonly RS_LATIN: "rs_latin";
    readonly SK: "sk";
    readonly SL: "sl";
    readonly SQ: "sq";
    readonly SV: "sv";
    readonly SW: "sw";
    readonly TL: "tl";
    readonly TR: "tr";
    readonly UZ: "uz";
    readonly VI: "vi";
    readonly AR: "ar";
    readonly FA: "fa";
    readonly UG: "ug";
    readonly UR: "ur";
    readonly BN: "bn";
    readonly AS: "as";
    readonly MNI: "mni";
    readonly RU: "ru";
    readonly RS_CYRILLIC: "rs_cyrillic";
    readonly BE: "be";
    readonly BG: "bg";
    readonly UK: "uk";
    readonly MN: "mn";
    readonly ABQ: "abq";
    readonly ADY: "ady";
    readonly KBD: "kbd";
    readonly AVA: "ava";
    readonly DAR: "dar";
    readonly INH: "inh";
    readonly CHE: "che";
    readonly LBE: "lbe";
    readonly LEZ: "lez";
    readonly TAB: "tab";
    readonly TJK: "tjk";
    readonly HI: "hi";
    readonly MR: "mr";
    readonly NE: "ne";
    readonly BH: "bh";
    readonly MAI: "mai";
    readonly ANG: "ang";
    readonly BHO: "bho";
    readonly MAH: "mah";
    readonly SCK: "sck";
    readonly NEW: "new";
    readonly GOM: "gom";
    readonly SA: "sa";
    readonly BGC: "bgc";
    readonly TH: "th";
    readonly CH_SIM: "ch_sim";
    readonly CH_TRA: "ch_tra";
    readonly JA: "ja";
    readonly KO: "ko";
    readonly TA: "ta";
    readonly TE: "te";
    readonly KN: "kn";
};
type ParsingHistoryItem = {
    user_id: string;
    day: string;
    job_id: string;
    file_name: string;
    original_file_name: string;
    expired?: boolean;
    pages?: number | null;
    images?: number | null;
    time?: number | null;
};
type ParsingJob = {
    id: string;
    status: StatusEnum;
    error_code?: string | null;
    error_message?: string | null;
};
type ParsingJobJsonResult = {
    /**
     * The json result of the parsing job
     */
    pages: unknown;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobMarkdownResult = {
    /**
     * The markdown result of the parsing job
     */
    markdown: string;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobStructuredResult = {
    /**
     * The json result of the structured parsing job
     */
    structured: unknown;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
type ParsingJobTextResult = {
    /**
     * The text result of the parsing job
     */
    text: string;
    /**
     * Parsing job metadata , including usage
     */
    job_metadata: unknown;
};
/**
 * Enum for representing the mode of parsing to be used
 */
type ParsingMode = "parse_page_without_llm" | "parse_page_with_llm" | "parse_page_with_lvm" | "parse_page_with_agent" | "parse_page_with_layout_agent" | "parse_document_with_llm" | "parse_document_with_lvm" | "parse_document_with_agent";
/**
 * Enum for representing the mode of parsing to be used
 */
declare const ParsingMode: {
    readonly PARSE_PAGE_WITHOUT_LLM: "parse_page_without_llm";
    readonly PARSE_PAGE_WITH_LLM: "parse_page_with_llm";
    readonly PARSE_PAGE_WITH_LVM: "parse_page_with_lvm";
    readonly PARSE_PAGE_WITH_AGENT: "parse_page_with_agent";
    readonly PARSE_PAGE_WITH_LAYOUT_AGENT: "parse_page_with_layout_agent";
    readonly PARSE_DOCUMENT_WITH_LLM: "parse_document_with_llm";
    readonly PARSE_DOCUMENT_WITH_LVM: "parse_document_with_lvm";
    readonly PARSE_DOCUMENT_WITH_AGENT: "parse_document_with_agent";
};
/**
 * Enum for dataset partition names.
 */
type PartitionNames = "data_source_id_partition" | "pipeline_id_partition" | "eval_dataset_id_partition" | "file_id_partition" | "pipeline_file_id_partition" | "file_parsing_id_partition" | "extraction_schema_id_partition";
/**
 * Enum for dataset partition names.
 */
declare const PartitionNames: {
    readonly DATA_SOURCE_ID_PARTITION: "data_source_id_partition";
    readonly PIPELINE_ID_PARTITION: "pipeline_id_partition";
    readonly EVAL_DATASET_ID_PARTITION: "eval_dataset_id_partition";
    readonly FILE_ID_PARTITION: "file_id_partition";
    readonly PIPELINE_FILE_ID_PARTITION: "pipeline_file_id_partition";
    readonly FILE_PARSING_ID_PARTITION: "file_parsing_id_partition";
    readonly EXTRACTION_SCHEMA_ID_PARTITION: "extraction_schema_id_partition";
};
/**
 * Schema for a permission.
 */
type Permission = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the permission.
     */
    name: string;
    /**
     * A description for the permission.
     */
    description: string | null;
    /**
     * Whether the permission is granted or not.
     */
    access: boolean;
};
/**
 * Schema for a pipeline.
 */
type PipelineReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    project_id: string;
    /**
     * The ID of the EmbeddingModelConfig this pipeline is using.
     */
    embedding_model_config_id?: string | null;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: PipelineConfigurationHashes | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * The data sink for the pipeline. If None, the pipeline will use the fully managed data sink.
     */
    data_sink?: DataSinkReadable | null;
    /**
     * Status of the pipeline.
     */
    status?: ("CREATED" | "DELETING") | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
};
/**
 * Schema for a pipeline.
 */
type PipelineWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name: string;
    project_id: string;
    /**
     * The ID of the EmbeddingModelConfig this pipeline is using.
     */
    embedding_model_config_id?: string | null;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
    embedding_config: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: PipelineConfigurationHashes | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * The data sink for the pipeline. If None, the pipeline will use the fully managed data sink.
     */
    data_sink?: DataSinkWritable | null;
    /**
     * Status of the pipeline.
     */
    status?: ("CREATED" | "DELETING") | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
};
/**
 * Hashes for the configuration of a pipeline.
 */
type PipelineConfigurationHashes = {
    /**
     * Hash of the embedding config.
     */
    embedding_config_hash?: string | null;
    /**
     * Hash of the llama parse parameters.
     */
    parsing_config_hash?: string | null;
    /**
     * Hash of the transform config.
     */
    transform_config_hash?: string | null;
};
/**
 * Schema for creating a pipeline.
 */
type PipelineCreateReadable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateReadable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    llama_parse_parameters?: LlamaParseParameters;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name: string;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for creating a pipeline.
 */
type PipelineCreateWritable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateWritable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams;
    llama_parse_parameters?: LlamaParseParameters;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name: string;
    /**
     * Type of pipeline. Either PLAYGROUND or MANAGED.
     */
    pipeline_type?: PipelineType;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for a data source in a pipeline.
 */
type PipelineDataSourceReadable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceReadable | CloudAzStorageBlobDataSourceReadable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceReadable | CloudSharepointDataSourceReadable | CloudSlackDataSourceReadable | CloudNotionPageDataSourceReadable | CloudConfluenceDataSourceReadable | CloudJiraDataSourceReadable | CloudBoxDataSourceReadable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: {
        [key: string]: unknown;
    } | null;
    project_id: string;
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The ID of the pipeline.
     */
    pipeline_id: string;
    /**
     * The last time the data source was automatically synced.
     */
    last_synced_at: string;
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
    /**
     * The id of the user who set the sync schedule.
     */
    sync_schedule_set_by?: string | null;
    /**
     * The status of the data source in the pipeline.
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated.
     */
    status_updated_at?: string | null;
};
/**
 * Schema for a data source in a pipeline.
 */
type PipelineDataSourceWritable = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The name of the data source.
     */
    name: string;
    source_type: ConfigurableDataSourceNames;
    /**
     * Custom metadata that will be present on all data loaded from the data source
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Component that implements the data source
     */
    component: {
        [key: string]: unknown;
    } | CloudS3DataSourceWritable | CloudAzStorageBlobDataSourceWritable | CloudGoogleDriveDataSource | CloudOneDriveDataSourceWritable | CloudSharepointDataSourceWritable | CloudSlackDataSourceWritable | CloudNotionPageDataSourceWritable | CloudConfluenceDataSourceWritable | CloudJiraDataSourceWritable | CloudBoxDataSourceWritable;
    /**
     * Version metadata for the data source
     */
    version_metadata?: {
        [key: string]: unknown;
    } | null;
    project_id: string;
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The ID of the pipeline.
     */
    pipeline_id: string;
    /**
     * The last time the data source was automatically synced.
     */
    last_synced_at: string;
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
    /**
     * The id of the user who set the sync schedule.
     */
    sync_schedule_set_by?: string | null;
    /**
     * The status of the data source in the pipeline.
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated.
     */
    status_updated_at?: string | null;
};
/**
 * Schema for creating an association between a data source and a pipeline.
 */
type PipelineDataSourceCreate = {
    /**
     * The ID of the data source.
     */
    data_source_id: string;
    /**
     * The interval at which the data source should be synced. Valid values are: 21600, 43200, 86400
     */
    sync_interval?: number | null;
};
/**
 * Schema for updating an association between a data source and a pipeline.
 */
type PipelineDataSourceUpdate = {
    /**
     * The interval at which the data source should be synced.
     */
    sync_interval?: number | null;
};
type PipelineDeployment = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * Status of the pipeline deployment.
     */
    status: ManagedIngestionStatus;
    /**
     * Time the pipeline deployment started.
     */
    started_at?: string | null;
    /**
     * Time the pipeline deployment finished.
     */
    ended_at?: string | null;
};
/**
 * Schema for a file that is associated with a pipeline.
 */
type PipelineFile = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    name?: string | null;
    /**
     * The ID of the file in the external system
     */
    external_file_id?: string | null;
    /**
     * Size of the file in bytes
     */
    file_size?: number | null;
    /**
     * File type (e.g. pdf, docx, etc.)
     */
    file_type?: string | null;
    /**
     * The ID of the project that the file belongs to
     */
    project_id: string;
    /**
     * The last modified time of the file
     */
    last_modified_at?: string | null;
    /**
     * Resource information for the file
     */
    resource_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Permission information for the file
     */
    permission_info?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The ID of the data source that the file belongs to
     */
    data_source_id?: string | null;
    /**
     * The ID of the file
     */
    file_id?: string | null;
    /**
     * The ID of the pipeline that the file is associated with
     */
    pipeline_id: string;
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * Hashes for the configuration of the pipeline.
     */
    config_hash?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
    /**
     * The number of pages that have been indexed for this file
     */
    indexed_page_count?: number | null;
    /**
     * Status of the pipeline file
     */
    status?: ("NOT_STARTED" | "IN_PROGRESS" | "SUCCESS" | "ERROR" | "CANCELLED") | null;
    /**
     * The last time the status was updated
     */
    status_updated_at?: string | null;
};
/**
 * Schema for creating a file that is associated with a pipeline.
 */
type PipelineFileCreate = {
    /**
     * The ID of the file
     */
    file_id: string;
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
/**
 * Schema for updating a file that is associated with a pipeline.
 */
type PipelineFileUpdate = {
    /**
     * Custom metadata for the file
     */
    custom_metadata?: {
        [key: string]: {
            [key: string]: unknown;
        } | Array<unknown> | string | number | number | boolean | null;
    } | null;
};
/**
 * Schema for the parameters of a load files job.
 */
type PipelineFileUpdateDispatcherConfig = {
    type?: "pipeline_file_update_dispatcher";
    /**
     * The IDs for the files this execution ran against.
     */
    pipeline_file_ids?: Array<string> | null;
    /**
     * Whether to delete the files
     */
    should_delete?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
/**
 * Schema for the parameters of a load files job.
 */
type PipelineFileUpdaterConfig = {
    /**
     * The custom metadata to attach to the documents.
     */
    custom_metadata?: {
        [key: string]: unknown;
    } | null;
    /**
     * The resource info about the file
     */
    resource_info?: {
        [key: string]: unknown;
    } | null;
    type?: "pipeline_file_updater";
    /**
     * Whether to delete the files
     */
    should_delete?: boolean | null;
    /**
     * Whether to parse the files
     */
    should_parse?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
    /**
     * Whether the file is new
     */
    is_new_file?: boolean;
    /**
     * Whether the data source project file has changed
     */
    data_source_project_file_changed?: boolean;
    /**
     * Whether to migrate the pipeline file to the external file id
     */
    should_migrate_pipeline_file_to_external_file_id?: boolean;
};
/**
 * Schema for the parameters of a managed pipeline ingestion job.
 */
type PipelineManagedIngestionJobParams = {
    type?: "pipeline_managed_ingestion";
    /**
     * Whether to delete the data sources from the pipeline
     */
    should_delete?: boolean | null;
    /**
     * The parameters for the delete job.
     */
    delete_info?: DeleteParams | null;
};
type PipelineMetadataConfig = {
    /**
     * List of metadata keys to exclude from embeddings
     */
    excluded_embed_metadata_keys?: Array<string>;
    /**
     * List of metadata keys to exclude from LLM during retrieval
     */
    excluded_llm_metadata_keys?: Array<string>;
};
/**
 * Enum for representing the type of a pipeline
 */
type PipelineType = "PLAYGROUND" | "MANAGED";
/**
 * Enum for representing the type of a pipeline
 */
declare const PipelineType: {
    readonly PLAYGROUND: "PLAYGROUND";
    readonly MANAGED: "MANAGED";
};
/**
 * Schema for updating a pipeline.
 */
type PipelineUpdateReadable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateReadable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams | null;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams | null;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name?: string | null;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
/**
 * Schema for updating a pipeline.
 */
type PipelineUpdateWritable = {
    embedding_config?: (({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig)) | null;
    /**
     * Configuration for the transformation.
     */
    transform_config?: AutoTransformConfig | AdvancedModeTransformConfig | null;
    /**
     * Data sink ID. When provided instead of data_sink, the data sink will be looked up by ID.
     */
    data_sink_id?: string | null;
    /**
     * Embedding model config ID. When provided instead of embedding_config, the embedding model config will be looked up by ID.
     */
    embedding_model_config_id?: string | null;
    /**
     * Data sink. When provided instead of data_sink_id, the data sink will be created.
     */
    data_sink?: DataSinkCreateWritable | null;
    /**
     * Preset retrieval parameters for the pipeline.
     */
    preset_retrieval_parameters?: PresetRetrievalParams | null;
    /**
     * Eval parameters for the pipeline.
     */
    eval_parameters?: EvalExecutionParams | null;
    /**
     * Settings that can be configured for how to use LlamaParse to parse files within a LlamaCloud pipeline.
     */
    llama_parse_parameters?: LlamaParseParameters | null;
    /**
     * Status of the pipeline deployment.
     */
    status?: string | null;
    /**
     * Metadata configuration for the pipeline.
     */
    metadata_config?: PipelineMetadataConfig | null;
    name?: string | null;
    /**
     * The ID of the ManagedPipeline this playground pipeline is linked to.
     */
    managed_pipeline_id?: string | null;
};
type PlanLimits = {
    /**
     * Whether usage is allowed after credit grants are exhausted
     */
    allow_pay_as_you_go: boolean;
    subscription_cost_usd: number;
    max_monthly_invoice_total_usd: number | null;
    /**
     * The amount of USD cents at which a soft alert should be triggered
     */
    spending_soft_alerts_usd_cents?: Array<number> | null;
    max_concurrent_parse_jobs_premium: number | null;
    max_concurrent_parse_jobs_other: number | null;
    max_extraction_agents: number | null;
    max_extraction_runs: number | null;
    max_extraction_jobs: number | null;
    max_pages_per_index: number | null;
    max_files_per_index: number | null;
    max_indexes: number | null;
    max_concurrent_index_jobs: number | null;
    max_data_sources: number | null;
    max_embedding_models: number | null;
    max_data_sinks: number | null;
    max_published_agents: number | null;
    max_report_agent_sessions: number | null;
    max_users: number | null;
    max_organizations: number | null;
    max_projects: number | null;
    mfa_enabled: boolean;
    sso_enabled: boolean;
};
/**
 * A playground session for a user.
 */
type PlaygroundSession = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    pipeline_id: string;
    user_id: string;
    llm_params_id: string;
    /**
     * LLM parameters last used in this session.
     */
    llm_params?: LlmParameters;
    retrieval_params_id: string;
    /**
     * Preset retrieval parameters last used in this session.
     */
    retrieval_params?: PresetRetrievalParams;
    /**
     * Chat message history for this session.
     */
    chat_messages?: Array<AppSchemaChatChatMessage>;
};
/**
 * Enum of possible pooling choices with pooling behaviors.
 */
type Pooling = "cls" | "mean" | "last";
/**
 * Enum of possible pooling choices with pooling behaviors.
 */
declare const Pooling: {
    readonly CLS: "cls";
    readonly MEAN: "mean";
    readonly LAST: "last";
};
type PresetCompositeRetrievalParams = {
    /**
     * The mode of composite retrieval.
     */
    mode?: CompositeRetrievalMode;
    /**
     * (use rerank_config.top_n instead) The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     * @deprecated
     */
    rerank_top_n?: number | null;
    /**
     * The rerank configuration for composite retrieval.
     */
    rerank_config?: ReRankConfig;
};
/**
 * Schema for the search params for an retrieval execution that can be preset for a pipeline.
 */
type PresetRetrievalParams = {
    /**
     * Number of nodes for dense retrieval.
     */
    dense_similarity_top_k?: number | null;
    /**
     * Minimum similarity score wrt query for retrieval
     */
    dense_similarity_cutoff?: number | null;
    /**
     * Number of nodes for sparse retrieval.
     */
    sparse_similarity_top_k?: number | null;
    /**
     * Enable reranking for retrieval
     */
    enable_reranking?: boolean | null;
    /**
     * Number of reranked nodes for returning.
     */
    rerank_top_n?: number | null;
    /**
     * Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.
     */
    alpha?: number | null;
    /**
     * Search filters for retrieval.
     */
    search_filters?: MetadataFilters | null;
    /**
     * Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).
     */
    files_top_k?: number | null;
    /**
     * The retrieval mode for the query.
     */
    retrieval_mode?: RetrievalMode;
    /**
     * Whether to retrieve image nodes.
     */
    retrieve_image_nodes?: boolean;
    class_name?: string;
};
/**
 * Schema for a presigned URL.
 */
type PresignedUrl = {
    /**
     * A presigned URL for IO operations against a private file
     */
    url: string;
    /**
     * The time at which the presigned URL expires
     */
    expires_at: string;
    /**
     * Form fields for a presigned POST request
     */
    form_fields?: {
        [key: string]: string;
    } | null;
};
/**
 * Event for tracking progress of operations in workflows.
 */
type ProgressEvent = {
    timestamp?: string;
    /**
     * The ID of the event
     */
    id?: string;
    /**
     * The ID of the group this event belongs to
     */
    group_id?: string;
    type?: "progress";
    variant: ReportEventType;
    /**
     * The message to display to the user
     */
    msg: string;
    /**
     * Progress value between 0-1 if available
     */
    progress?: number | null;
    /**
     * Current status of the operation
     */
    status?: "pending" | "in_progress" | "completed" | "error";
    /**
     * Any extra details to display to the user
     */
    extra_detail?: {
        [key: string]: unknown;
    } | null;
};
/**
 * Schema for a project.
 */
type Project = {
    name: string;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    ad_hoc_eval_dataset_id?: string | null;
    /**
     * The Organization ID the project is under.
     */
    organization_id: string;
    /**
     * Whether this project is the default project for the user.
     */
    is_default?: boolean;
};
/**
 * Schema for creating a project.
 */
type ProjectCreate = {
    name: string;
};
/**
 * Schema for updating a project.
 */
type ProjectUpdate = {
    name: string;
};
type PromptConf = {
    /**
     * The system prompt to use for the extraction.
     */
    system_prompt?: string;
    /**
     * The prompt to use for the extraction.
     */
    extraction_prompt?: string;
    /**
     * The prompt to use for error handling.
     */
    error_handling_prompt?: string;
    /**
     * The prompt to use for reasoning.
     */
    reasoning_prompt?: string;
    /**
     * The prompt to use for citing sources.
     */
    cite_sources_prompt?: {
        [key: string]: string;
    };
    /**
     * The prompt to use for scratchpad.
     */
    scratchpad_prompt?: string;
};
type ReRankConfig = {
    /**
     * The number of nodes to retrieve after reranking over retrieved nodes from all retrieval tools.
     */
    top_n?: number;
    /**
     * The type of reranker to use.
     */
    type?: ReRankerType;
};
/**
 * Enum for the reranker type.
 */
type ReRankerType = "system_default" | "llm" | "cohere" | "bedrock" | "score" | "disabled";
/**
 * Enum for the reranker type.
 */
declare const ReRankerType: {
    readonly SYSTEM_DEFAULT: "system_default";
    readonly LLM: "llm";
    readonly COHERE: "cohere";
    readonly BEDROCK: "bedrock";
    readonly SCORE: "score";
    readonly DISABLED: "disabled";
};
type RecurringCreditGrant = {
    name: string;
    credit_amount: number;
    credit_type: CreditType;
    /**
     * The ID of the product in Metronome used to represent the credit grant
     */
    product_id: string;
    priority: number;
    /**
     * The fraction of the credit that will roll over to the next period, between 0 and 1
     */
    rollover_fraction: number;
    /**
     * How many billing periods the credit grant will last for
     */
    periods_duration?: number;
};
type RelatedNodeInfo = {
    node_id: string;
    node_type?: ObjectType | string | null;
    metadata?: {
        [key: string]: unknown;
    };
    hash?: string | null;
    class_name?: string;
};
type Report = {
    /**
     * The id of the report
     */
    id: string;
    /**
     * The blocks of the report
     */
    blocks?: Array<ReportBlock>;
};
type ReportBlock = {
    /**
     * The index of the block
     */
    idx: number;
    /**
     * The content of the block
     */
    template: string;
    /**
     * Whether the block requires human review
     */
    requires_human_review?: boolean;
    /**
     * The sources for the block
     */
    sources?: Array<TextNodeWithScore>;
};
type ReportBlockDependency = "none" | "all" | "previous" | "next";
declare const ReportBlockDependency: {
    readonly NONE: "none";
    readonly ALL: "all";
    readonly PREVIOUS: "previous";
    readonly NEXT: "next";
};
type ReportCreateResponse = {
    /**
     * The id of the report
     */
    id: string;
};
/**
 * From backend schema
 */
type ReportEventItem = {
    /**
     * The id of the event
     */
    id: string;
    /**
     * The id of the report
     */
    report_id: string;
    /**
     * The type of the event
     */
    event_type: string;
    /**
     * The data for the event
     */
    event_data: ProgressEvent | ReportUpdateEvent | ReportStateEvent;
    /**
     * The timestamp for the event
     */
    timestamp: string;
};
type ReportEventType = "load_template" | "extract_plan" | "summarize" | "file_processing" | "generate_block" | "editing";
declare const ReportEventType: {
    readonly LOAD_TEMPLATE: "load_template";
    readonly EXTRACT_PLAN: "extract_plan";
    readonly SUMMARIZE: "summarize";
    readonly FILE_PROCESSING: "file_processing";
    readonly GENERATE_BLOCK: "generate_block";
    readonly EDITING: "editing";
};
/**
 * Used to update the metadata of a report.
 */
type ReportMetadata = {
    /**
     * The id of the report
     */
    id: string;
    /**
     * The name of the report
     */
    name: string;
    /**
     * The metadata for the report
     */
    report_metadata: {
        [key: string]: unknown;
    };
    /**
     * The state of the report
     */
    state: ReportState;
    input_files?: Array<string> | null;
    template_file?: string | null;
    template_text?: string | null;
    template_instructions?: string | null;
};
type ReportNameUpdate = {
    /**
     * The name of the report
     */
    name: string;
};
type ReportPlan = {
    /**
     * The id of the report plan
     */
    id?: string;
    /**
     * The blocks of the report
     */
    blocks?: Array<ReportPlanBlock>;
    /**
     * The timestamp of when the plan was generated
     */
    generated_at?: string;
};
type ReportPlanBlock = {
    block: ReportBlock;
    /**
     * The queries for the block
     */
    queries?: Array<ReportQuery>;
    /**
     * The dependency for the block
     */
    dependency: ReportBlockDependency;
};
type ReportQuery = {
    /**
     * The field in the template that needs to be filled in
     */
    field: string;
    /**
     * The prompt for filling in the field
     */
    prompt: string;
    /**
     * Any additional context for the query
     */
    context: string;
};
type ReportResponse = {
    name: string;
    report_id: string;
    report: Report | null;
    plan: ReportPlan | null;
    version: number;
    last_updated: string;
    status: ReportState;
    total_versions: number;
};
type ReportState = "pending" | "planning" | "waiting_approval" | "generating" | "completed" | "error";
declare const ReportState: {
    readonly PENDING: "pending";
    readonly PLANNING: "planning";
    readonly WAITING_APPROVAL: "waiting_approval";
    readonly GENERATING: "generating";
    readonly COMPLETED: "completed";
    readonly ERROR: "error";
};
/**
 * Event for notifying when an report's state changes.
 */
type ReportStateEvent = {
    timestamp?: string;
    type: "report_state_update";
    /**
     * The message to display to the user
     */
    msg: string;
    /**
     * The new state of the report
     */
    status: ReportState;
};
/**
 * Event for updating the state of an report.
 */
type ReportUpdateEvent = {
    timestamp?: string;
    type?: "report_block_update";
    /**
     * The message to display to the user
     */
    msg?: string;
    /**
     * The block to update
     */
    block: ReportBlock;
};
type ReportVersionPatch = {
    /**
     * The content of the report version
     */
    content: Report;
};
type RetrievalMode = "chunks" | "files_via_metadata" | "files_via_content" | "auto_routed";
declare const RetrievalMode: {
    readonly CHUNKS: "chunks";
    readonly FILES_VIA_METADATA: "files_via_metadata";
    readonly FILES_VIA_CONTENT: "files_via_content";
    readonly AUTO_ROUTED: "auto_routed";
};
/**
 * Schema for the search params for an retrieval execution.
 */
type RetrievalParams = {
    /**
     * Number of nodes for dense retrieval.
     */
    dense_similarity_top_k?: number | null;
    /**
     * Minimum similarity score wrt query for retrieval
     */
    dense_similarity_cutoff?: number | null;
    /**
     * Number of nodes for sparse retrieval.
     */
    sparse_similarity_top_k?: number | null;
    /**
     * Enable reranking for retrieval
     */
    enable_reranking?: boolean | null;
    /**
     * Number of reranked nodes for returning.
     */
    rerank_top_n?: number | null;
    /**
     * Alpha value for hybrid retrieval to determine the weights between dense and sparse retrieval. 0 is sparse retrieval and 1 is dense retrieval.
     */
    alpha?: number | null;
    /**
     * Search filters for retrieval.
     */
    search_filters?: MetadataFilters | null;
    /**
     * Number of files to retrieve (only for retrieval mode files_via_metadata and files_via_content).
     */
    files_top_k?: number | null;
    /**
     * The retrieval mode for the query.
     */
    retrieval_mode?: RetrievalMode;
    /**
     * Whether to retrieve image nodes.
     */
    retrieve_image_nodes?: boolean;
    /**
     * The query to retrieve against.
     */
    query: string;
    class_name?: string;
};
/**
 * Schema for the result of an retrieval execution.
 */
type RetrieveResults = {
    /**
     * The ID of the pipeline that the query was retrieved against.
     */
    pipeline_id: string;
    /**
     * The nodes retrieved by the pipeline for the given query.
     */
    retrieval_nodes: Array<TextNodeWithScore>;
    /**
     * The image nodes retrieved by the pipeline for the given query.
     */
    image_nodes?: Array<PageScreenshotNodeWithScore>;
    /**
     * The end-to-end latency for retrieval and reranking.
     */
    retrieval_latency?: {
        [key: string]: number;
    };
    /**
     * Metadata associated with the retrieval execution
     */
    metadata?: {
        [key: string]: string;
    };
    class_name?: string;
};
/**
 * An entity that retrieves context nodes from several sub RetrieverTools.
 */
type Retriever = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string;
    /**
     * The pipelines this retriever uses.
     */
    pipelines?: Array<RetrieverPipeline>;
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The ID of the project this retriever resides in.
     */
    project_id: string;
};
type RetrieverCreate = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string;
    /**
     * The pipelines this retriever uses.
     */
    pipelines?: Array<RetrieverPipeline>;
};
type RetrieverPipeline = {
    /**
     * A name for the retriever tool. Will default to the pipeline name if not provided.
     */
    name: string | null;
    /**
     * A description of the retriever tool.
     */
    description: string | null;
    /**
     * The ID of the pipeline this tool uses.
     */
    pipeline_id: string;
    /**
     * Parameters for retrieval configuration.
     */
    preset_retrieval_parameters?: PresetRetrievalParams;
};
type RetrieverUpdate = {
    /**
     * A name for the retriever.
     */
    name?: string | null;
    /**
     * The pipelines this retriever uses.
     */
    pipelines: Array<RetrieverPipeline> | null;
};
/**
 * Schema for a role.
 */
type Role = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * A name for the role.
     */
    name: string;
    /**
     * The organization's ID.
     */
    organization_id: string | null;
    /**
     * The actual permissions of the role.
     */
    permissions: Array<Permission>;
};
type SchemaRelaxMode = "FULL" | "TOP_LEVEL" | "LEAF";
declare const SchemaRelaxMode: {
    readonly FULL: "FULL";
    readonly TOP_LEVEL: "TOP_LEVEL";
    readonly LEAF: "LEAF";
};
type SemanticChunkingConfig = {
    mode?: "semantic";
    buffer_size?: number;
    breakpoint_percentile_threshold?: number;
};
type SentenceChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "sentence";
    separator?: string;
    paragraph_separator?: string;
};
/**
 * Enum for representing the status of a job
 */
type StatusEnum = "PENDING" | "SUCCESS" | "ERROR" | "PARTIAL_SUCCESS" | "CANCELLED";
/**
 * Enum for representing the status of a job
 */
declare const StatusEnum: {
    readonly PENDING: "PENDING";
    readonly SUCCESS: "SUCCESS";
    readonly ERROR: "ERROR";
    readonly PARTIAL_SUCCESS: "PARTIAL_SUCCESS";
    readonly CANCELLED: "CANCELLED";
};
type StructMode = "STRUCT_PARSE" | "JSON_MODE" | "FUNC_CALL" | "STRUCT_RELAXED" | "UNSTRUCTURED";
declare const StructMode: {
    readonly STRUCT_PARSE: "STRUCT_PARSE";
    readonly JSON_MODE: "JSON_MODE";
    readonly FUNC_CALL: "FUNC_CALL";
    readonly STRUCT_RELAXED: "STRUCT_RELAXED";
    readonly UNSTRUCTURED: "UNSTRUCTURED";
};
/**
 * Configuration for the structured parsing agent.
 */
type StructParseConf = {
    /**
     * The model to use for the structured parsing.
     */
    model?: ExtractModels;
    /**
     * The temperature to use for the structured parsing.
     */
    temperature?: number;
    /**
     * The relaxation mode to use for the structured parsing.
     */
    relaxation_mode?: SchemaRelaxMode;
    /**
     * The struct mode to use for the structured parsing.
     */
    struct_mode?: StructMode;
    /**
     * Whether to handle missing fields in the schema.
     */
    handle_missing?: boolean;
    /**
     * Whether to use reasoning for the structured extraction.
     */
    use_reasoning?: boolean;
    /**
     * Whether to cite sources for the structured extraction.
     */
    cite_sources?: boolean;
    /**
     * The prompt configuration for the structured parsing.
     */
    prompt_conf?: PromptConf;
};
/**
 * Response Schema for a supported eval LLM model.
 */
type SupportedLlmModel = {
    /**
     * The name of the supported LLM model.
     */
    name: string;
    /**
     * Whether the LLM model is enabled for use in LlamaCloud.
     */
    enabled?: boolean;
    /**
     * The details of the supported LLM model.
     */
    details: LlmModelData;
};
type SupportedLlmModelNames = "GPT_4O" | "GPT_4O_MINI" | "AZURE_OPENAI_GPT_3_5_TURBO" | "AZURE_OPENAI_GPT_4O" | "AZURE_OPENAI_GPT_4O_MINI" | "AZURE_OPENAI_GPT_4" | "CLAUDE_3_5_SONNET" | "BEDROCK_CLAUDE_3_5_SONNET" | "VERTEX_AI_CLAUDE_3_5_SONNET_V2";
declare const SupportedLlmModelNames: {
    readonly GPT_4O: "GPT_4O";
    readonly GPT_4O_MINI: "GPT_4O_MINI";
    readonly AZURE_OPENAI_GPT_3_5_TURBO: "AZURE_OPENAI_GPT_3_5_TURBO";
    readonly AZURE_OPENAI_GPT_4O: "AZURE_OPENAI_GPT_4O";
    readonly AZURE_OPENAI_GPT_4O_MINI: "AZURE_OPENAI_GPT_4O_MINI";
    readonly AZURE_OPENAI_GPT_4: "AZURE_OPENAI_GPT_4";
    readonly CLAUDE_3_5_SONNET: "CLAUDE_3_5_SONNET";
    readonly BEDROCK_CLAUDE_3_5_SONNET: "BEDROCK_CLAUDE_3_5_SONNET";
    readonly VERTEX_AI_CLAUDE_3_5_SONNET_V2: "VERTEX_AI_CLAUDE_3_5_SONNET_V2";
};
type TextBlock = {
    block_type?: "text";
    text: string;
};
/**
 * Provided for backward compatibility.
 *
 * Note: we keep the field with the typo "seperator" to maintain backward compatibility for
 * serialized objects.
 */
type TextNode = {
    /**
     * Unique ID of the node.
     */
    id_?: string;
    /**
     * Embedding of the node.
     */
    embedding?: Array<number> | null;
    /**
     * A flat dictionary of metadata fields
     */
    extra_info?: {
        [key: string]: unknown;
    };
    /**
     * Metadata keys that are excluded from text for the embed model.
     */
    excluded_embed_metadata_keys?: Array<string>;
    /**
     * Metadata keys that are excluded from text for the LLM.
     */
    excluded_llm_metadata_keys?: Array<string>;
    /**
     * A mapping of relationships to other node information.
     */
    relationships?: {
        [key: string]: RelatedNodeInfo | Array<RelatedNodeInfo>;
    };
    /**
     * Template for how metadata is formatted, with {key} and {value} placeholders.
     */
    metadata_template?: string;
    /**
     * Separator between metadata fields when converting to string.
     */
    metadata_seperator?: string;
    /**
     * Text content of the node.
     */
    text?: string;
    /**
     * MIME type of the node content.
     */
    mimetype?: string;
    /**
     * Start char index of the node.
     */
    start_char_idx?: number | null;
    /**
     * End char index of the node.
     */
    end_char_idx?: number | null;
    /**
     * Template for how text is formatted, with {content} and {metadata_str} placeholders.
     */
    text_template?: string;
    class_name?: string;
};
/**
 * Same as NodeWithScore but type for node is a TextNode instead of BaseNode.
 * FastAPI doesn't accept abstract classes like BaseNode.
 */
type TextNodeWithScore = {
    node: TextNode;
    score?: number | null;
    class_name?: string;
};
type TokenChunkingConfig = {
    chunk_size?: number;
    chunk_overlap?: number;
    mode?: "token";
    separator?: string;
};
type UsageAndPlan = {
    plan: BasePlan;
    usage: UsageResponse;
};
type UsageMetricResponse = {
    feature_usage: {
        [key: string]: unknown;
    };
    day: string;
    source: string;
    job_id: string;
};
/**
 * Response model
 */
type UsageResponse = {
    active_free_credits_usage?: Array<FreeCreditsUsage>;
    total_users?: number;
    total_indexes?: number;
    total_indexed_pages?: number;
    active_alerts?: Array<"plan_spend_limit_exceeded" | "plan_spend_limit_soft_alert" | "configured_spend_limit_exceeded" | "free_credits_exhausted">;
    current_invoice_total_usd_cents?: number | null;
    total_extraction_agents?: number;
};
type UserJobRecord = {
    /**
     * The user id from who triggered the job
     */
    id: string;
    /**
     * The name of the user
     */
    name: string;
};
/**
 * Schema for a user's membership to an organization.
 */
type UserOrganization = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The user's email address.
     */
    email: string;
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * Whether the user's membership is pending account signup.
     */
    pending?: boolean;
    /**
     * The user ID of the user who added the user to the organization.
     */
    invited_by_user_id?: string | null;
    /**
     * The email address of the user who added the user to the organization.
     */
    invited_by_user_email?: string | null;
    /**
     * The roles of the user in the organization.
     */
    roles: Array<UserOrganizationRole>;
};
/**
 * Schema for creating a user's membership to an organization.
 */
type UserOrganizationCreate = {
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The user's email address.
     */
    email?: string | null;
    /**
     * The project IDs to add the user to.
     */
    project_ids: Array<string> | null;
    /**
     * The role ID to assign to the user.
     */
    role_id?: string | null;
};
/**
 * Schema for deleting a user's membership to an organization.
 */
type UserOrganizationDelete = {
    /**
     * The user's ID.
     */
    user_id?: string | null;
    /**
     * The user's email address.
     */
    email?: string | null;
};
/**
 * Schema for a user's role in an organization.
 */
type UserOrganizationRole = {
    /**
     * Unique identifier
     */
    id: string;
    /**
     * Creation datetime
     */
    created_at?: string | null;
    /**
     * Update datetime
     */
    updated_at?: string | null;
    /**
     * The user's ID.
     */
    user_id: string;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * The project ID scope.
     */
    project_ids?: Array<string> | null;
    /**
     * The role's ID.
     */
    role_id: string;
    /**
     * The role.
     */
    role: Role;
};
/**
 * Schema for creating a user's role in an organization.
 */
type UserOrganizationRoleCreate = {
    /**
     * The user's ID.
     */
    user_id: string;
    /**
     * The organization's ID.
     */
    organization_id: string;
    /**
     * The role's ID.
     */
    role_id: string;
};
type ValidationError = {
    loc: Array<string | number>;
    msg: string;
    type: string;
};
type VertexAiEmbeddingConfig = {
    /**
     * Type of the embedding model.
     */
    type?: "VERTEXAI_EMBEDDING";
    /**
     * Configuration for the VertexAI embedding model.
     */
    component?: VertexTextEmbedding;
};
/**
 * Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode
 * since importing llama_index.embeddings.vertex.base incurs a lot of memory usage.
 */
type VertexEmbeddingMode = "default" | "classification" | "clustering" | "similarity" | "retrieval";
/**
 * Copied from llama_index.embeddings.vertex.base.VertexEmbeddingMode
 * since importing llama_index.embeddings.vertex.base incurs a lot of memory usage.
 */
declare const VertexEmbeddingMode: {
    readonly DEFAULT: "default";
    readonly CLASSIFICATION: "classification";
    readonly CLUSTERING: "clustering";
    readonly SIMILARITY: "similarity";
    readonly RETRIEVAL: "retrieval";
};
type VertexTextEmbedding = {
    /**
     * The modelId of the VertexAI model to use.
     */
    model_name?: string;
    /**
     * The batch size for embedding calls.
     */
    embed_batch_size?: number;
    /**
     * The number of workers to use for async embedding calls.
     */
    num_workers?: number | null;
    /**
     * The default location to use when making API calls.
     */
    location: string;
    /**
     * The default GCP project to use when making Vertex API calls.
     */
    project: string;
    /**
     * The embedding mode to use.
     */
    embed_mode?: VertexEmbeddingMode;
    /**
     * Additional kwargs for the Vertex.
     */
    additional_kwargs?: {
        [key: string]: unknown;
    };
    /**
     * The client email for the VertexAI credentials.
     */
    client_email: string | null;
    /**
     * The token URI for the VertexAI credentials.
     */
    token_uri: string | null;
    /**
     * The private key ID for the VertexAI credentials.
     */
    private_key_id: string | null;
    /**
     * The private key for the VertexAI credentials.
     */
    private_key: string | null;
    class_name?: string;
};
type AppSchemaChatChatMessage = {
    id: string;
    /**
     * The index of the message in the chat.
     */
    index: number;
    /**
     * Retrieval annotations for the message.
     */
    annotations?: Array<MessageAnnotation>;
    /**
     * The role of the message.
     */
    role: MessageRole;
    /**
     * Text content of the generation
     */
    content?: string | null;
    /**
     * Additional arguments passed to the model
     */
    additional_kwargs?: {
        [key: string]: string;
    };
    class_name?: string;
};
/**
 * Chat message.
 */
type LlamaIndexCoreBaseLlmsTypesChatMessage = {
    role?: MessageRole;
    additional_kwargs?: {
        [key: string]: unknown;
    };
    blocks?: Array<({
        block_type: "text";
    } & TextBlock) | ({
        block_type: "image";
    } & ImageBlock) | ({
        block_type: "audio";
    } & AudioBlock)>;
};
type ListKeysApiV1ApiKeysGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/api-keys";
};
type ListKeysApiV1ApiKeysGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListKeysApiV1ApiKeysGetError = ListKeysApiV1ApiKeysGetErrors[keyof ListKeysApiV1ApiKeysGetErrors];
type ListKeysApiV1ApiKeysGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ApiKey>;
};
type ListKeysApiV1ApiKeysGetResponse = ListKeysApiV1ApiKeysGetResponses[keyof ListKeysApiV1ApiKeysGetResponses];
type GenerateKeyApiV1ApiKeysPostData = {
    body: ApiKeyCreate;
    path?: never;
    query?: never;
    url: "/api/v1/api-keys";
};
type GenerateKeyApiV1ApiKeysPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GenerateKeyApiV1ApiKeysPostError = GenerateKeyApiV1ApiKeysPostErrors[keyof GenerateKeyApiV1ApiKeysPostErrors];
type GenerateKeyApiV1ApiKeysPostResponses = {
    /**
     * Successful Response
     */
    200: ApiKey;
};
type GenerateKeyApiV1ApiKeysPostResponse = GenerateKeyApiV1ApiKeysPostResponses[keyof GenerateKeyApiV1ApiKeysPostResponses];
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData = {
    body?: never;
    path: {
        api_key_id: string;
    };
    query?: never;
    url: "/api/v1/api-keys/{api_key_id}";
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError = DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors[keyof DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors];
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse = DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses[keyof DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses];
type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutData = {
    body: ApiKeyUpdate;
    path: {
        api_key_id: string;
    };
    query?: never;
    url: "/api/v1/api-keys/{api_key_id}";
};
type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutError = UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutErrors[keyof UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutErrors];
type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponses = {
    /**
     * Successful Response
     */
    200: ApiKey;
};
type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponse = UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponses[keyof UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponses];
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData = {
    body: ({
        type: "AZURE_EMBEDDING";
    } & AzureOpenAiEmbeddingConfig) | ({
        type: "COHERE_EMBEDDING";
    } & CohereEmbeddingConfig) | ({
        type: "GEMINI_EMBEDDING";
    } & GeminiEmbeddingConfig) | ({
        type: "HUGGINGFACE_API_EMBEDDING";
    } & HuggingFaceInferenceApiEmbeddingConfig) | ({
        type: "OPENAI_EMBEDDING";
    } & OpenAiEmbeddingConfig) | ({
        type: "VERTEXAI_EMBEDDING";
    } & VertexAiEmbeddingConfig) | ({
        type: "BEDROCK_EMBEDDING";
    } & BedrockEmbeddingConfig);
    path?: never;
    query?: {
        pipeline_id?: string | null;
    };
    url: "/api/v1/validate-integrations/validate-embedding-connection";
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError = ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors[keyof ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors];
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse = ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses[keyof ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses];
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        existing_data_source_id?: string | null;
    };
    url: "/api/v1/validate-integrations/validate-data-source-connection";
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError = ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors[keyof ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors];
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse = ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses[keyof ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses];
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: never;
    url: "/api/v1/validate-integrations/validate-data-sink-connection";
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError = ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors[keyof ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors];
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses = {
    /**
     * Successful Response
     */
    200: BaseConnectionValidation;
};
type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse = ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses[keyof ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses];
type ListDataSinksApiV1DataSinksGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type ListDataSinksApiV1DataSinksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListDataSinksApiV1DataSinksGetError = ListDataSinksApiV1DataSinksGetErrors[keyof ListDataSinksApiV1DataSinksGetErrors];
type ListDataSinksApiV1DataSinksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DataSinkReadable>;
};
type ListDataSinksApiV1DataSinksGetResponse = ListDataSinksApiV1DataSinksGetResponses[keyof ListDataSinksApiV1DataSinksGetResponses];
type CreateDataSinkApiV1DataSinksPostData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type CreateDataSinkApiV1DataSinksPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateDataSinkApiV1DataSinksPostError = CreateDataSinkApiV1DataSinksPostErrors[keyof CreateDataSinkApiV1DataSinksPostErrors];
type CreateDataSinkApiV1DataSinksPostResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type CreateDataSinkApiV1DataSinksPostResponse = CreateDataSinkApiV1DataSinksPostResponses[keyof CreateDataSinkApiV1DataSinksPostResponses];
type UpsertDataSinkApiV1DataSinksPutData = {
    body: DataSinkCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sinks";
};
type UpsertDataSinkApiV1DataSinksPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertDataSinkApiV1DataSinksPutError = UpsertDataSinkApiV1DataSinksPutErrors[keyof UpsertDataSinkApiV1DataSinksPutErrors];
type UpsertDataSinkApiV1DataSinksPutResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type UpsertDataSinkApiV1DataSinksPutResponse = UpsertDataSinkApiV1DataSinksPutResponses[keyof UpsertDataSinkApiV1DataSinksPutResponses];
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData = {
    body?: never;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError = DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors[keyof DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors];
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse = DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses[keyof DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses];
type GetDataSinkApiV1DataSinksDataSinkIdGetData = {
    body?: never;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type GetDataSinkApiV1DataSinksDataSinkIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDataSinkApiV1DataSinksDataSinkIdGetError = GetDataSinkApiV1DataSinksDataSinkIdGetErrors[keyof GetDataSinkApiV1DataSinksDataSinkIdGetErrors];
type GetDataSinkApiV1DataSinksDataSinkIdGetResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type GetDataSinkApiV1DataSinksDataSinkIdGetResponse = GetDataSinkApiV1DataSinksDataSinkIdGetResponses[keyof GetDataSinkApiV1DataSinksDataSinkIdGetResponses];
type UpdateDataSinkApiV1DataSinksDataSinkIdPutData = {
    body: DataSinkUpdateWritable;
    path: {
        data_sink_id: string;
    };
    query?: never;
    url: "/api/v1/data-sinks/{data_sink_id}";
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutError = UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors[keyof UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors];
type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses = {
    /**
     * Successful Response
     */
    200: DataSinkReadable;
};
type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse = UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses[keyof UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses];
type ListDataSourcesApiV1DataSourcesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type ListDataSourcesApiV1DataSourcesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListDataSourcesApiV1DataSourcesGetError = ListDataSourcesApiV1DataSourcesGetErrors[keyof ListDataSourcesApiV1DataSourcesGetErrors];
type ListDataSourcesApiV1DataSourcesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<DataSourceReadable>;
};
type ListDataSourcesApiV1DataSourcesGetResponse = ListDataSourcesApiV1DataSourcesGetResponses[keyof ListDataSourcesApiV1DataSourcesGetResponses];
type CreateDataSourceApiV1DataSourcesPostData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type CreateDataSourceApiV1DataSourcesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateDataSourceApiV1DataSourcesPostError = CreateDataSourceApiV1DataSourcesPostErrors[keyof CreateDataSourceApiV1DataSourcesPostErrors];
type CreateDataSourceApiV1DataSourcesPostResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type CreateDataSourceApiV1DataSourcesPostResponse = CreateDataSourceApiV1DataSourcesPostResponses[keyof CreateDataSourceApiV1DataSourcesPostResponses];
type UpsertDataSourceApiV1DataSourcesPutData = {
    body: DataSourceCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/data-sources";
};
type UpsertDataSourceApiV1DataSourcesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertDataSourceApiV1DataSourcesPutError = UpsertDataSourceApiV1DataSourcesPutErrors[keyof UpsertDataSourceApiV1DataSourcesPutErrors];
type UpsertDataSourceApiV1DataSourcesPutResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type UpsertDataSourceApiV1DataSourcesPutResponse = UpsertDataSourceApiV1DataSourcesPutResponses[keyof UpsertDataSourceApiV1DataSourcesPutResponses];
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData = {
    body?: never;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError = DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors[keyof DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors];
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse = DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses[keyof DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses];
type GetDataSourceApiV1DataSourcesDataSourceIdGetData = {
    body?: never;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetError = GetDataSourceApiV1DataSourcesDataSourceIdGetErrors[keyof GetDataSourceApiV1DataSourcesDataSourceIdGetErrors];
type GetDataSourceApiV1DataSourcesDataSourceIdGetResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type GetDataSourceApiV1DataSourcesDataSourceIdGetResponse = GetDataSourceApiV1DataSourcesDataSourceIdGetResponses[keyof GetDataSourceApiV1DataSourcesDataSourceIdGetResponses];
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutData = {
    body: DataSourceUpdateWritable;
    path: {
        data_source_id: string;
    };
    query?: never;
    url: "/api/v1/data-sources/{data_source_id}";
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutError = UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors[keyof UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors];
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses = {
    /**
     * Successful Response
     */
    200: DataSourceReadable;
};
type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse = UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses[keyof UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses];
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError = ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors[keyof ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors];
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<EmbeddingModelConfig>;
};
type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse = ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses[keyof ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses];
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData = {
    body: EmbeddingModelConfigCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError = CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors[keyof CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors];
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses = {
    /**
     * Successful Response
     */
    201: EmbeddingModelConfig;
};
type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse = CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses[keyof CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses];
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData = {
    body: EmbeddingModelConfigUpdate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs";
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError = UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors[keyof UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors];
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses = {
    /**
     * Successful Response
     */
    200: EmbeddingModelConfig;
};
type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse = UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses[keyof UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses];
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData = {
    body?: never;
    path: {
        embedding_model_config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs/{embedding_model_config_id}";
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError = DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors[keyof DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors];
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse = DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses[keyof DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses];
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData = {
    body: EmbeddingModelConfigUpdate;
    path: {
        embedding_model_config_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/embedding-model-configs/{embedding_model_config_id}";
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError = UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors[keyof UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors];
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses = {
    /**
     * Successful Response
     */
    200: EmbeddingModelConfig;
};
type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse = UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses[keyof UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses];
type ListOrganizationsApiV1OrganizationsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type ListOrganizationsApiV1OrganizationsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListOrganizationsApiV1OrganizationsGetError = ListOrganizationsApiV1OrganizationsGetErrors[keyof ListOrganizationsApiV1OrganizationsGetErrors];
type ListOrganizationsApiV1OrganizationsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Organization>;
};
type ListOrganizationsApiV1OrganizationsGetResponse = ListOrganizationsApiV1OrganizationsGetResponses[keyof ListOrganizationsApiV1OrganizationsGetResponses];
type CreateOrganizationApiV1OrganizationsPostData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type CreateOrganizationApiV1OrganizationsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateOrganizationApiV1OrganizationsPostError = CreateOrganizationApiV1OrganizationsPostErrors[keyof CreateOrganizationApiV1OrganizationsPostErrors];
type CreateOrganizationApiV1OrganizationsPostResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type CreateOrganizationApiV1OrganizationsPostResponse = CreateOrganizationApiV1OrganizationsPostResponses[keyof CreateOrganizationApiV1OrganizationsPostResponses];
type UpsertOrganizationApiV1OrganizationsPutData = {
    body: OrganizationCreate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations";
};
type UpsertOrganizationApiV1OrganizationsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertOrganizationApiV1OrganizationsPutError = UpsertOrganizationApiV1OrganizationsPutErrors[keyof UpsertOrganizationApiV1OrganizationsPutErrors];
type UpsertOrganizationApiV1OrganizationsPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type UpsertOrganizationApiV1OrganizationsPutResponse = UpsertOrganizationApiV1OrganizationsPutResponses[keyof UpsertOrganizationApiV1OrganizationsPutResponses];
type GetDefaultOrganizationApiV1OrganizationsDefaultGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/organizations/default";
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetError = GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors[keyof GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors];
type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse = GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses[keyof GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses];
type SetDefaultOrganizationApiV1OrganizationsDefaultPutData = {
    body: DefaultOrganizationUpdate;
    path?: never;
    query?: never;
    url: "/api/v1/organizations/default";
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutError = SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors[keyof SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors];
type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse = SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses[keyof SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses];
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError = DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors[keyof DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors];
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse = DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses[keyof DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses];
type GetOrganizationApiV1OrganizationsOrganizationIdGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetError = GetOrganizationApiV1OrganizationsOrganizationIdGetErrors[keyof GetOrganizationApiV1OrganizationsOrganizationIdGetErrors];
type GetOrganizationApiV1OrganizationsOrganizationIdGetResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type GetOrganizationApiV1OrganizationsOrganizationIdGetResponse = GetOrganizationApiV1OrganizationsOrganizationIdGetResponses[keyof GetOrganizationApiV1OrganizationsOrganizationIdGetResponses];
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutData = {
    body: OrganizationUpdate;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}";
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutError = UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors[keyof UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors];
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses = {
    /**
     * Successful Response
     */
    200: Organization;
};
type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse = UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses[keyof UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses];
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData = {
    body?: never;
    path: {
        organization_id: string | null;
    };
    query?: {
        get_current_invoice_total?: boolean;
    };
    url: "/api/v1/organizations/{organization_id}/usage";
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError = GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors[keyof GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors];
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses = {
    /**
     * Successful Response
     */
    200: UsageAndPlan;
};
type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse = GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses[keyof GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses];
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users";
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError = ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors[keyof ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors];
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses = {
    /**
     * Successful Response
     */
    200: Array<UserOrganization>;
};
type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse = ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses[keyof ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses];
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData = {
    body: Array<UserOrganizationCreate>;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users";
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError = AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors[keyof AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors];
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses = {
    /**
     * Successful Response
     */
    200: Array<UserOrganization>;
};
type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse = AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses[keyof AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses];
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData = {
    body?: never;
    path: {
        organization_id: string;
        member_user_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{member_user_id}";
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError = RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors[keyof RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors];
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse = RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses[keyof RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses];
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData = {
    body: Array<UserOrganizationDelete>;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/remove";
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError = BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors[keyof BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors];
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse = BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses[keyof BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses];
type ListRolesApiV1OrganizationsOrganizationIdRolesGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/roles";
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetError = ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors[keyof ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors];
type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Role>;
};
type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse = ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses[keyof ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses];
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData = {
    body?: never;
    path: {
        organization_id: string;
    };
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/organizations/{organization_id}/users/roles";
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError = GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors[keyof GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors];
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses = {
    /**
     * Successful Response
     */
    200: UserOrganizationRole | null;
};
type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse = GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses[keyof GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses];
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData = {
    body: UserOrganizationRoleCreate;
    path: {
        organization_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/roles";
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError = AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors[keyof AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors];
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses = {
    /**
     * Successful Response
     */
    200: UserOrganizationRole;
};
type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse = AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses[keyof AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses];
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData = {
    body?: never;
    path: {
        organization_id: string;
        user_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects";
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError = ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors[keyof ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors];
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};
type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse = ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses[keyof ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses];
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData = {
    body?: never;
    path: {
        organization_id: string | null;
        user_id: string;
    };
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects";
};
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError = AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors[keyof AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors];
type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        organization_id: string;
        user_id: string;
        project_id: string;
    };
    query?: never;
    url: "/api/v1/organizations/{organization_id}/users/{user_id}/projects/{project_id}";
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError = RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors[keyof RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors];
type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListProjectsApiV1ProjectsGetData = {
    body?: never;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_name?: string | null;
    };
    url: "/api/v1/projects";
};
type ListProjectsApiV1ProjectsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListProjectsApiV1ProjectsGetError = ListProjectsApiV1ProjectsGetErrors[keyof ListProjectsApiV1ProjectsGetErrors];
type ListProjectsApiV1ProjectsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Project>;
};
type ListProjectsApiV1ProjectsGetResponse = ListProjectsApiV1ProjectsGetResponses[keyof ListProjectsApiV1ProjectsGetResponses];
type CreateProjectApiV1ProjectsPostData = {
    body: ProjectCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects";
};
type CreateProjectApiV1ProjectsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateProjectApiV1ProjectsPostError = CreateProjectApiV1ProjectsPostErrors[keyof CreateProjectApiV1ProjectsPostErrors];
type CreateProjectApiV1ProjectsPostResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type CreateProjectApiV1ProjectsPostResponse = CreateProjectApiV1ProjectsPostResponses[keyof CreateProjectApiV1ProjectsPostResponses];
type UpsertProjectApiV1ProjectsPutData = {
    body: ProjectCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects";
};
type UpsertProjectApiV1ProjectsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertProjectApiV1ProjectsPutError = UpsertProjectApiV1ProjectsPutErrors[keyof UpsertProjectApiV1ProjectsPutErrors];
type UpsertProjectApiV1ProjectsPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type UpsertProjectApiV1ProjectsPutResponse = UpsertProjectApiV1ProjectsPutResponses[keyof UpsertProjectApiV1ProjectsPutResponses];
type DeleteProjectApiV1ProjectsProjectIdDeleteData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type DeleteProjectApiV1ProjectsProjectIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteProjectApiV1ProjectsProjectIdDeleteError = DeleteProjectApiV1ProjectsProjectIdDeleteErrors[keyof DeleteProjectApiV1ProjectsProjectIdDeleteErrors];
type DeleteProjectApiV1ProjectsProjectIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteProjectApiV1ProjectsProjectIdDeleteResponse = DeleteProjectApiV1ProjectsProjectIdDeleteResponses[keyof DeleteProjectApiV1ProjectsProjectIdDeleteResponses];
type GetProjectApiV1ProjectsProjectIdGetData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type GetProjectApiV1ProjectsProjectIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetProjectApiV1ProjectsProjectIdGetError = GetProjectApiV1ProjectsProjectIdGetErrors[keyof GetProjectApiV1ProjectsProjectIdGetErrors];
type GetProjectApiV1ProjectsProjectIdGetResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type GetProjectApiV1ProjectsProjectIdGetResponse = GetProjectApiV1ProjectsProjectIdGetResponses[keyof GetProjectApiV1ProjectsProjectIdGetResponses];
type UpdateExistingProjectApiV1ProjectsProjectIdPutData = {
    body: ProjectUpdate;
    path: {
        project_id: string | null;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}";
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutError = UpdateExistingProjectApiV1ProjectsProjectIdPutErrors[keyof UpdateExistingProjectApiV1ProjectsProjectIdPutErrors];
type UpdateExistingProjectApiV1ProjectsProjectIdPutResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type UpdateExistingProjectApiV1ProjectsProjectIdPutResponse = UpdateExistingProjectApiV1ProjectsProjectIdPutResponses[keyof UpdateExistingProjectApiV1ProjectsProjectIdPutResponses];
type GetCurrentProjectApiV1ProjectsCurrentGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/projects/current";
};
type GetCurrentProjectApiV1ProjectsCurrentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetCurrentProjectApiV1ProjectsCurrentGetError = GetCurrentProjectApiV1ProjectsCurrentGetErrors[keyof GetCurrentProjectApiV1ProjectsCurrentGetErrors];
type GetCurrentProjectApiV1ProjectsCurrentGetResponses = {
    /**
     * Successful Response
     */
    200: Project;
};
type GetCurrentProjectApiV1ProjectsCurrentGetResponse = GetCurrentProjectApiV1ProjectsCurrentGetResponses[keyof GetCurrentProjectApiV1ProjectsCurrentGetResponses];
type GetProjectUsageApiV1ProjectsProjectIdUsageGetData = {
    body?: never;
    path: {
        project_id: string | null;
    };
    query?: {
        get_current_invoice_total?: boolean;
        organization_id?: string | null;
    };
    url: "/api/v1/projects/{project_id}/usage";
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetError = GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors[keyof GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors];
type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses = {
    /**
     * Successful Response
     */
    200: UsageAndPlan;
};
type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse = GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses[keyof GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses];
type DeleteFileApiV1FilesIdDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}";
};
type DeleteFileApiV1FilesIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteFileApiV1FilesIdDeleteError = DeleteFileApiV1FilesIdDeleteErrors[keyof DeleteFileApiV1FilesIdDeleteErrors];
type DeleteFileApiV1FilesIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteFileApiV1FilesIdDeleteResponse = DeleteFileApiV1FilesIdDeleteResponses[keyof DeleteFileApiV1FilesIdDeleteResponses];
type GetFileApiV1FilesIdGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}";
};
type GetFileApiV1FilesIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFileApiV1FilesIdGetError = GetFileApiV1FilesIdGetErrors[keyof GetFileApiV1FilesIdGetErrors];
type GetFileApiV1FilesIdGetResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type GetFileApiV1FilesIdGetResponse = GetFileApiV1FilesIdGetResponses[keyof GetFileApiV1FilesIdGetResponses];
type ListFilesApiV1FilesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type ListFilesApiV1FilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilesApiV1FilesGetError = ListFilesApiV1FilesGetErrors[keyof ListFilesApiV1FilesGetErrors];
type ListFilesApiV1FilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<File>;
};
type ListFilesApiV1FilesGetResponse = ListFilesApiV1FilesGetResponses[keyof ListFilesApiV1FilesGetResponses];
type UploadFileApiV1FilesPostData = {
    body: BodyUploadFileApiV1FilesPost;
    path?: never;
    query?: {
        external_file_id?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type UploadFileApiV1FilesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiV1FilesPostError = UploadFileApiV1FilesPostErrors[keyof UploadFileApiV1FilesPostErrors];
type UploadFileApiV1FilesPostResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type UploadFileApiV1FilesPostResponse = UploadFileApiV1FilesPostResponses[keyof UploadFileApiV1FilesPostResponses];
type GeneratePresignedUrlApiV1FilesPutData = {
    body: FileCreate;
    path?: never;
    query?: {
        expires_at_seconds?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files";
};
type GeneratePresignedUrlApiV1FilesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiV1FilesPutError = GeneratePresignedUrlApiV1FilesPutErrors[keyof GeneratePresignedUrlApiV1FilesPutErrors];
type GeneratePresignedUrlApiV1FilesPutResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GeneratePresignedUrlApiV1FilesPutResponse = GeneratePresignedUrlApiV1FilesPutResponses[keyof GeneratePresignedUrlApiV1FilesPutResponses];
type SyncFilesApiV1FilesSyncPutData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/sync";
};
type SyncFilesApiV1FilesSyncPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncFilesApiV1FilesSyncPutError = SyncFilesApiV1FilesSyncPutErrors[keyof SyncFilesApiV1FilesSyncPutErrors];
type SyncFilesApiV1FilesSyncPutResponses = {
    /**
     * Successful Response
     */
    200: Array<File>;
};
type SyncFilesApiV1FilesSyncPutResponse = SyncFilesApiV1FilesSyncPutResponses[keyof SyncFilesApiV1FilesSyncPutResponses];
type UploadFileFromUrlApiV1FilesUploadFromUrlPutData = {
    body: FileCreateFromUrl;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/upload_from_url";
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutError = UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors[keyof UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors];
type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses = {
    /**
     * Successful Response
     */
    200: File;
};
type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse = UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses[keyof UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses];
type ReadFileContentApiV1FilesIdContentGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        expires_at_seconds?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/content";
};
type ReadFileContentApiV1FilesIdContentGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ReadFileContentApiV1FilesIdContentGetError = ReadFileContentApiV1FilesIdContentGetErrors[keyof ReadFileContentApiV1FilesIdContentGetErrors];
type ReadFileContentApiV1FilesIdContentGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type ReadFileContentApiV1FilesIdContentGetResponse = ReadFileContentApiV1FilesIdContentGetResponses[keyof ReadFileContentApiV1FilesIdContentGetResponses];
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page_screenshots";
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError = ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors[keyof ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors];
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageScreenshotMetadata>;
};
type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse = ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses[keyof ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses];
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page_screenshots/{page_index}";
};
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError = GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors[keyof GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors];
type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures";
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetError = ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors[keyof ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors];
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageFigureMetadata>;
};
type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse = ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses[keyof ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses];
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures/{page_index}";
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError = ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors[keyof ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors];
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PageFigureMetadata>;
};
type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse = ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses[keyof ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses];
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData = {
    body?: never;
    path: {
        id: string;
        page_index: number;
        figure_name: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/files/{id}/page-figures/{page_index}/{figure_name}";
};
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError = GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors[keyof GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors];
type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type SearchPipelinesApiV1PipelinesGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        project_name?: string | null;
        pipeline_name?: string | null;
        pipeline_type?: PipelineType | null;
    };
    url: "/api/v1/pipelines";
};
type SearchPipelinesApiV1PipelinesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SearchPipelinesApiV1PipelinesGetError = SearchPipelinesApiV1PipelinesGetErrors[keyof SearchPipelinesApiV1PipelinesGetErrors];
type SearchPipelinesApiV1PipelinesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineReadable>;
};
type SearchPipelinesApiV1PipelinesGetResponse = SearchPipelinesApiV1PipelinesGetResponses[keyof SearchPipelinesApiV1PipelinesGetResponses];
type CreatePipelineApiV1PipelinesPostData = {
    body: PipelineCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines";
};
type CreatePipelineApiV1PipelinesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreatePipelineApiV1PipelinesPostError = CreatePipelineApiV1PipelinesPostErrors[keyof CreatePipelineApiV1PipelinesPostErrors];
type CreatePipelineApiV1PipelinesPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CreatePipelineApiV1PipelinesPostResponse = CreatePipelineApiV1PipelinesPostResponses[keyof CreatePipelineApiV1PipelinesPostResponses];
type UpsertPipelineApiV1PipelinesPutData = {
    body: PipelineCreateWritable;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines";
};
type UpsertPipelineApiV1PipelinesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertPipelineApiV1PipelinesPutError = UpsertPipelineApiV1PipelinesPutErrors[keyof UpsertPipelineApiV1PipelinesPutErrors];
type UpsertPipelineApiV1PipelinesPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type UpsertPipelineApiV1PipelinesPutResponse = UpsertPipelineApiV1PipelinesPutResponses[keyof UpsertPipelineApiV1PipelinesPutResponses];
type DeletePipelineApiV1PipelinesPipelineIdDeleteData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteError = DeletePipelineApiV1PipelinesPipelineIdDeleteErrors[keyof DeletePipelineApiV1PipelinesPipelineIdDeleteErrors];
type DeletePipelineApiV1PipelinesPipelineIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineApiV1PipelinesPipelineIdDeleteResponse = DeletePipelineApiV1PipelinesPipelineIdDeleteResponses[keyof DeletePipelineApiV1PipelinesPipelineIdDeleteResponses];
type GetPipelineApiV1PipelinesPipelineIdGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type GetPipelineApiV1PipelinesPipelineIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineApiV1PipelinesPipelineIdGetError = GetPipelineApiV1PipelinesPipelineIdGetErrors[keyof GetPipelineApiV1PipelinesPipelineIdGetErrors];
type GetPipelineApiV1PipelinesPipelineIdGetResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type GetPipelineApiV1PipelinesPipelineIdGetResponse = GetPipelineApiV1PipelinesPipelineIdGetResponses[keyof GetPipelineApiV1PipelinesPipelineIdGetResponses];
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutData = {
    body: PipelineUpdateWritable;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}";
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutError = UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors[keyof UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors];
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse = UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses[keyof UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses];
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/status";
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError = GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors[keyof GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors];
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse = GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses[keyof GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses];
type SyncPipelineApiV1PipelinesPipelineIdSyncPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/sync";
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostError = SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors[keyof SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors];
type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse = SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses[keyof SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses];
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/sync/cancel";
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError = CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors[keyof CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors];
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse = CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses[keyof CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses];
type CopyPipelineApiV1PipelinesPipelineIdCopyPostData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/copy";
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostError = CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors[keyof CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors];
type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse = CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses[keyof CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses];
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files";
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError = ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors[keyof ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors];
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineFile>;
};
type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse = ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses[keyof ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses];
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData = {
    body: Array<PipelineFileCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files";
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError = AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors[keyof AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors];
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineFile>;
};
type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse = AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses[keyof AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses];
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
        limit?: number | null;
        offset?: number | null;
        order_by?: string | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files2";
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError = ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors[keyof ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors];
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedListPipelineFilesResponse;
};
type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse = ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses[keyof ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses];
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        data_source_id?: string | null;
        only_manually_uploaded?: boolean;
    };
    url: "/api/v1/pipelines/{pipeline_id}/files/status-counts";
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError = GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors[keyof GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors];
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses = {
    /**
     * Successful Response
     */
    200: FileCountByStatusResponse;
};
type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse = GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses[keyof GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses];
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData = {
    body?: never;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}/status";
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError = GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors[keyof GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors];
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse = GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses[keyof GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses];
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData = {
    body?: never;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}";
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError = DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors[keyof DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors];
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse = DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses[keyof DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses];
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData = {
    body: PipelineFileUpdate;
    path: {
        file_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/files/{file_id}";
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError = UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors[keyof UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors];
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineFile;
};
type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse = UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses[keyof UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses];
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/metadata";
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError = DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors[keyof DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors];
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse = DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses[keyof DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses];
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData = {
    body: BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/metadata";
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError = ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors[keyof ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors];
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: string;
    };
};
type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse = ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses[keyof ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses];
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources";
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError = ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors[keyof ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors];
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDataSourceReadable>;
};
type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse = ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses[keyof ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses];
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData = {
    body: Array<PipelineDataSourceCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources";
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError = AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors[keyof AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors];
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDataSourceReadable>;
};
type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse = AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses[keyof AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses];
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}";
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError = DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors[keyof DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors];
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse = DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses[keyof DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses];
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData = {
    body: PipelineDataSourceUpdate;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}";
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError = UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors[keyof UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors];
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses = {
    /**
     * Successful Response
     */
    200: PipelineDataSourceReadable;
};
type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse = UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses[keyof UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses];
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/sync";
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError = SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors[keyof SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors];
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses = {
    /**
     * Successful Response
     */
    200: PipelineReadable;
};
type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse = SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses[keyof SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses];
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData = {
    body?: never;
    path: {
        data_source_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/data-sources/{data_source_id}/status";
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError = GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors[keyof GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors];
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse = GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses[keyof GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses];
type RunSearchApiV1PipelinesPipelineIdRetrievePostData = {
    body: RetrievalParams;
    path: {
        pipeline_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/retrieve";
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostError = RunSearchApiV1PipelinesPipelineIdRetrievePostErrors[keyof RunSearchApiV1PipelinesPipelineIdRetrievePostErrors];
type RunSearchApiV1PipelinesPipelineIdRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: RetrieveResults;
};
type RunSearchApiV1PipelinesPipelineIdRetrievePostResponse = RunSearchApiV1PipelinesPipelineIdRetrievePostResponses[keyof RunSearchApiV1PipelinesPipelineIdRetrievePostResponses];
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/jobs";
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError = ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors[keyof ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors];
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<PipelineDeployment>;
};
type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse = ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses[keyof ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses];
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/jobs/{job_id}";
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError = GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors[keyof GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors];
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: PipelineDeployment;
};
type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse = GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses[keyof GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses];
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/playground-session";
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError = GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors[keyof GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors];
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses = {
    /**
     * Successful Response
     */
    200: PlaygroundSession;
};
type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse = GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses[keyof GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses];
type ChatApiV1PipelinesPipelineIdChatPostData = {
    body: ChatInputParams;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/chat";
};
type ChatApiV1PipelinesPipelineIdChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ChatApiV1PipelinesPipelineIdChatPostError = ChatApiV1PipelinesPipelineIdChatPostErrors[keyof ChatApiV1PipelinesPipelineIdChatPostErrors];
type ChatApiV1PipelinesPipelineIdChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        skip?: number;
        limit?: number;
        file_id?: string | null;
        only_direct_upload?: boolean | null;
        only_api_data_source_documents?: boolean | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError = ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors[keyof ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors];
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse = ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses[keyof ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses];
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData = {
    body: Array<CloudDocumentCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError = CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors[keyof CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors];
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse = CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses[keyof CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses];
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData = {
    body: Array<CloudDocumentCreate>;
    path: {
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents";
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError = UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors[keyof UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors];
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses = {
    /**
     * Successful Response
     */
    200: Array<CloudDocument>;
};
type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse = UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses[keyof UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses];
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData = {
    body?: never;
    path: {
        pipeline_id: string;
    };
    query?: {
        skip?: number;
        limit?: number;
        file_id?: string | null;
        only_direct_upload?: boolean | null;
        only_api_data_source_documents?: boolean | null;
    };
    url: "/api/v1/pipelines/{pipeline_id}/documents/paginated";
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError = PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors[keyof PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors];
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedListCloudDocumentsResponse;
};
type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse = PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses[keyof PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses];
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}";
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError = DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors[keyof DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors];
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse = DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses[keyof DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses];
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}";
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError = GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors[keyof GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors];
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses = {
    /**
     * Successful Response
     */
    200: CloudDocument;
};
type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse = GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses[keyof GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses];
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/status";
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError = GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors[keyof GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors];
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses = {
    /**
     * Successful Response
     */
    200: ManagedIngestionStatusResponse;
};
type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse = GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses[keyof GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses];
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData = {
    body?: never;
    path: {
        document_id: string;
        pipeline_id: string;
    };
    query?: never;
    url: "/api/v1/pipelines/{pipeline_id}/documents/{document_id}/chunks";
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError = ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors[keyof ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors];
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses = {
    /**
     * Successful Response
     */
    200: Array<TextNode>;
};
type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse = ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses[keyof ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses];
type ListRetrieversApiV1RetrieversGetData = {
    body?: never;
    path?: never;
    query?: {
        name?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type ListRetrieversApiV1RetrieversGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListRetrieversApiV1RetrieversGetError = ListRetrieversApiV1RetrieversGetErrors[keyof ListRetrieversApiV1RetrieversGetErrors];
type ListRetrieversApiV1RetrieversGetResponses = {
    /**
     * Successful Response
     */
    200: Array<Retriever>;
};
type ListRetrieversApiV1RetrieversGetResponse = ListRetrieversApiV1RetrieversGetResponses[keyof ListRetrieversApiV1RetrieversGetResponses];
type CreateRetrieverApiV1RetrieversPostData = {
    body: RetrieverCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type CreateRetrieverApiV1RetrieversPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateRetrieverApiV1RetrieversPostError = CreateRetrieverApiV1RetrieversPostErrors[keyof CreateRetrieverApiV1RetrieversPostErrors];
type CreateRetrieverApiV1RetrieversPostResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type CreateRetrieverApiV1RetrieversPostResponse = CreateRetrieverApiV1RetrieversPostResponses[keyof CreateRetrieverApiV1RetrieversPostResponses];
type UpsertRetrieverApiV1RetrieversPutData = {
    body: RetrieverCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers";
};
type UpsertRetrieverApiV1RetrieversPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpsertRetrieverApiV1RetrieversPutError = UpsertRetrieverApiV1RetrieversPutErrors[keyof UpsertRetrieverApiV1RetrieversPutErrors];
type UpsertRetrieverApiV1RetrieversPutResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type UpsertRetrieverApiV1RetrieversPutResponse = UpsertRetrieverApiV1RetrieversPutResponses[keyof UpsertRetrieverApiV1RetrieversPutResponses];
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData = {
    body?: never;
    path: {
        retriever_id: string;
    };
    query?: never;
    url: "/api/v1/retrievers/{retriever_id}";
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError = DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors[keyof DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors];
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses = {
    /**
     * Successful Response
     */
    204: void;
};
type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse = DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses[keyof DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses];
type GetRetrieverApiV1RetrieversRetrieverIdGetData = {
    body?: never;
    path: {
        retriever_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/{retriever_id}";
};
type GetRetrieverApiV1RetrieversRetrieverIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRetrieverApiV1RetrieversRetrieverIdGetError = GetRetrieverApiV1RetrieversRetrieverIdGetErrors[keyof GetRetrieverApiV1RetrieversRetrieverIdGetErrors];
type GetRetrieverApiV1RetrieversRetrieverIdGetResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type GetRetrieverApiV1RetrieversRetrieverIdGetResponse = GetRetrieverApiV1RetrieversRetrieverIdGetResponses[keyof GetRetrieverApiV1RetrieversRetrieverIdGetResponses];
type UpdateRetrieverApiV1RetrieversRetrieverIdPutData = {
    body: RetrieverUpdate;
    path: {
        retriever_id: string;
    };
    query?: never;
    url: "/api/v1/retrievers/{retriever_id}";
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutError = UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors[keyof UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors];
type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses = {
    /**
     * Successful Response
     */
    200: Retriever;
};
type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse = UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses[keyof UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses];
type RetrieveApiV1RetrieversRetrieverIdRetrievePostData = {
    body: CompositeRetrievalParams;
    path: {
        retriever_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/{retriever_id}/retrieve";
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostError = RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors[keyof RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors];
type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: CompositeRetrievalResult;
};
type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse = RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses[keyof RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses];
type DirectRetrieveApiV1RetrieversRetrievePostData = {
    body: DirectRetrievalParams;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/retrievers/retrieve";
};
type DirectRetrieveApiV1RetrieversRetrievePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DirectRetrieveApiV1RetrieversRetrievePostError = DirectRetrieveApiV1RetrieversRetrievePostErrors[keyof DirectRetrieveApiV1RetrieversRetrievePostErrors];
type DirectRetrieveApiV1RetrieversRetrievePostResponses = {
    /**
     * Successful Response
     */
    200: CompositeRetrievalResult;
};
type DirectRetrieveApiV1RetrieversRetrievePostResponse = DirectRetrieveApiV1RetrieversRetrievePostResponses[keyof DirectRetrieveApiV1RetrieversRetrievePostResponses];
type GetJobsApiV1JobsGetData = {
    body?: never;
    path?: never;
    query?: {
        job_name?: string | null;
        limit?: number;
        offset?: number;
        /**
         * Deprecated: This parameter is no longer supported as we've moved to usage v2. It will be removed in a future version.
         * @deprecated
         */
        include_usage_metrics?: boolean;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/jobs/";
};
type GetJobsApiV1JobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobsApiV1JobsGetError = GetJobsApiV1JobsGetErrors[keyof GetJobsApiV1JobsGetErrors];
type GetJobsApiV1JobsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedJobsHistoryWithMetrics;
};
type GetJobsApiV1JobsGetResponse = GetJobsApiV1JobsGetResponses[keyof GetJobsApiV1JobsGetResponses];
type ListSupportedModelsApiV1EvalsModelsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/evals/models";
};
type ListSupportedModelsApiV1EvalsModelsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListSupportedModelsApiV1EvalsModelsGetError = ListSupportedModelsApiV1EvalsModelsGetErrors[keyof ListSupportedModelsApiV1EvalsModelsGetErrors];
type ListSupportedModelsApiV1EvalsModelsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<SupportedLlmModel>;
};
type ListSupportedModelsApiV1EvalsModelsGetResponse = ListSupportedModelsApiV1EvalsModelsGetResponses[keyof ListSupportedModelsApiV1EvalsModelsGetResponses];
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData = {
    body?: never;
    path: {
        job_id: string;
        name: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/image/{name}";
};
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError = GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors[keyof GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors];
type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/parsing/supported_file_extensions";
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<LlamaParseSupportedFileExtensions>;
};
type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse = GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses[keyof GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses];
type ScreenshotApiV1ParsingScreenshotPostData = {
    body?: BodyScreenshotApiV1ParsingScreenshotPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/parsing/screenshot";
};
type ScreenshotApiV1ParsingScreenshotPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ScreenshotApiV1ParsingScreenshotPostError = ScreenshotApiV1ParsingScreenshotPostErrors[keyof ScreenshotApiV1ParsingScreenshotPostErrors];
type ScreenshotApiV1ParsingScreenshotPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type ScreenshotApiV1ParsingScreenshotPostResponse = ScreenshotApiV1ParsingScreenshotPostResponses[keyof ScreenshotApiV1ParsingScreenshotPostResponses];
type UploadFileApiV1ParsingUploadPostData = {
    body?: BodyUploadFileApiV1ParsingUploadPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/parsing/upload";
};
type UploadFileApiV1ParsingUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiV1ParsingUploadPostError = UploadFileApiV1ParsingUploadPostErrors[keyof UploadFileApiV1ParsingUploadPostErrors];
type UploadFileApiV1ParsingUploadPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type UploadFileApiV1ParsingUploadPostResponse = UploadFileApiV1ParsingUploadPostResponses[keyof UploadFileApiV1ParsingUploadPostResponses];
type GetJobApiV1ParsingJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}";
};
type GetJobApiV1ParsingJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiV1ParsingJobJobIdGetError = GetJobApiV1ParsingJobJobIdGetErrors[keyof GetJobApiV1ParsingJobJobIdGetErrors];
type GetJobApiV1ParsingJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type GetJobApiV1ParsingJobJobIdGetResponse = GetJobApiV1ParsingJobJobIdGetResponses[keyof GetJobApiV1ParsingJobJobIdGetResponses];
type GetJobParametersApiV1ParsingJobJobIdParametersGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/parameters";
};
type GetJobParametersApiV1ParsingJobJobIdParametersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobParametersApiV1ParsingJobJobIdParametersGetError = GetJobParametersApiV1ParsingJobJobIdParametersGetErrors[keyof GetJobParametersApiV1ParsingJobJobIdParametersGetErrors];
type GetJobParametersApiV1ParsingJobJobIdParametersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/details";
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError = GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors[keyof GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors];
type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/text";
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetError = GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors[keyof GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors];
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobTextResult;
};
type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse = GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses[keyof GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses];
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/text";
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetError = GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetErrors[keyof GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetErrors];
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/pdf";
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError = GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors[keyof GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors];
type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/pdf";
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetError = GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetErrors[keyof GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetErrors];
type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/structured";
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError = GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors[keyof GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors];
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobStructuredResult;
};
type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse = GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses[keyof GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses];
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/structured";
};
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError = GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors[keyof GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors];
type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/xlsx";
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError = GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors[keyof GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors];
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/xlsx";
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetError = GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetErrors[keyof GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetErrors];
type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/markdown";
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError = GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors[keyof GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors];
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobMarkdownResult;
};
type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse = GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses[keyof GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses];
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/markdown";
};
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError = GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors[keyof GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors];
type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/parsing/job/{job_id}/result/json";
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError = GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors[keyof GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors];
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobJsonResult;
};
type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse = GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses[keyof GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses];
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/result/raw/json";
};
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError = GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors[keyof GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors];
type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/v1/parsing/history";
};
type GetParsingHistoryResultApiV1ParsingHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetError = GetParsingHistoryResultApiV1ParsingHistoryGetErrors[keyof GetParsingHistoryResultApiV1ParsingHistoryGetErrors];
type GetParsingHistoryResultApiV1ParsingHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ParsingHistoryItem>;
};
type GetParsingHistoryResultApiV1ParsingHistoryGetResponse = GetParsingHistoryResultApiV1ParsingHistoryGetResponses[keyof GetParsingHistoryResultApiV1ParsingHistoryGetResponses];
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData = {
    body?: never;
    path: {
        job_id: string;
        filename: string;
    };
    query?: never;
    url: "/api/v1/parsing/job/{job_id}/read/{filename}";
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError = GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors[keyof GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors];
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse = GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses[keyof GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses];
type GetChatAppsApiV1AppsGetData = {
    body?: never;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/";
};
type GetChatAppsApiV1AppsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetChatAppsApiV1AppsGetError = GetChatAppsApiV1AppsGetErrors[keyof GetChatAppsApiV1AppsGetErrors];
type GetChatAppsApiV1AppsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ChatAppResponse>;
};
type GetChatAppsApiV1AppsGetResponse = GetChatAppsApiV1AppsGetResponses[keyof GetChatAppsApiV1AppsGetResponses];
type CreateChatAppApiV1AppsPostData = {
    body: ChatAppCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/";
};
type CreateChatAppApiV1AppsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateChatAppApiV1AppsPostError = CreateChatAppApiV1AppsPostErrors[keyof CreateChatAppApiV1AppsPostErrors];
type CreateChatAppApiV1AppsPostResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type CreateChatAppApiV1AppsPostResponse = CreateChatAppApiV1AppsPostResponses[keyof CreateChatAppApiV1AppsPostResponses];
type DeleteChatAppApiV1AppsIdDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}";
};
type DeleteChatAppApiV1AppsIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteChatAppApiV1AppsIdDeleteError = DeleteChatAppApiV1AppsIdDeleteErrors[keyof DeleteChatAppApiV1AppsIdDeleteErrors];
type DeleteChatAppApiV1AppsIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetChatAppApiV1AppsIdGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}";
};
type GetChatAppApiV1AppsIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetChatAppApiV1AppsIdGetError = GetChatAppApiV1AppsIdGetErrors[keyof GetChatAppApiV1AppsIdGetErrors];
type GetChatAppApiV1AppsIdGetResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type GetChatAppApiV1AppsIdGetResponse = GetChatAppApiV1AppsIdGetResponses[keyof GetChatAppApiV1AppsIdGetResponses];
type UpdateChatAppApiV1AppsIdPutData = {
    body: ChatAppUpdate;
    path: {
        id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/apps/{id}";
};
type UpdateChatAppApiV1AppsIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateChatAppApiV1AppsIdPutError = UpdateChatAppApiV1AppsIdPutErrors[keyof UpdateChatAppApiV1AppsIdPutErrors];
type UpdateChatAppApiV1AppsIdPutResponses = {
    /**
     * Successful Response
     */
    200: ChatApp;
};
type UpdateChatAppApiV1AppsIdPutResponse = UpdateChatAppApiV1AppsIdPutResponses[keyof UpdateChatAppApiV1AppsIdPutResponses];
type ChatWithChatAppApiV1AppsIdChatPostData = {
    body: AppChatInputParams;
    path: {
        id: string;
    };
    query?: never;
    url: "/api/v1/apps/{id}/chat";
};
type ChatWithChatAppApiV1AppsIdChatPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ChatWithChatAppApiV1AppsIdChatPostError = ChatWithChatAppApiV1AppsIdChatPostErrors[keyof ChatWithChatAppApiV1AppsIdChatPostErrors];
type ChatWithChatAppApiV1AppsIdChatPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type CreateCheckoutSessionApiV1BillingCheckoutSessionPostData = {
    body: CheckoutSessionCreatePayload;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/billing/checkout-session";
};
type CreateCheckoutSessionApiV1BillingCheckoutSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateCheckoutSessionApiV1BillingCheckoutSessionPostError = CreateCheckoutSessionApiV1BillingCheckoutSessionPostErrors[keyof CreateCheckoutSessionApiV1BillingCheckoutSessionPostErrors];
type CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponses = {
    /**
     * Successful Response
     */
    200: string;
};
type CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponse = CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponses[keyof CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponses];
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData = {
    body: CustomerPortalSessionCreatePayload;
    path?: never;
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/billing/customer-portal-session";
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError = CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors[keyof CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors];
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses = {
    /**
     * Successful Response
     */
    200: string;
};
type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse = CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses[keyof CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses];
type StripeWebhookApiV1BillingWebhookPostData = {
    body?: never;
    headers?: {
        "stripe-signature"?: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/billing/webhook";
};
type StripeWebhookApiV1BillingWebhookPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type StripeWebhookApiV1BillingWebhookPostError = StripeWebhookApiV1BillingWebhookPostErrors[keyof StripeWebhookApiV1BillingWebhookPostErrors];
type StripeWebhookApiV1BillingWebhookPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: "success";
    };
};
type StripeWebhookApiV1BillingWebhookPostResponse = StripeWebhookApiV1BillingWebhookPostResponses[keyof StripeWebhookApiV1BillingWebhookPostResponses];
type DowngradePlanApiV1BillingDowngradePlanPostData = {
    body?: never;
    path?: never;
    query: {
        organization_id: string;
    };
    url: "/api/v1/billing/downgrade-plan";
};
type DowngradePlanApiV1BillingDowngradePlanPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DowngradePlanApiV1BillingDowngradePlanPostError = DowngradePlanApiV1BillingDowngradePlanPostErrors[keyof DowngradePlanApiV1BillingDowngradePlanPostErrors];
type DowngradePlanApiV1BillingDowngradePlanPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: "success";
    };
};
type DowngradePlanApiV1BillingDowngradePlanPostResponse = DowngradePlanApiV1BillingDowngradePlanPostResponses[keyof DowngradePlanApiV1BillingDowngradePlanPostResponses];
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData = {
    body?: never;
    path?: never;
    query: {
        plan_name: "free" | "llama_parse" | "enterprise" | "unknown" | "free_contract" | "pro" | "enterprise_contract" | "enterprise_poc" | "free_v1" | "starter_v1" | "pro_v1";
        organization_id?: string | null;
    };
    url: "/api/v1/billing/create-intent-and-customer-session";
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError = CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors[keyof CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors];
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses = {
    /**
     * Successful Response
     */
    200: CreateIntentAndCustomerSessionResponse;
};
type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse = CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses[keyof CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses];
type MetronomeWebhookApiV1BillingMetronomeWebhookPostData = {
    body?: never;
    headers?: {
        "Metronome-Webhook-Signature"?: string;
        Date?: string;
    };
    path?: never;
    query?: never;
    url: "/api/v1/billing/metronome-webhook";
};
type MetronomeWebhookApiV1BillingMetronomeWebhookPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type MetronomeWebhookApiV1BillingMetronomeWebhookPostError = MetronomeWebhookApiV1BillingMetronomeWebhookPostErrors[keyof MetronomeWebhookApiV1BillingMetronomeWebhookPostErrors];
type MetronomeWebhookApiV1BillingMetronomeWebhookPostResponses = {
    /**
     * Successful Response
     */
    200: {
        [key: string]: "success";
    };
};
type MetronomeWebhookApiV1BillingMetronomeWebhookPostResponse = MetronomeWebhookApiV1BillingMetronomeWebhookPostResponses[keyof MetronomeWebhookApiV1BillingMetronomeWebhookPostResponses];
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData = {
    body?: never;
    path?: never;
    query: {
        organization_id: string;
        /**
         * The type of dashboard to get
         */
        dashboard_type?: MetronomeDashboardType;
    };
    url: "/api/v1/billing/metronome/dashboard";
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError = GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors[keyof GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors];
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses = {
    /**
     * Successful Response
     */
    200: MetronomeDashboardResponse;
};
type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse = GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses[keyof GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses];
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData = {
    body?: never;
    path?: never;
    query: {
        project_id: string;
    };
    url: "/api/v1/extraction/extraction-agents";
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError = ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors[keyof ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors];
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractAgent>;
};
type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse = ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses[keyof ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses];
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData = {
    body: ExtractAgentCreate;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents";
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError = CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors[keyof CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors];
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse = CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses[keyof CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses];
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData = {
    body: ExtractSchemaValidateRequest;
    path?: never;
    query?: never;
    url: "/api/v1/extraction/extraction-agents/schema/validation";
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError = ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors[keyof ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors];
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractSchemaValidateResponse;
};
type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse = ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses[keyof ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses];
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData = {
    body?: never;
    path: {
        name: string;
    };
    query?: {
        project_id?: string | null;
    };
    url: "/api/v1/extraction/extraction-agents/by-name/{name}";
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError = GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors[keyof GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors];
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse = GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses[keyof GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses];
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData = {
    body?: never;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError = DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors[keyof DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors];
type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData = {
    body?: never;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError = GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors[keyof GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors];
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse = GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses[keyof GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses];
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData = {
    body: ExtractAgentUpdate;
    path: {
        extraction_agent_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/extraction-agents/{extraction_agent_id}";
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError = UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors[keyof UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors];
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses = {
    /**
     * Successful Response
     */
    200: ExtractAgent;
};
type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse = UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses[keyof UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses];
type ListJobsApiV1ExtractionJobsGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
    };
    url: "/api/v1/extraction/jobs";
};
type ListJobsApiV1ExtractionJobsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListJobsApiV1ExtractionJobsGetError = ListJobsApiV1ExtractionJobsGetErrors[keyof ListJobsApiV1ExtractionJobsGetErrors];
type ListJobsApiV1ExtractionJobsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractJob>;
};
type ListJobsApiV1ExtractionJobsGetResponse = ListJobsApiV1ExtractionJobsGetResponses[keyof ListJobsApiV1ExtractionJobsGetResponses];
type RunJobApiV1ExtractionJobsPostData = {
    body: ExtractJobCreate;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs";
};
type RunJobApiV1ExtractionJobsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunJobApiV1ExtractionJobsPostError = RunJobApiV1ExtractionJobsPostErrors[keyof RunJobApiV1ExtractionJobsPostErrors];
type RunJobApiV1ExtractionJobsPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type RunJobApiV1ExtractionJobsPostResponse = RunJobApiV1ExtractionJobsPostResponses[keyof RunJobApiV1ExtractionJobsPostResponses];
type GetJobApiV1ExtractionJobsJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/jobs/{job_id}";
};
type GetJobApiV1ExtractionJobsJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiV1ExtractionJobsJobIdGetError = GetJobApiV1ExtractionJobsJobIdGetErrors[keyof GetJobApiV1ExtractionJobsJobIdGetErrors];
type GetJobApiV1ExtractionJobsJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type GetJobApiV1ExtractionJobsJobIdGetResponse = GetJobApiV1ExtractionJobsJobIdGetResponses[keyof GetJobApiV1ExtractionJobsJobIdGetResponses];
type RunJobTestUserApiV1ExtractionJobsTestPostData = {
    body: BodyRunJobTestUserApiV1ExtractionJobsTestPost;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs/test";
};
type RunJobTestUserApiV1ExtractionJobsTestPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunJobTestUserApiV1ExtractionJobsTestPostError = RunJobTestUserApiV1ExtractionJobsTestPostErrors[keyof RunJobTestUserApiV1ExtractionJobsTestPostErrors];
type RunJobTestUserApiV1ExtractionJobsTestPostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type RunJobTestUserApiV1ExtractionJobsTestPostResponse = RunJobTestUserApiV1ExtractionJobsTestPostResponses[keyof RunJobTestUserApiV1ExtractionJobsTestPostResponses];
type RunJobOnFileApiV1ExtractionJobsFilePostData = {
    body: BodyRunJobOnFileApiV1ExtractionJobsFilePost;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs/file";
};
type RunJobOnFileApiV1ExtractionJobsFilePostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunJobOnFileApiV1ExtractionJobsFilePostError = RunJobOnFileApiV1ExtractionJobsFilePostErrors[keyof RunJobOnFileApiV1ExtractionJobsFilePostErrors];
type RunJobOnFileApiV1ExtractionJobsFilePostResponses = {
    /**
     * Successful Response
     */
    200: ExtractJob;
};
type RunJobOnFileApiV1ExtractionJobsFilePostResponse = RunJobOnFileApiV1ExtractionJobsFilePostResponses[keyof RunJobOnFileApiV1ExtractionJobsFilePostResponses];
type RunBatchJobsApiV1ExtractionJobsBatchPostData = {
    body: ExtractJobCreateBatch;
    path?: never;
    query?: {
        from_ui?: boolean;
    };
    url: "/api/v1/extraction/jobs/batch";
};
type RunBatchJobsApiV1ExtractionJobsBatchPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RunBatchJobsApiV1ExtractionJobsBatchPostError = RunBatchJobsApiV1ExtractionJobsBatchPostErrors[keyof RunBatchJobsApiV1ExtractionJobsBatchPostErrors];
type RunBatchJobsApiV1ExtractionJobsBatchPostResponses = {
    /**
     * Successful Response
     */
    200: Array<ExtractJob>;
};
type RunBatchJobsApiV1ExtractionJobsBatchPostResponse = RunBatchJobsApiV1ExtractionJobsBatchPostResponses[keyof RunBatchJobsApiV1ExtractionJobsBatchPostResponses];
type GetJobResultApiV1ExtractionJobsJobIdResultGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/jobs/{job_id}/result";
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetError = GetJobResultApiV1ExtractionJobsJobIdResultGetErrors[keyof GetJobResultApiV1ExtractionJobsJobIdResultGetErrors];
type GetJobResultApiV1ExtractionJobsJobIdResultGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractResultset;
};
type GetJobResultApiV1ExtractionJobsJobIdResultGetResponse = GetJobResultApiV1ExtractionJobsJobIdResultGetResponses[keyof GetJobResultApiV1ExtractionJobsJobIdResultGetResponses];
type ListExtractRunsApiV1ExtractionRunsGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
        skip?: number;
        limit?: number;
    };
    url: "/api/v1/extraction/runs";
};
type ListExtractRunsApiV1ExtractionRunsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListExtractRunsApiV1ExtractionRunsGetError = ListExtractRunsApiV1ExtractionRunsGetErrors[keyof ListExtractRunsApiV1ExtractionRunsGetErrors];
type ListExtractRunsApiV1ExtractionRunsGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedExtractRunsResponse;
};
type ListExtractRunsApiV1ExtractionRunsGetResponse = ListExtractRunsApiV1ExtractionRunsGetResponses[keyof ListExtractRunsApiV1ExtractionRunsGetResponses];
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData = {
    body?: never;
    path?: never;
    query: {
        extraction_agent_id: string;
    };
    url: "/api/v1/extraction/runs/latest-from-ui";
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError = GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors[keyof GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors];
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun | null;
};
type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse = GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses[keyof GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses];
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/runs/by-job/{job_id}";
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError = GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors[keyof GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors];
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun;
};
type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse = GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses[keyof GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses];
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData = {
    body?: never;
    path: {
        run_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/runs/{run_id}";
};
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError = DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors[keyof DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors];
type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetRunApiV1ExtractionRunsRunIdGetData = {
    body?: never;
    path: {
        run_id: string;
    };
    query?: never;
    url: "/api/v1/extraction/runs/{run_id}";
};
type GetRunApiV1ExtractionRunsRunIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetRunApiV1ExtractionRunsRunIdGetError = GetRunApiV1ExtractionRunsRunIdGetErrors[keyof GetRunApiV1ExtractionRunsRunIdGetErrors];
type GetRunApiV1ExtractionRunsRunIdGetResponses = {
    /**
     * Successful Response
     */
    200: ExtractRun;
};
type GetRunApiV1ExtractionRunsRunIdGetResponse = GetRunApiV1ExtractionRunsRunIdGetResponses[keyof GetRunApiV1ExtractionRunsRunIdGetResponses];
type CreateReportApiV1ReportsPostData = {
    body: BodyCreateReportApiV1ReportsPost;
    path?: never;
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/";
};
type CreateReportApiV1ReportsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateReportApiV1ReportsPostError = CreateReportApiV1ReportsPostErrors[keyof CreateReportApiV1ReportsPostErrors];
type CreateReportApiV1ReportsPostResponses = {
    /**
     * Successful Response
     */
    200: ReportCreateResponse;
};
type CreateReportApiV1ReportsPostResponse = CreateReportApiV1ReportsPostResponses[keyof CreateReportApiV1ReportsPostResponses];
type ListReportsApiV1ReportsListGetData = {
    body?: never;
    path?: never;
    query?: {
        state?: ReportState | null;
        limit?: number;
        offset?: number;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/list";
};
type ListReportsApiV1ReportsListGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListReportsApiV1ReportsListGetError = ListReportsApiV1ReportsListGetErrors[keyof ListReportsApiV1ReportsListGetErrors];
type ListReportsApiV1ReportsListGetResponses = {
    /**
     * Successful Response
     */
    200: PaginatedReportResponse;
};
type ListReportsApiV1ReportsListGetResponse = ListReportsApiV1ReportsListGetResponses[keyof ListReportsApiV1ReportsListGetResponses];
type DeleteReportApiV1ReportsReportIdDeleteData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        /**
         * Whether to delete associated retriever and pipeline data
         */
        cascade_delete?: boolean;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}";
};
type DeleteReportApiV1ReportsReportIdDeleteErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type DeleteReportApiV1ReportsReportIdDeleteError = DeleteReportApiV1ReportsReportIdDeleteErrors[keyof DeleteReportApiV1ReportsReportIdDeleteErrors];
type DeleteReportApiV1ReportsReportIdDeleteResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetReportApiV1ReportsReportIdGetData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        version?: number | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}";
};
type GetReportApiV1ReportsReportIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetReportApiV1ReportsReportIdGetError = GetReportApiV1ReportsReportIdGetErrors[keyof GetReportApiV1ReportsReportIdGetErrors];
type GetReportApiV1ReportsReportIdGetResponses = {
    /**
     * Successful Response
     */
    200: ReportResponse;
};
type GetReportApiV1ReportsReportIdGetResponse = GetReportApiV1ReportsReportIdGetResponses[keyof GetReportApiV1ReportsReportIdGetResponses];
type UpdateReportApiV1ReportsReportIdPatchData = {
    body: ReportVersionPatch;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}";
};
type UpdateReportApiV1ReportsReportIdPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateReportApiV1ReportsReportIdPatchError = UpdateReportApiV1ReportsReportIdPatchErrors[keyof UpdateReportApiV1ReportsReportIdPatchErrors];
type UpdateReportApiV1ReportsReportIdPatchResponses = {
    /**
     * Successful Response
     */
    200: ReportResponse;
};
type UpdateReportApiV1ReportsReportIdPatchResponse = UpdateReportApiV1ReportsReportIdPatchResponses[keyof UpdateReportApiV1ReportsReportIdPatchResponses];
type UpdateReportMetadataApiV1ReportsReportIdPostData = {
    body: ReportNameUpdate;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}";
};
type UpdateReportMetadataApiV1ReportsReportIdPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateReportMetadataApiV1ReportsReportIdPostError = UpdateReportMetadataApiV1ReportsReportIdPostErrors[keyof UpdateReportMetadataApiV1ReportsReportIdPostErrors];
type UpdateReportMetadataApiV1ReportsReportIdPostResponses = {
    /**
     * Successful Response
     */
    200: ReportMetadata;
};
type UpdateReportMetadataApiV1ReportsReportIdPostResponse = UpdateReportMetadataApiV1ReportsReportIdPostResponses[keyof UpdateReportMetadataApiV1ReportsReportIdPostResponses];
type GetReportPlanApiV1ReportsReportIdPlanGetData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/plan";
};
type GetReportPlanApiV1ReportsReportIdPlanGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetReportPlanApiV1ReportsReportIdPlanGetError = GetReportPlanApiV1ReportsReportIdPlanGetErrors[keyof GetReportPlanApiV1ReportsReportIdPlanGetErrors];
type GetReportPlanApiV1ReportsReportIdPlanGetResponses = {
    /**
     * Successful Response
     */
    200: ReportPlan;
};
type GetReportPlanApiV1ReportsReportIdPlanGetResponse = GetReportPlanApiV1ReportsReportIdPlanGetResponses[keyof GetReportPlanApiV1ReportsReportIdPlanGetResponses];
type UpdateReportPlanApiV1ReportsReportIdPlanPatchData = {
    body?: ReportPlan | null;
    path: {
        report_id: string;
    };
    query: {
        action: "approve" | "reject" | "edit";
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/plan";
};
type UpdateReportPlanApiV1ReportsReportIdPlanPatchErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UpdateReportPlanApiV1ReportsReportIdPlanPatchError = UpdateReportPlanApiV1ReportsReportIdPlanPatchErrors[keyof UpdateReportPlanApiV1ReportsReportIdPlanPatchErrors];
type UpdateReportPlanApiV1ReportsReportIdPlanPatchResponses = {
    /**
     * Successful Response
     */
    200: ReportResponse;
};
type UpdateReportPlanApiV1ReportsReportIdPlanPatchResponse = UpdateReportPlanApiV1ReportsReportIdPlanPatchResponses[keyof UpdateReportPlanApiV1ReportsReportIdPlanPatchResponses];
type GetReportEventsApiV1ReportsReportIdEventsGetData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        after?: string | null;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/events";
};
type GetReportEventsApiV1ReportsReportIdEventsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetReportEventsApiV1ReportsReportIdEventsGetError = GetReportEventsApiV1ReportsReportIdEventsGetErrors[keyof GetReportEventsApiV1ReportsReportIdEventsGetErrors];
type GetReportEventsApiV1ReportsReportIdEventsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ReportEventItem>;
};
type GetReportEventsApiV1ReportsReportIdEventsGetResponse = GetReportEventsApiV1ReportsReportIdEventsGetResponses[keyof GetReportEventsApiV1ReportsReportIdEventsGetResponses];
type GetReportMetadataApiV1ReportsReportIdMetadataGetData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/metadata";
};
type GetReportMetadataApiV1ReportsReportIdMetadataGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetReportMetadataApiV1ReportsReportIdMetadataGetError = GetReportMetadataApiV1ReportsReportIdMetadataGetErrors[keyof GetReportMetadataApiV1ReportsReportIdMetadataGetErrors];
type GetReportMetadataApiV1ReportsReportIdMetadataGetResponses = {
    /**
     * Successful Response
     */
    200: ReportMetadata;
};
type GetReportMetadataApiV1ReportsReportIdMetadataGetResponse = GetReportMetadataApiV1ReportsReportIdMetadataGetResponses[keyof GetReportMetadataApiV1ReportsReportIdMetadataGetResponses];
type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostData = {
    body: EditSuggestionCreate;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/suggest_edits";
};
type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostError = SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostErrors[keyof SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostErrors];
type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponses = {
    /**
     * Successful Response
     */
    200: Array<EditSuggestion>;
};
type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponse = SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponses[keyof SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponses];
type RestartReportApiV1ReportsReportIdRestartPostData = {
    body?: never;
    path: {
        report_id: string;
    };
    query?: {
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/reports/{report_id}/restart";
};
type RestartReportApiV1ReportsReportIdRestartPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type RestartReportApiV1ReportsReportIdRestartPostError = RestartReportApiV1ReportsReportIdRestartPostErrors[keyof RestartReportApiV1ReportsReportIdRestartPostErrors];
type RestartReportApiV1ReportsReportIdRestartPostResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type ListBatchesApiV1BetaBatchesGetData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        offset?: number;
        project_id?: string | null;
        organization_id?: string | null;
    };
    url: "/api/v1/beta/batches";
};
type ListBatchesApiV1BetaBatchesGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ListBatchesApiV1BetaBatchesGetError = ListBatchesApiV1BetaBatchesGetErrors[keyof ListBatchesApiV1BetaBatchesGetErrors];
type ListBatchesApiV1BetaBatchesGetResponses = {
    /**
     * Successful Response
     */
    200: BatchPaginatedList;
};
type ListBatchesApiV1BetaBatchesGetResponse = ListBatchesApiV1BetaBatchesGetResponses[keyof ListBatchesApiV1BetaBatchesGetResponses];
type CreateBatchApiV1BetaBatchesPostData = {
    body: BatchCreate;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/v1/beta/batches";
};
type CreateBatchApiV1BetaBatchesPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type CreateBatchApiV1BetaBatchesPostError = CreateBatchApiV1BetaBatchesPostErrors[keyof CreateBatchApiV1BetaBatchesPostErrors];
type CreateBatchApiV1BetaBatchesPostResponses = {
    /**
     * Successful Response
     */
    200: Batch;
};
type CreateBatchApiV1BetaBatchesPostResponse = CreateBatchApiV1BetaBatchesPostResponses[keyof CreateBatchApiV1BetaBatchesPostResponses];
type GetBatchApiV1BetaBatchesBatchIdGetData = {
    body?: never;
    path: {
        batch_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/v1/beta/batches/{batch_id}";
};
type GetBatchApiV1BetaBatchesBatchIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetBatchApiV1BetaBatchesBatchIdGetError = GetBatchApiV1BetaBatchesBatchIdGetErrors[keyof GetBatchApiV1BetaBatchesBatchIdGetErrors];
type GetBatchApiV1BetaBatchesBatchIdGetResponses = {
    /**
     * Successful Response
     */
    200: BatchPublicOutput;
};
type GetBatchApiV1BetaBatchesBatchIdGetResponse = GetBatchApiV1BetaBatchesBatchIdGetResponses[keyof GetBatchApiV1BetaBatchesBatchIdGetResponses];
type GetJobImageResultApiParsingJobJobIdResultImageNameGetData = {
    body?: never;
    path: {
        job_id: string;
        name: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/image/{name}";
};
type GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobImageResultApiParsingJobJobIdResultImageNameGetError = GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors[keyof GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors];
type GetJobImageResultApiParsingJobJobIdResultImageNameGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/parsing/supported_file_extensions";
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses = {
    /**
     * Successful Response
     */
    200: Array<LlamaParseSupportedFileExtensions>;
};
type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse = GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses[keyof GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses];
type ScreenshotApiParsingScreenshotPostData = {
    body?: BodyScreenshotApiParsingScreenshotPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/parsing/screenshot";
};
type ScreenshotApiParsingScreenshotPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type ScreenshotApiParsingScreenshotPostError = ScreenshotApiParsingScreenshotPostErrors[keyof ScreenshotApiParsingScreenshotPostErrors];
type ScreenshotApiParsingScreenshotPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type ScreenshotApiParsingScreenshotPostResponse = ScreenshotApiParsingScreenshotPostResponses[keyof ScreenshotApiParsingScreenshotPostResponses];
type UploadFileApiParsingUploadPostData = {
    body?: BodyUploadFileApiParsingUploadPost;
    path?: never;
    query?: {
        organization_id?: string | null;
        project_id?: string | null;
    };
    url: "/api/parsing/upload";
};
type UploadFileApiParsingUploadPostErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type UploadFileApiParsingUploadPostError = UploadFileApiParsingUploadPostErrors[keyof UploadFileApiParsingUploadPostErrors];
type UploadFileApiParsingUploadPostResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type UploadFileApiParsingUploadPostResponse = UploadFileApiParsingUploadPostResponses[keyof UploadFileApiParsingUploadPostResponses];
type GetJobApiParsingJobJobIdGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}";
};
type GetJobApiParsingJobJobIdGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobApiParsingJobJobIdGetError = GetJobApiParsingJobJobIdGetErrors[keyof GetJobApiParsingJobJobIdGetErrors];
type GetJobApiParsingJobJobIdGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJob;
};
type GetJobApiParsingJobJobIdGetResponse = GetJobApiParsingJobJobIdGetResponses[keyof GetJobApiParsingJobJobIdGetResponses];
type GetJobParametersApiParsingJobJobIdParametersGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/parameters";
};
type GetJobParametersApiParsingJobJobIdParametersGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobParametersApiParsingJobJobIdParametersGetError = GetJobParametersApiParsingJobJobIdParametersGetErrors[keyof GetJobParametersApiParsingJobJobIdParametersGetErrors];
type GetJobParametersApiParsingJobJobIdParametersGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/details";
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetError = GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors[keyof GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors];
type GetParsingJobDetailsApiParsingJobJobIdDetailsGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/text";
};
type GetJobTextResultApiParsingJobJobIdResultTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetError = GetJobTextResultApiParsingJobJobIdResultTextGetErrors[keyof GetJobTextResultApiParsingJobJobIdResultTextGetErrors];
type GetJobTextResultApiParsingJobJobIdResultTextGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobTextResult;
};
type GetJobTextResultApiParsingJobJobIdResultTextGetResponse = GetJobTextResultApiParsingJobJobIdResultTextGetResponses[keyof GetJobTextResultApiParsingJobJobIdResultTextGetResponses];
type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/text";
};
type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetError = GetJobRawTextResultApiParsingJobJobIdResultRawTextGetErrors[keyof GetJobRawTextResultApiParsingJobJobIdResultRawTextGetErrors];
type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/pdf";
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetError = GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors[keyof GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors];
type GetJobRawTextResultApiParsingJobJobIdResultPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/pdf";
};
type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetError = GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetErrors[keyof GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetErrors];
type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/structured";
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError = GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors[keyof GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors];
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobStructuredResult;
};
type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse = GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses[keyof GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses];
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/structured";
};
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError = GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors[keyof GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors];
type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/xlsx";
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError = GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors[keyof GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors];
type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/xlsx";
};
type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetError = GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetErrors[keyof GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetErrors];
type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/markdown";
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetError = GetJobResultApiParsingJobJobIdResultMarkdownGetErrors[keyof GetJobResultApiParsingJobJobIdResultMarkdownGetErrors];
type GetJobResultApiParsingJobJobIdResultMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobMarkdownResult;
};
type GetJobResultApiParsingJobJobIdResultMarkdownGetResponse = GetJobResultApiParsingJobJobIdResultMarkdownGetResponses[keyof GetJobResultApiParsingJobJobIdResultMarkdownGetResponses];
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/markdown";
};
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError = GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors[keyof GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors];
type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: {
        organization_id?: string | null;
    };
    url: "/api/parsing/job/{job_id}/result/json";
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetError = GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors[keyof GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors];
type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses = {
    /**
     * Successful Response
     */
    200: ParsingJobJsonResult;
};
type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse = GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses[keyof GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses];
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData = {
    body?: never;
    path: {
        job_id: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/result/raw/json";
};
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError = GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors[keyof GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors];
type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetResponses = {
    /**
     * Successful Response
     */
    200: unknown;
};
type GetParsingHistoryResultApiParsingHistoryGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: "/api/parsing/history";
};
type GetParsingHistoryResultApiParsingHistoryGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GetParsingHistoryResultApiParsingHistoryGetError = GetParsingHistoryResultApiParsingHistoryGetErrors[keyof GetParsingHistoryResultApiParsingHistoryGetErrors];
type GetParsingHistoryResultApiParsingHistoryGetResponses = {
    /**
     * Successful Response
     */
    200: Array<ParsingHistoryItem>;
};
type GetParsingHistoryResultApiParsingHistoryGetResponse = GetParsingHistoryResultApiParsingHistoryGetResponses[keyof GetParsingHistoryResultApiParsingHistoryGetResponses];
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData = {
    body?: never;
    path: {
        job_id: string;
        filename: string;
    };
    query?: never;
    url: "/api/parsing/job/{job_id}/read/{filename}";
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors = {
    /**
     * Validation Error
     */
    422: HttpValidationError;
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError = GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors[keyof GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors];
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses = {
    /**
     * Successful Response
     */
    200: PresignedUrl;
};
type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse = GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses[keyof GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses];
type ClientOptions = {
    baseUrl: `${string}://${string}` | (string & {});
};

declare const client: _hey_api_client_fetch.Client;

type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options$1<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};
/**
 * List Keys
 * List API Keys for a user.
 */
declare const listKeysApiV1ApiKeysGet: <ThrowOnError extends boolean = false>(options?: Options<ListKeysApiV1ApiKeysGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey[], HttpValidationError, ThrowOnError>;
/**
 * Generate Key
 * Generate a new API Key.
 */
declare const generateKeyApiV1ApiKeysPost: <ThrowOnError extends boolean = false>(options: Options<GenerateKeyApiV1ApiKeysPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey, HttpValidationError, ThrowOnError>;
/**
 * Delete Api Key
 * Delete an API Key by ID.
 */
declare const deleteApiKeyApiV1ApiKeysApiKeyIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Existing Api Key
 * Update name of an existing API Key.
 */
declare const updateExistingApiKeyApiV1ApiKeysApiKeyIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ApiKey, HttpValidationError, ThrowOnError>;
/**
 * Validate Embedding Connection
 * Validate an embedding connection.
 *
 * Args:
 * embedding_config: The embedding configuration to validate.
 * pipeline_id: If provided, the embedding connection will be validated for the pipeline.
 * user: The user to validate the embedding connection for.
 * db: The database session.
 *
 * Returns:
 * A BaseConnectionValidation object indicating the result of the validation.
 */
declare const validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * Validate Data Source Connection
 * Validate a data source connection.
 */
declare const validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * Validate Data Sink Connection
 * Validate a data sink connection.
 */
declare const validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost: <ThrowOnError extends boolean = false>(options: Options<ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BaseConnectionValidation, HttpValidationError, ThrowOnError>;
/**
 * List Data Sinks
 * List data sinks for a given project.
 */
declare const listDataSinksApiV1DataSinksGet: <ThrowOnError extends boolean = false>(options?: Options<ListDataSinksApiV1DataSinksGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Data Sink
 * Create a new data sink.
 */
declare const createDataSinkApiV1DataSinksPost: <ThrowOnError extends boolean = false>(options: Options<CreateDataSinkApiV1DataSinksPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Data Sink
 * Upserts a data sink.
 * Updates if a data sink with the same name and project_id already exists. Otherwise, creates a new data sink.
 */
declare const upsertDataSinkApiV1DataSinksPut: <ThrowOnError extends boolean = false>(options: Options<UpsertDataSinkApiV1DataSinksPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Data Sink
 * Delete a data sink by ID.
 */
declare const deleteDataSinkApiV1DataSinksDataSinkIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Data Sink
 * Get a data sink by ID.
 */
declare const getDataSinkApiV1DataSinksDataSinkIdGet: <ThrowOnError extends boolean = false>(options: Options<GetDataSinkApiV1DataSinksDataSinkIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Data Sink
 * Update a data sink by ID.
 */
declare const updateDataSinkApiV1DataSinksDataSinkIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateDataSinkApiV1DataSinksDataSinkIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSinkReadable, HttpValidationError, ThrowOnError>;
/**
 * List Data Sources
 * List data sources for a given project.
 * If project_id is not provided, uses the default project.
 */
declare const listDataSourcesApiV1DataSourcesGet: <ThrowOnError extends boolean = false>(options?: Options<ListDataSourcesApiV1DataSourcesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Data Source
 * Create a new data source.
 */
declare const createDataSourceApiV1DataSourcesPost: <ThrowOnError extends boolean = false>(options: Options<CreateDataSourceApiV1DataSourcesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Data Source
 * Upserts a data source.
 * Updates if a data source with the same name and project_id already exists. Otherwise, creates a new data source.
 */
declare const upsertDataSourceApiV1DataSourcesPut: <ThrowOnError extends boolean = false>(options: Options<UpsertDataSourceApiV1DataSourcesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Data Source
 * Delete a data source by ID.
 */
declare const deleteDataSourceApiV1DataSourcesDataSourceIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Data Source
 * Get a data source by ID.
 */
declare const getDataSourceApiV1DataSourcesDataSourceIdGet: <ThrowOnError extends boolean = false>(options: Options<GetDataSourceApiV1DataSourcesDataSourceIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Data Source
 * Update a data source by ID.
 */
declare const updateDataSourceApiV1DataSourcesDataSourceIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateDataSourceApiV1DataSourcesDataSourceIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<DataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * List Embedding Model Configs
 */
declare const listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet: <ThrowOnError extends boolean = false>(options?: Options<ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig[], HttpValidationError, ThrowOnError>;
/**
 * Create a new Embedding Model Configuration
 * Create a new embedding model configuration within a specified project.
 */
declare const createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost: <ThrowOnError extends boolean = false>(options: Options<CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * Upsert Embedding Model Config
 * Upserts an embedding model config.
 * Updates if an embedding model config with the same name and project_id already exists. Otherwise, creates a new embedding model config.
 */
declare const upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * Delete Embedding Model Config
 * Delete an embedding model config by ID.
 */
declare const deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Embedding Model Config
 * Update an embedding model config by ID.
 */
declare const updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EmbeddingModelConfig, HttpValidationError, ThrowOnError>;
/**
 * List Organizations
 * List organizations for a user.
 */
declare const listOrganizationsApiV1OrganizationsGet: <ThrowOnError extends boolean = false>(options?: Options<ListOrganizationsApiV1OrganizationsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization[], HttpValidationError, ThrowOnError>;
/**
 * Create Organization
 * Create a new organization.
 */
declare const createOrganizationApiV1OrganizationsPost: <ThrowOnError extends boolean = false>(options: Options<CreateOrganizationApiV1OrganizationsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Upsert Organization
 * Upsert a new organization.
 */
declare const upsertOrganizationApiV1OrganizationsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertOrganizationApiV1OrganizationsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Get Default Organization
 * Get the default organization for the user.
 */
declare const getDefaultOrganizationApiV1OrganizationsDefaultGet: <ThrowOnError extends boolean = false>(options?: Options<GetDefaultOrganizationApiV1OrganizationsDefaultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Set Default Organization
 * Set the default organization for the user.
 */
declare const setDefaultOrganizationApiV1OrganizationsDefaultPut: <ThrowOnError extends boolean = false>(options: Options<SetDefaultOrganizationApiV1OrganizationsDefaultPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Delete Organization
 * Delete an organization by ID.
 */
declare const deleteOrganizationApiV1OrganizationsOrganizationIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Organization
 * Get an organization by ID.
 */
declare const getOrganizationApiV1OrganizationsOrganizationIdGet: <ThrowOnError extends boolean = false>(options: Options<GetOrganizationApiV1OrganizationsOrganizationIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Update Organization
 * Update an existing organization.
 */
declare const updateOrganizationApiV1OrganizationsOrganizationIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateOrganizationApiV1OrganizationsOrganizationIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Organization, HttpValidationError, ThrowOnError>;
/**
 * Get Organization Usage
 * Get usage for a project
 */
declare const getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet: <ThrowOnError extends boolean = false>(options: Options<GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UsageAndPlan, HttpValidationError, ThrowOnError>;
/**
 * List Organization Users
 * Get all users in an organization.
 */
declare const listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet: <ThrowOnError extends boolean = false>(options: Options<ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganization[], HttpValidationError, ThrowOnError>;
/**
 * Add Users To Organization
 * Add a user to an organization.
 */
declare const addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut: <ThrowOnError extends boolean = false>(options: Options<AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganization[], HttpValidationError, ThrowOnError>;
/**
 * Remove Users From Organization
 * Remove users from an organization by email.
 */
declare const removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete: <ThrowOnError extends boolean = false>(options: Options<RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Batch Remove Users From Organization
 * Remove a batch of users from an organization.
 */
declare const batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut: <ThrowOnError extends boolean = false>(options: Options<BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * List Roles
 * List all roles in an organization.
 */
declare const listRolesApiV1OrganizationsOrganizationIdRolesGet: <ThrowOnError extends boolean = false>(options: Options<ListRolesApiV1OrganizationsOrganizationIdRolesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Role[], HttpValidationError, ThrowOnError>;
/**
 * Get User Role
 * Get the role of a user in an organization.
 */
declare const getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet: <ThrowOnError extends boolean = false>(options: Options<GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganizationRole | null, HttpValidationError, ThrowOnError>;
/**
 * Assign Role To User In Organization
 * Assign a role to a user in an organization.
 */
declare const assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut: <ThrowOnError extends boolean = false>(options: Options<AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UserOrganizationRole, HttpValidationError, ThrowOnError>;
/**
 * List Projects By User
 * List all projects for a user in an organization.
 */
declare const listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet: <ThrowOnError extends boolean = false>(options: Options<ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project[], HttpValidationError, ThrowOnError>;
/**
 * Add User To Project
 * Add a user to a project.
 */
declare const addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut: <ThrowOnError extends boolean = false>(options: Options<AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Remove User From Project
 * Remove a user from a project.
 */
declare const removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete: <ThrowOnError extends boolean = false>(options: Options<RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Projects
 * List projects or get one by name
 */
declare const listProjectsApiV1ProjectsGet: <ThrowOnError extends boolean = false>(options?: Options<ListProjectsApiV1ProjectsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project[], HttpValidationError, ThrowOnError>;
/**
 * Create Project
 * Create a new project.
 */
declare const createProjectApiV1ProjectsPost: <ThrowOnError extends boolean = false>(options: Options<CreateProjectApiV1ProjectsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Upsert Project
 * Upsert a project.
 * Updates if a project with the same name already exists. Otherwise, creates a new project.
 */
declare const upsertProjectApiV1ProjectsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertProjectApiV1ProjectsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Delete Project
 * Delete a project by ID.
 */
declare const deleteProjectApiV1ProjectsProjectIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteProjectApiV1ProjectsProjectIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Project
 * Get a project by ID.
 */
declare const getProjectApiV1ProjectsProjectIdGet: <ThrowOnError extends boolean = false>(options: Options<GetProjectApiV1ProjectsProjectIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Update Existing Project
 * Update an existing project.
 */
declare const updateExistingProjectApiV1ProjectsProjectIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExistingProjectApiV1ProjectsProjectIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Get Current Project
 * Get the current project.
 */
declare const getCurrentProjectApiV1ProjectsCurrentGet: <ThrowOnError extends boolean = false>(options?: Options<GetCurrentProjectApiV1ProjectsCurrentGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Project, HttpValidationError, ThrowOnError>;
/**
 * Get Project Usage
 * Get usage for a project
 */
declare const getProjectUsageApiV1ProjectsProjectIdUsageGet: <ThrowOnError extends boolean = false>(options: Options<GetProjectUsageApiV1ProjectsProjectIdUsageGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<UsageAndPlan, HttpValidationError, ThrowOnError>;
/**
 * Delete File
 * Delete the file from S3.
 */
declare const deleteFileApiV1FilesIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteFileApiV1FilesIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get File
 * Read File metadata objects.
 */
declare const getFileApiV1FilesIdGet: <ThrowOnError extends boolean = false>(options: Options<GetFileApiV1FilesIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * List Files
 * Read File metadata objects.
 */
declare const listFilesApiV1FilesGet: <ThrowOnError extends boolean = false>(options?: Options<ListFilesApiV1FilesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File[], HttpValidationError, ThrowOnError>;
/**
 * Upload File
 * Upload a file to S3.
 */
declare const uploadFileApiV1FilesPost: <ThrowOnError extends boolean = false>(options: Options<UploadFileApiV1FilesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Create a presigned url for uploading a file.
 */
declare const generatePresignedUrlApiV1FilesPut: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiV1FilesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Sync Files
 * Sync Files API against file contents uploaded via S3 presigned urls.
 */
declare const syncFilesApiV1FilesSyncPut: <ThrowOnError extends boolean = false>(options?: Options<SyncFilesApiV1FilesSyncPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File[], HttpValidationError, ThrowOnError>;
/**
 * Upload File From Url
 * Upload a file to the project from a URL.
 *
 * If name is ommitted in the request payload, the file name will be
 * extracted from the response Content-Disposition header if available
 * or otherwise it will be derived from the URL path.
 *
 * If providing the name in the request payload, always suffix the
 * file extension in the name if available.
 */
declare const uploadFileFromUrlApiV1FilesUploadFromUrlPut: <ThrowOnError extends boolean = false>(options: Options<UploadFileFromUrlApiV1FilesUploadFromUrlPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<File, HttpValidationError, ThrowOnError>;
/**
 * Read File Content
 * Returns a presigned url to read the file content.
 */
declare const readFileContentApiV1FilesIdContentGet: <ThrowOnError extends boolean = false>(options: Options<ReadFileContentApiV1FilesIdContentGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * List File Page Screenshots
 * List metadata for all screenshots of pages from a file.
 */
declare const listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageScreenshotMetadata[], HttpValidationError, ThrowOnError>;
/**
 * Get File Page Screenshot
 * Get screenshot of a page from a file.
 */
declare const getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet: <ThrowOnError extends boolean = false>(options: Options<GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List File Pages Figures
 */
declare const listFilePagesFiguresApiV1FilesIdPageFiguresGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePagesFiguresApiV1FilesIdPageFiguresGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageFigureMetadata[], HttpValidationError, ThrowOnError>;
/**
 * List File Page Figures
 */
declare const listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet: <ThrowOnError extends boolean = false>(options: Options<ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PageFigureMetadata[], HttpValidationError, ThrowOnError>;
/**
 * Get File Page Figure
 */
declare const getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet: <ThrowOnError extends boolean = false>(options: Options<GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Search Pipelines
 * Search for pipelines by various parameters.
 */
declare const searchPipelinesApiV1PipelinesGet: <ThrowOnError extends boolean = false>(options?: Options<SearchPipelinesApiV1PipelinesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable[], HttpValidationError, ThrowOnError>;
/**
 * Create Pipeline
 * Create a new pipeline for a project.
 */
declare const createPipelineApiV1PipelinesPost: <ThrowOnError extends boolean = false>(options: Options<CreatePipelineApiV1PipelinesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Upsert Pipeline
 * Upsert a pipeline for a project.
 * Updates if a pipeline with the same name and project_id already exists. Otherwise, creates a new pipeline.
 */
declare const upsertPipelineApiV1PipelinesPut: <ThrowOnError extends boolean = false>(options: Options<UpsertPipelineApiV1PipelinesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline
 * Delete a pipeline by ID.
 */
declare const deletePipelineApiV1PipelinesPipelineIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineApiV1PipelinesPipelineIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline
 * Get a pipeline by ID for a given project.
 */
declare const getPipelineApiV1PipelinesPipelineIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineApiV1PipelinesPipelineIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Update Existing Pipeline
 * Update an existing pipeline for a project.
 */
declare const updateExistingPipelineApiV1PipelinesPipelineIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExistingPipelineApiV1PipelinesPipelineIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Status
 * Get the status of a pipeline by ID.
 */
declare const getPipelineStatusApiV1PipelinesPipelineIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Sync Pipeline
 * Run ingestion for the pipeline by incrementally updating the data-sink with upstream changes from data-sources & files.
 */
declare const syncPipelineApiV1PipelinesPipelineIdSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncPipelineApiV1PipelinesPipelineIdSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Cancel Pipeline Sync
 */
declare const cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost: <ThrowOnError extends boolean = false>(options: Options<CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Copy Pipeline
 * Copy a pipeline by ID.
 */
declare const copyPipelineApiV1PipelinesPipelineIdCopyPost: <ThrowOnError extends boolean = false>(options: Options<CopyPipelineApiV1PipelinesPipelineIdCopyPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * List Pipeline Files
 * Get files for a pipeline.
 */
declare const listPipelineFilesApiV1PipelinesPipelineIdFilesGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile[], HttpValidationError, ThrowOnError>;
/**
 * Add Files To Pipeline Api
 * Add files to a pipeline.
 */
declare const addFilesToPipelineApiApiV1PipelinesPipelineIdFilesPut: <ThrowOnError extends boolean = false>(options: Options<AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile[], HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * List Pipeline Files2
 * Get files for a pipeline.
 */
declare const listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get: <ThrowOnError extends boolean = false>(options: Options<ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedListPipelineFilesResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline File Status Counts
 * Get files for a pipeline.
 */
declare const getPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<FileCountByStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline File Status
 * Get status of a file for a pipeline.
 */
declare const getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline File
 * Delete a file from a pipeline.
 */
declare const deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Pipeline File
 * Update a file for a pipeline.
 */
declare const updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineFile, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Files Metadata
 * Delete metadata for all files in a pipeline.
 */
declare const deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Import Pipeline Metadata
 * Import metadata for a pipeline.
 */
declare const importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut: <ThrowOnError extends boolean = false>(options: Options<ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: string;
}, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Data Sources
 * Get data sources for a pipeline.
 */
declare const listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Add Data Sources To Pipeline
 * Add data sources to a pipeline.
 */
declare const addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut: <ThrowOnError extends boolean = false>(options: Options<AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable[], HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Data Source
 * Delete a data source from a pipeline.
 */
declare const deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Update Pipeline Data Source
 * Update the configuration of a data source in a pipeline.
 */
declare const updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDataSourceReadable, HttpValidationError, ThrowOnError>;
/**
 * Sync Pipeline Data Source
 * Run ingestion for the pipeline data source by incrementally updating the data-sink with upstream changes from data-source.
 */
declare const syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost: <ThrowOnError extends boolean = false>(options: Options<SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineReadable, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Data Source Status
 * Get the status of a data source for a pipeline.
 */
declare const getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * Run Search
 * Get retrieval results for a managed pipeline and a query
 */
declare const runSearchApiV1PipelinesPipelineIdRetrievePost: <ThrowOnError extends boolean = false>(options: Options<RunSearchApiV1PipelinesPipelineIdRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<RetrieveResults, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Jobs
 * Get jobs for a pipeline.
 */
declare const listPipelineJobsApiV1PipelinesPipelineIdJobsGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDeployment[], HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Job
 * Get a job for a pipeline.
 */
declare const getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PipelineDeployment, HttpValidationError, ThrowOnError>;
/**
 * Get Playground Session
 * Get a playground session for a user and pipeline.
 */
declare const getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet: <ThrowOnError extends boolean = false>(options: Options<GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PlaygroundSession, HttpValidationError, ThrowOnError>;
/**
 * Chat
 * Make a retrieval query + chat completion for a managed pipeline.
 */
declare const chatApiV1PipelinesPipelineIdChatPost: <ThrowOnError extends boolean = false>(options: Options<ChatApiV1PipelinesPipelineIdChatPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
declare const listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Create Batch Pipeline Documents
 * Batch create documents for a pipeline.
 */
declare const createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost: <ThrowOnError extends boolean = false>(options: Options<CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Upsert Batch Pipeline Documents
 * Batch create or update a document for a pipeline.
 */
declare const upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut: <ThrowOnError extends boolean = false>(options: Options<UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument[], HttpValidationError, ThrowOnError>;
/**
 * Paginated List Pipeline Documents
 * Return a list of documents for a pipeline.
 */
declare const paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet: <ThrowOnError extends boolean = false>(options: Options<PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedListCloudDocumentsResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete Pipeline Document
 * Delete a document from a pipeline.
 * Initiates an async job that will:
 * 1. Delete vectors from the vector store
 * 2. Delete the document from MongoDB after vectors are successfully deleted
 */
declare const deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Document
 * Return a single document for a pipeline.
 */
declare const getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CloudDocument, HttpValidationError, ThrowOnError>;
/**
 * Get Pipeline Document Status
 * Return a single document for a pipeline.
 */
declare const getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet: <ThrowOnError extends boolean = false>(options: Options<GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ManagedIngestionStatusResponse, HttpValidationError, ThrowOnError>;
/**
 * List Pipeline Document Chunks
 * Return a list of chunks for a pipeline document.
 */
declare const listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet: <ThrowOnError extends boolean = false>(options: Options<ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<TextNode[], HttpValidationError, ThrowOnError>;
/**
 * List Retrievers
 * List Retrievers for a project.
 */
declare const listRetrieversApiV1RetrieversGet: <ThrowOnError extends boolean = false>(options?: Options<ListRetrieversApiV1RetrieversGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever[], HttpValidationError, ThrowOnError>;
/**
 * Create Retriever
 * Create a new Retriever.
 */
declare const createRetrieverApiV1RetrieversPost: <ThrowOnError extends boolean = false>(options: Options<CreateRetrieverApiV1RetrieversPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Upsert Retriever
 * Upsert a new Retriever.
 */
declare const upsertRetrieverApiV1RetrieversPut: <ThrowOnError extends boolean = false>(options: Options<UpsertRetrieverApiV1RetrieversPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Delete Retriever
 * Delete a Retriever by ID.
 */
declare const deleteRetrieverApiV1RetrieversRetrieverIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<void, HttpValidationError, ThrowOnError>;
/**
 * Get Retriever
 * Get a Retriever by ID.
 */
declare const getRetrieverApiV1RetrieversRetrieverIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRetrieverApiV1RetrieversRetrieverIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Update Retriever
 * Update an existing Retriever.
 */
declare const updateRetrieverApiV1RetrieversRetrieverIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateRetrieverApiV1RetrieversRetrieverIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Retriever, HttpValidationError, ThrowOnError>;
/**
 * Retrieve
 * Retrieve data using a Retriever.
 */
declare const retrieveApiV1RetrieversRetrieverIdRetrievePost: <ThrowOnError extends boolean = false>(options: Options<RetrieveApiV1RetrieversRetrieverIdRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CompositeRetrievalResult, HttpValidationError, ThrowOnError>;
/**
 * Direct Retrieve
 * Retrieve data using specified pipelines without creating a persistent retriever.
 */
declare const directRetrieveApiV1RetrieversRetrievePost: <ThrowOnError extends boolean = false>(options: Options<DirectRetrieveApiV1RetrieversRetrievePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CompositeRetrievalResult, HttpValidationError, ThrowOnError>;
/**
 * Get Jobs
 * Get jobs for a project.
 *
 * Note:
 * The include_usage_metrics parameter is deprecated and will be removed in a future version.
 * We've moved to usage v2 and this parameter will no longer return meaningful data.
 */
declare const getJobsApiV1JobsGet: <ThrowOnError extends boolean = false>(options?: Options<GetJobsApiV1JobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedJobsHistoryWithMetrics, HttpValidationError, ThrowOnError>;
/**
 * List Supported Models
 * List supported models.
 */
declare const listSupportedModelsApiV1EvalsModelsGet: <ThrowOnError extends boolean = false>(options?: Options<ListSupportedModelsApiV1EvalsModelsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<SupportedLlmModel[], HttpValidationError, ThrowOnError>;
/**
 * Get Job Image Result
 * Get a job by id
 */
declare const getJobImageResultApiV1ParsingJobJobIdResultImageNameGet: <ThrowOnError extends boolean = false>(options: Options<GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
declare const getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet: <ThrowOnError extends boolean = false>(options?: Options<GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<LlamaParseSupportedFileExtensions[], unknown, ThrowOnError>;
/**
 * Screenshot
 */
declare const screenshotApiV1ParsingScreenshotPost: <ThrowOnError extends boolean = false>(options?: Options<ScreenshotApiV1ParsingScreenshotPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Upload File
 */
declare const uploadFileApiV1ParsingUploadPost: <ThrowOnError extends boolean = false>(options?: Options<UploadFileApiV1ParsingUploadPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 * Get a job by id
 */
declare const getJobApiV1ParsingJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiV1ParsingJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job Parameters
 * Get a job by id
 */
declare const getJobParametersApiV1ParsingJobJobIdParametersGet: <ThrowOnError extends boolean = false>(options: Options<GetJobParametersApiV1ParsingJobJobIdParametersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Parsing Job Details
 * Get a job by id
 */
declare const getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet: <ThrowOnError extends boolean = false>(options: Options<GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobTextResultApiV1ParsingJobJobIdResultTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobTextResultApiV1ParsingJobJobIdResultTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobTextResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiV1ParsingJobJobIdResultRawTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobStructuredResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
declare const getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobResultApiV1ParsingJobJobIdResultMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobMarkdownResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Md Result
 * Get a job by id
 */
declare const getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobJsonResultApiV1ParsingJobJobIdResultJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobJsonResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Raw Result
 * Get a job by id
 */
declare const getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
declare const getParsingHistoryResultApiV1ParsingHistoryGet: <ThrowOnError extends boolean = false>(options?: Options<GetParsingHistoryResultApiV1ParsingHistoryGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingHistoryItem[], HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
declare const generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;
/**
 * Get Chat Apps
 */
declare const getChatAppsApiV1AppsGet: <ThrowOnError extends boolean = false>(options?: Options<GetChatAppsApiV1AppsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatAppResponse[], HttpValidationError, ThrowOnError>;
/**
 * Create Chat App
 * Create a new chat app.
 */
declare const createChatAppApiV1AppsPost: <ThrowOnError extends boolean = false>(options: Options<CreateChatAppApiV1AppsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Delete Chat App
 */
declare const deleteChatAppApiV1AppsIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteChatAppApiV1AppsIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Chat App
 * Get a chat app by ID.
 */
declare const getChatAppApiV1AppsIdGet: <ThrowOnError extends boolean = false>(options: Options<GetChatAppApiV1AppsIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Update Chat App
 * Update a chat app.
 */
declare const updateChatAppApiV1AppsIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateChatAppApiV1AppsIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ChatApp, HttpValidationError, ThrowOnError>;
/**
 * Chat With Chat App
 * Chat with a chat app.
 */
declare const chatWithChatAppApiV1AppsIdChatPost: <ThrowOnError extends boolean = false>(options: Options<ChatWithChatAppApiV1AppsIdChatPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Create Checkout Session
 * Create a new checkout session.
 */
declare const createCheckoutSessionApiV1BillingCheckoutSessionPost: <ThrowOnError extends boolean = false>(options: Options<CreateCheckoutSessionApiV1BillingCheckoutSessionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<string, HttpValidationError, ThrowOnError>;
/**
 * Create Customer Portal Session
 * Create a new customer portal session.
 */
declare const createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost: <ThrowOnError extends boolean = false>(options: Options<CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<string, HttpValidationError, ThrowOnError>;
/**
 * Stripe Webhook
 * Stripe webhook endpoint.
 */
declare const stripeWebhookApiV1BillingWebhookPost: <ThrowOnError extends boolean = false>(options?: Options<StripeWebhookApiV1BillingWebhookPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: "success";
}, HttpValidationError, ThrowOnError>;
/**
 * Downgrade Plan
 */
declare const downgradePlanApiV1BillingDowngradePlanPost: <ThrowOnError extends boolean = false>(options: Options<DowngradePlanApiV1BillingDowngradePlanPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: "success";
}, HttpValidationError, ThrowOnError>;
/**
 * Create Intent And Customer Session
 * Create a new setup intent and and a customer session.
 *
 * See https://docs.stripe.com/payments/existing-customers?platform=web&ui=elements
 */
declare const createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost: <ThrowOnError extends boolean = false>(options: Options<CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<CreateIntentAndCustomerSessionResponse, HttpValidationError, ThrowOnError>;
/**
 * Metronome Webhook
 * Metronome webhook endpoint.
 */
declare const metronomeWebhookApiV1BillingMetronomeWebhookPost: <ThrowOnError extends boolean = false>(options?: Options<MetronomeWebhookApiV1BillingMetronomeWebhookPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<{
    [key: string]: "success";
}, HttpValidationError, ThrowOnError>;
/**
 * Get Metronome Dashboard
 * Get the invoices for a given organization.
 */
declare const getMetronomeDashboardApiV1BillingMetronomeDashboardGet: <ThrowOnError extends boolean = false>(options: Options<GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<MetronomeDashboardResponse, HttpValidationError, ThrowOnError>;
/**
 * List Extraction Agents
 */
declare const listExtractionAgentsApiV1ExtractionExtractionAgentsGet: <ThrowOnError extends boolean = false>(options: Options<ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent[], HttpValidationError, ThrowOnError>;
/**
 * Create Extraction Agent
 */
declare const createExtractionAgentApiV1ExtractionExtractionAgentsPost: <ThrowOnError extends boolean = false>(options: Options<CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Validate Extraction Schema
 * Validates an extraction agent's schema definition.
 * Returns the normalized and validated schema if valid, otherwise raises an HTTP 400.
 */
declare const validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost: <ThrowOnError extends boolean = false>(options: Options<ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractSchemaValidateResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Extraction Agent By Name
 */
declare const getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet: <ThrowOnError extends boolean = false>(options: Options<GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Delete Extraction Agent
 */
declare const deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Extraction Agent
 */
declare const getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet: <ThrowOnError extends boolean = false>(options: Options<GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * Update Extraction Agent
 */
declare const updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut: <ThrowOnError extends boolean = false>(options: Options<UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractAgent, HttpValidationError, ThrowOnError>;
/**
 * List Jobs
 */
declare const listJobsApiV1ExtractionJobsGet: <ThrowOnError extends boolean = false>(options: Options<ListJobsApiV1ExtractionJobsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob[], HttpValidationError, ThrowOnError>;
/**
 * Run Job
 */
declare const runJobApiV1ExtractionJobsPost: <ThrowOnError extends boolean = false>(options: Options<RunJobApiV1ExtractionJobsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 */
declare const getJobApiV1ExtractionJobsJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiV1ExtractionJobsJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Run Job Test User
 */
declare const runJobTestUserApiV1ExtractionJobsTestPost: <ThrowOnError extends boolean = false>(options: Options<RunJobTestUserApiV1ExtractionJobsTestPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Run Job On File
 */
declare const runJobOnFileApiV1ExtractionJobsFilePost: <ThrowOnError extends boolean = false>(options: Options<RunJobOnFileApiV1ExtractionJobsFilePostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob, HttpValidationError, ThrowOnError>;
/**
 * Run Batch Jobs
 */
declare const runBatchJobsApiV1ExtractionJobsBatchPost: <ThrowOnError extends boolean = false>(options: Options<RunBatchJobsApiV1ExtractionJobsBatchPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractJob[], HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 */
declare const getJobResultApiV1ExtractionJobsJobIdResultGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiV1ExtractionJobsJobIdResultGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractResultset, HttpValidationError, ThrowOnError>;
/**
 * List Extract Runs
 */
declare const listExtractRunsApiV1ExtractionRunsGet: <ThrowOnError extends boolean = false>(options: Options<ListExtractRunsApiV1ExtractionRunsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedExtractRunsResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Latest Run From Ui
 */
declare const getLatestRunFromUiApiV1ExtractionRunsLatestFromUiGet: <ThrowOnError extends boolean = false>(options: Options<GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun | null, HttpValidationError, ThrowOnError>;
/**
 * Get Run By Job Id
 */
declare const getRunByJobIdApiV1ExtractionRunsByJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun, HttpValidationError, ThrowOnError>;
/**
 * Delete Extraction Run
 */
declare const deleteExtractionRunApiV1ExtractionRunsRunIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Run
 */
declare const getRunApiV1ExtractionRunsRunIdGet: <ThrowOnError extends boolean = false>(options: Options<GetRunApiV1ExtractionRunsRunIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ExtractRun, HttpValidationError, ThrowOnError>;
/**
 * Create Report
 * Create a new report.
 */
declare const createReportApiV1ReportsPost: <ThrowOnError extends boolean = false>(options: Options<CreateReportApiV1ReportsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportCreateResponse, HttpValidationError, ThrowOnError>;
/**
 * List Reports
 * List all reports for a project.
 */
declare const listReportsApiV1ReportsListGet: <ThrowOnError extends boolean = false>(options?: Options<ListReportsApiV1ReportsListGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PaginatedReportResponse, HttpValidationError, ThrowOnError>;
/**
 * Delete Report
 * Delete a report.
 */
declare const deleteReportApiV1ReportsReportIdDelete: <ThrowOnError extends boolean = false>(options: Options<DeleteReportApiV1ReportsReportIdDeleteData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Report
 * Get a specific report.
 */
declare const getReportApiV1ReportsReportIdGet: <ThrowOnError extends boolean = false>(options: Options<GetReportApiV1ReportsReportIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportResponse, HttpValidationError, ThrowOnError>;
/**
 * Update Report
 * Update a report's content.
 */
declare const updateReportApiV1ReportsReportIdPatch: <ThrowOnError extends boolean = false>(options: Options<UpdateReportApiV1ReportsReportIdPatchData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportResponse, HttpValidationError, ThrowOnError>;
/**
 * Update Report Metadata
 * Update metadata for a report.
 */
declare const updateReportMetadataApiV1ReportsReportIdPost: <ThrowOnError extends boolean = false>(options: Options<UpdateReportMetadataApiV1ReportsReportIdPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportMetadata, HttpValidationError, ThrowOnError>;
/**
 * Get Report Plan
 * Get the plan for a report.
 */
declare const getReportPlanApiV1ReportsReportIdPlanGet: <ThrowOnError extends boolean = false>(options: Options<GetReportPlanApiV1ReportsReportIdPlanGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportPlan, HttpValidationError, ThrowOnError>;
/**
 * Update Report Plan
 * Update the plan of a report, including approval, rejection, and editing.
 */
declare const updateReportPlanApiV1ReportsReportIdPlanPatch: <ThrowOnError extends boolean = false>(options: Options<UpdateReportPlanApiV1ReportsReportIdPlanPatchData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportResponse, HttpValidationError, ThrowOnError>;
/**
 * Get Report Events
 * Get all historical events for a report.
 */
declare const getReportEventsApiV1ReportsReportIdEventsGet: <ThrowOnError extends boolean = false>(options: Options<GetReportEventsApiV1ReportsReportIdEventsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportEventItem[], HttpValidationError, ThrowOnError>;
/**
 * Get Report Metadata
 * Get metadata for a report.
 */
declare const getReportMetadataApiV1ReportsReportIdMetadataGet: <ThrowOnError extends boolean = false>(options: Options<GetReportMetadataApiV1ReportsReportIdMetadataGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ReportMetadata, HttpValidationError, ThrowOnError>;
/**
 * Suggest Edits Endpoint
 * Suggest edits to a report based on user query and chat history.
 */
declare const suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost: <ThrowOnError extends boolean = false>(options: Options<SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<EditSuggestion[], HttpValidationError, ThrowOnError>;
/**
 * Restart Report
 * Restart a report from scratch.
 */
declare const restartReportApiV1ReportsReportIdRestartPost: <ThrowOnError extends boolean = false>(options: Options<RestartReportApiV1ReportsReportIdRestartPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * List Batches
 */
declare const listBatchesApiV1BetaBatchesGet: <ThrowOnError extends boolean = false>(options?: Options<ListBatchesApiV1BetaBatchesGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BatchPaginatedList, HttpValidationError, ThrowOnError>;
/**
 * Create Batch
 */
declare const createBatchApiV1BetaBatchesPost: <ThrowOnError extends boolean = false>(options: Options<CreateBatchApiV1BetaBatchesPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<Batch, HttpValidationError, ThrowOnError>;
/**
 * Get Batch
 */
declare const getBatchApiV1BetaBatchesBatchIdGet: <ThrowOnError extends boolean = false>(options: Options<GetBatchApiV1BetaBatchesBatchIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<BatchPublicOutput, HttpValidationError, ThrowOnError>;
/**
 * Get Job Image Result
 * Get a job by id
 */
declare const getJobImageResultApiParsingJobJobIdResultImageNameGet: <ThrowOnError extends boolean = false>(options: Options<GetJobImageResultApiParsingJobJobIdResultImageNameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Supported File Extensions
 * Get a list of supported file extensions
 */
declare const getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet: <ThrowOnError extends boolean = false>(options?: Options<GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<LlamaParseSupportedFileExtensions[], unknown, ThrowOnError>;
/**
 * Screenshot
 */
declare const screenshotApiParsingScreenshotPost: <ThrowOnError extends boolean = false>(options?: Options<ScreenshotApiParsingScreenshotPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Upload File
 */
declare const uploadFileApiParsingUploadPost: <ThrowOnError extends boolean = false>(options?: Options<UploadFileApiParsingUploadPostData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job
 * Get a job by id
 */
declare const getJobApiParsingJobJobIdGet: <ThrowOnError extends boolean = false>(options: Options<GetJobApiParsingJobJobIdGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJob, HttpValidationError, ThrowOnError>;
/**
 * Get Job Parameters
 * Get a job by id
 */
declare const getJobParametersApiParsingJobJobIdParametersGet: <ThrowOnError extends boolean = false>(options: Options<GetJobParametersApiParsingJobJobIdParametersGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Parsing Job Details
 * Get a job by id
 */
declare const getParsingJobDetailsApiParsingJobJobIdDetailsGet: <ThrowOnError extends boolean = false>(options: Options<GetParsingJobDetailsApiParsingJobJobIdDetailsGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Text Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobTextResultApiParsingJobJobIdResultTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobTextResultApiParsingJobJobIdResultTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobTextResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiParsingJobJobIdResultRawTextGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiParsingJobJobIdResultRawTextGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiParsingJobJobIdResultPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiParsingJobJobIdResultPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Text Result
 * Get a job by id
 */
declare const getJobRawTextResultApiParsingJobJobIdResultRawPdfGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Structured Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobStructuredResultApiParsingJobJobIdResultStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobStructuredResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Structured Result
 * Get a job by id
 */
declare const getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Xlsx Result
 * Get a job by id
 */
declare const getJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobResultApiParsingJobJobIdResultMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobResultApiParsingJobJobIdResultMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobMarkdownResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Raw Md Result
 * Get a job by id
 */
declare const getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet: <ThrowOnError extends boolean = false>(options: Options<GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Result
 * Get a job by id
 *
 * Note: The 'credits_used' and 'job_credits_usage' fields in the response metadata are deprecated
 * and will be removed in a future release.
 */
declare const getJobJsonResultApiParsingJobJobIdResultJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonResultApiParsingJobJobIdResultJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingJobJsonResult, HttpValidationError, ThrowOnError>;
/**
 * Get Job Json Raw Result
 * Get a job by id
 */
declare const getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet: <ThrowOnError extends boolean = false>(options: Options<GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<unknown, HttpValidationError, ThrowOnError>;
/**
 * @deprecated
 * Get Parsing History Result
 * Get parsing history for user
 *
 * This endpoint is deprecated.
 * Use /api/v1/jobs/?job_name=parsing&project_id=YOUR_PROJECT_ID instead.
 */
declare const getParsingHistoryResultApiParsingHistoryGet: <ThrowOnError extends boolean = false>(options?: Options<GetParsingHistoryResultApiParsingHistoryGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<ParsingHistoryItem[], HttpValidationError, ThrowOnError>;
/**
 * Generate Presigned Url
 * Generate a presigned URL for a job
 */
declare const generatePresignedUrlApiParsingJobJobIdReadFilenameGet: <ThrowOnError extends boolean = false>(options: Options<GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData, ThrowOnError>) => _hey_api_client_fetch.RequestResult<PresignedUrl, HttpValidationError, ThrowOnError>;

export { type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutData, type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutError, type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutErrors, type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponse, type AddDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPutResponses, type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutData, type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutError, type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutErrors, type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponse, type AddFilesToPipelineApiApiV1PipelinesPipelineIdFilesPutResponses, type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutData, type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutError, type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutErrors, type AddUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPutResponses, type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutData, type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutError, type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutErrors, type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponse, type AddUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPutResponses, type AdvancedModeTransformConfig, type ApiKey, type ApiKeyCreate, type ApiKeyUpdate, type AppChatInputParams, type AppSchemaChatChatMessage, type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutData, type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutError, type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutErrors, type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponse, type AssignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPutResponses, type AudioBlock, type AutoTransformConfig, type AzureOpenAiEmbedding, type AzureOpenAiEmbeddingConfig, type BaseConnectionValidation, type BasePlan, type Batch, type BatchCreate, type BatchItem, type BatchPaginatedList, type BatchPublicOutput, type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutData, type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutError, type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutErrors, type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponse, type BatchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePutResponses, type BedrockEmbedding, type BedrockEmbeddingConfig, type BillingPeriod, type BodyCreateReportApiV1ReportsPost, type BodyImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPut, type BodyRunJobOnFileApiV1ExtractionJobsFilePost, type BodyRunJobTestUserApiV1ExtractionJobsTestPost, type BodyScreenshotApiParsingScreenshotPost, type BodyScreenshotApiV1ParsingScreenshotPost, type BodyUploadFileApiParsingUploadPost, type BodyUploadFileApiV1FilesPost, type BodyUploadFileApiV1ParsingUploadPost, BoxAuthMechanism, type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostData, type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostError, type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostErrors, type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponse, type CancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPostResponses, type CharacterChunkingConfig, type ChatApiV1PipelinesPipelineIdChatPostData, type ChatApiV1PipelinesPipelineIdChatPostError, type ChatApiV1PipelinesPipelineIdChatPostErrors, type ChatApiV1PipelinesPipelineIdChatPostResponses, type ChatApp, type ChatAppCreate, type ChatAppResponse, type ChatAppUpdate, type ChatData, type ChatInputParams, type ChatWithChatAppApiV1AppsIdChatPostData, type ChatWithChatAppApiV1AppsIdChatPostError, type ChatWithChatAppApiV1AppsIdChatPostErrors, type ChatWithChatAppApiV1AppsIdChatPostResponses, type CheckoutSessionCreatePayload, ChunkMode, type ClientOptions, type CloudAzStorageBlobDataSourceReadable, type CloudAzStorageBlobDataSourceWritable, type CloudAzureAiSearchVectorStoreReadable, type CloudAzureAiSearchVectorStoreWritable, type CloudBoxDataSourceReadable, type CloudBoxDataSourceWritable, type CloudConfluenceDataSourceReadable, type CloudConfluenceDataSourceWritable, type CloudDocument, type CloudDocumentCreate, type CloudGoogleDriveDataSource, type CloudJiraDataSourceReadable, type CloudJiraDataSourceWritable, type CloudMilvusVectorStoreReadable, type CloudMilvusVectorStoreWritable, type CloudMongoDbAtlasVectorSearchReadable, type CloudMongoDbAtlasVectorSearchWritable, type CloudNotionPageDataSourceReadable, type CloudNotionPageDataSourceWritable, type CloudOneDriveDataSourceReadable, type CloudOneDriveDataSourceWritable, type CloudPineconeVectorStoreReadable, type CloudPineconeVectorStoreWritable, type CloudPostgresVectorStoreReadable, type CloudPostgresVectorStoreWritable, type CloudQdrantVectorStoreReadable, type CloudQdrantVectorStoreWritable, type CloudS3DataSourceReadable, type CloudS3DataSourceWritable, type CloudSharepointDataSourceReadable, type CloudSharepointDataSourceWritable, type CloudSlackDataSourceReadable, type CloudSlackDataSourceWritable, type CohereEmbedding, type CohereEmbeddingConfig, CompositeRetrievalMode, type CompositeRetrievalParams, type CompositeRetrievalResult, type CompositeRetrievedTextNode, type CompositeRetrievedTextNodeWithScore, ConfigurableDataSinkNames, ConfigurableDataSourceNames, type CopyPipelineApiV1PipelinesPipelineIdCopyPostData, type CopyPipelineApiV1PipelinesPipelineIdCopyPostError, type CopyPipelineApiV1PipelinesPipelineIdCopyPostErrors, type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponse, type CopyPipelineApiV1PipelinesPipelineIdCopyPostResponses, type CreateBatchApiV1BetaBatchesPostData, type CreateBatchApiV1BetaBatchesPostError, type CreateBatchApiV1BetaBatchesPostErrors, type CreateBatchApiV1BetaBatchesPostResponse, type CreateBatchApiV1BetaBatchesPostResponses, type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostData, type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostError, type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostErrors, type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponse, type CreateBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPostResponses, type CreateChatAppApiV1AppsPostData, type CreateChatAppApiV1AppsPostError, type CreateChatAppApiV1AppsPostErrors, type CreateChatAppApiV1AppsPostResponse, type CreateChatAppApiV1AppsPostResponses, type CreateCheckoutSessionApiV1BillingCheckoutSessionPostData, type CreateCheckoutSessionApiV1BillingCheckoutSessionPostError, type CreateCheckoutSessionApiV1BillingCheckoutSessionPostErrors, type CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponse, type CreateCheckoutSessionApiV1BillingCheckoutSessionPostResponses, type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostData, type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostError, type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostErrors, type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponse, type CreateCustomerPortalSessionApiV1BillingCustomerPortalSessionPostResponses, type CreateDataSinkApiV1DataSinksPostData, type CreateDataSinkApiV1DataSinksPostError, type CreateDataSinkApiV1DataSinksPostErrors, type CreateDataSinkApiV1DataSinksPostResponse, type CreateDataSinkApiV1DataSinksPostResponses, type CreateDataSourceApiV1DataSourcesPostData, type CreateDataSourceApiV1DataSourcesPostError, type CreateDataSourceApiV1DataSourcesPostErrors, type CreateDataSourceApiV1DataSourcesPostResponse, type CreateDataSourceApiV1DataSourcesPostResponses, type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostData, type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostError, type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostErrors, type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponse, type CreateEmbeddingModelConfigApiV1EmbeddingModelConfigsPostResponses, type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostData, type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostError, type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostErrors, type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponse, type CreateExtractionAgentApiV1ExtractionExtractionAgentsPostResponses, type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostData, type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostError, type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostErrors, type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponse, type CreateIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPostResponses, type CreateIntentAndCustomerSessionResponse, type CreateOrganizationApiV1OrganizationsPostData, type CreateOrganizationApiV1OrganizationsPostError, type CreateOrganizationApiV1OrganizationsPostErrors, type CreateOrganizationApiV1OrganizationsPostResponse, type CreateOrganizationApiV1OrganizationsPostResponses, type CreatePipelineApiV1PipelinesPostData, type CreatePipelineApiV1PipelinesPostError, type CreatePipelineApiV1PipelinesPostErrors, type CreatePipelineApiV1PipelinesPostResponse, type CreatePipelineApiV1PipelinesPostResponses, type CreateProjectApiV1ProjectsPostData, type CreateProjectApiV1ProjectsPostError, type CreateProjectApiV1ProjectsPostErrors, type CreateProjectApiV1ProjectsPostResponse, type CreateProjectApiV1ProjectsPostResponses, type CreateReportApiV1ReportsPostData, type CreateReportApiV1ReportsPostError, type CreateReportApiV1ReportsPostErrors, type CreateReportApiV1ReportsPostResponse, type CreateReportApiV1ReportsPostResponses, type CreateRetrieverApiV1RetrieversPostData, type CreateRetrieverApiV1RetrieversPostError, type CreateRetrieverApiV1RetrieversPostErrors, type CreateRetrieverApiV1RetrieversPostResponse, type CreateRetrieverApiV1RetrieversPostResponses, type CreditType, type CustomerPortalSessionCreatePayload, type DataSinkCreateReadable, type DataSinkCreateWritable, type DataSinkReadable, type DataSinkUpdateReadable, type DataSinkUpdateWritable, type DataSinkWritable, type DataSourceCreateReadable, type DataSourceCreateWritable, type DataSourceReadable, type DataSourceUpdateDispatcherConfig, type DataSourceUpdateReadable, type DataSourceUpdateWritable, type DataSourceWritable, type DefaultOrganizationUpdate, type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteData, type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteError, type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteErrors, type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponse, type DeleteApiKeyApiV1ApiKeysApiKeyIdDeleteResponses, type DeleteChatAppApiV1AppsIdDeleteData, type DeleteChatAppApiV1AppsIdDeleteError, type DeleteChatAppApiV1AppsIdDeleteErrors, type DeleteChatAppApiV1AppsIdDeleteResponses, type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteData, type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteError, type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteErrors, type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponse, type DeleteDataSinkApiV1DataSinksDataSinkIdDeleteResponses, type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteData, type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteError, type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteErrors, type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponse, type DeleteDataSourceApiV1DataSourcesDataSourceIdDeleteResponses, type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteData, type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteError, type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteErrors, type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponse, type DeleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDeleteResponses, type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteData, type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteError, type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteErrors, type DeleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDeleteResponses, type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteData, type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteError, type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteErrors, type DeleteExtractionRunApiV1ExtractionRunsRunIdDeleteResponses, type DeleteFileApiV1FilesIdDeleteData, type DeleteFileApiV1FilesIdDeleteError, type DeleteFileApiV1FilesIdDeleteErrors, type DeleteFileApiV1FilesIdDeleteResponse, type DeleteFileApiV1FilesIdDeleteResponses, type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteData, type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteError, type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteErrors, type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponse, type DeleteOrganizationApiV1OrganizationsOrganizationIdDeleteResponses, type DeleteParams, type DeletePipelineApiV1PipelinesPipelineIdDeleteData, type DeletePipelineApiV1PipelinesPipelineIdDeleteError, type DeletePipelineApiV1PipelinesPipelineIdDeleteErrors, type DeletePipelineApiV1PipelinesPipelineIdDeleteResponse, type DeletePipelineApiV1PipelinesPipelineIdDeleteResponses, type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteData, type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteError, type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteErrors, type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponse, type DeletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDeleteResponses, type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteData, type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteError, type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteErrors, type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponse, type DeletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDeleteResponses, type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteData, type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteError, type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteErrors, type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponse, type DeletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDeleteResponses, type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteData, type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteError, type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteErrors, type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponse, type DeletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDeleteResponses, type DeleteProjectApiV1ProjectsProjectIdDeleteData, type DeleteProjectApiV1ProjectsProjectIdDeleteError, type DeleteProjectApiV1ProjectsProjectIdDeleteErrors, type DeleteProjectApiV1ProjectsProjectIdDeleteResponse, type DeleteProjectApiV1ProjectsProjectIdDeleteResponses, type DeleteReportApiV1ReportsReportIdDeleteData, type DeleteReportApiV1ReportsReportIdDeleteError, type DeleteReportApiV1ReportsReportIdDeleteErrors, type DeleteReportApiV1ReportsReportIdDeleteResponses, type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteData, type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteError, type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteErrors, type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponse, type DeleteRetrieverApiV1RetrieversRetrieverIdDeleteResponses, type DirectRetrievalParams, type DirectRetrieveApiV1RetrieversRetrievePostData, type DirectRetrieveApiV1RetrieversRetrievePostError, type DirectRetrieveApiV1RetrieversRetrievePostErrors, type DirectRetrieveApiV1RetrieversRetrievePostResponse, type DirectRetrieveApiV1RetrieversRetrievePostResponses, DocumentChunkMode, type DocumentIngestionJobParams, type DowngradePlanApiV1BillingDowngradePlanPostData, type DowngradePlanApiV1BillingDowngradePlanPostError, type DowngradePlanApiV1BillingDowngradePlanPostErrors, type DowngradePlanApiV1BillingDowngradePlanPostResponse, type DowngradePlanApiV1BillingDowngradePlanPostResponses, type EditSuggestion, type EditSuggestionCreate, type ElementSegmentationConfig, type EmbeddingModelConfig, type EmbeddingModelConfigCreate, type EmbeddingModelConfigUpdate, type EvalExecutionParams, type ExtractAgent, type ExtractAgentCreate, type ExtractAgentUpdate, type ExtractConfig, type ExtractJob, type ExtractJobCreate, type ExtractJobCreateBatch, ExtractMode, ExtractModels, type ExtractResultset, type ExtractRun, type ExtractSchemaValidateRequest, type ExtractSchemaValidateResponse, ExtractState, ExtractTarget, FailPageMode, type File, type FileCountByStatusResponse, type FileCreate, type FileCreateFromUrl, type FileParsePublic, FilterCondition, FilterOperator, type FreeCreditsUsage, type GeminiEmbedding, type GeminiEmbeddingConfig, type GenerateKeyApiV1ApiKeysPostData, type GenerateKeyApiV1ApiKeysPostError, type GenerateKeyApiV1ApiKeysPostErrors, type GenerateKeyApiV1ApiKeysPostResponse, type GenerateKeyApiV1ApiKeysPostResponses, type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetData, type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetError, type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetErrors, type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponse, type GeneratePresignedUrlApiParsingJobJobIdReadFilenameGetResponses, type GeneratePresignedUrlApiV1FilesPutData, type GeneratePresignedUrlApiV1FilesPutError, type GeneratePresignedUrlApiV1FilesPutErrors, type GeneratePresignedUrlApiV1FilesPutResponse, type GeneratePresignedUrlApiV1FilesPutResponses, type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetData, type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetError, type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetErrors, type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponse, type GeneratePresignedUrlApiV1ParsingJobJobIdReadFilenameGetResponses, type GetBatchApiV1BetaBatchesBatchIdGetData, type GetBatchApiV1BetaBatchesBatchIdGetError, type GetBatchApiV1BetaBatchesBatchIdGetErrors, type GetBatchApiV1BetaBatchesBatchIdGetResponse, type GetBatchApiV1BetaBatchesBatchIdGetResponses, type GetChatAppApiV1AppsIdGetData, type GetChatAppApiV1AppsIdGetError, type GetChatAppApiV1AppsIdGetErrors, type GetChatAppApiV1AppsIdGetResponse, type GetChatAppApiV1AppsIdGetResponses, type GetChatAppsApiV1AppsGetData, type GetChatAppsApiV1AppsGetError, type GetChatAppsApiV1AppsGetErrors, type GetChatAppsApiV1AppsGetResponse, type GetChatAppsApiV1AppsGetResponses, type GetCurrentProjectApiV1ProjectsCurrentGetData, type GetCurrentProjectApiV1ProjectsCurrentGetError, type GetCurrentProjectApiV1ProjectsCurrentGetErrors, type GetCurrentProjectApiV1ProjectsCurrentGetResponse, type GetCurrentProjectApiV1ProjectsCurrentGetResponses, type GetDataSinkApiV1DataSinksDataSinkIdGetData, type GetDataSinkApiV1DataSinksDataSinkIdGetError, type GetDataSinkApiV1DataSinksDataSinkIdGetErrors, type GetDataSinkApiV1DataSinksDataSinkIdGetResponse, type GetDataSinkApiV1DataSinksDataSinkIdGetResponses, type GetDataSourceApiV1DataSourcesDataSourceIdGetData, type GetDataSourceApiV1DataSourcesDataSourceIdGetError, type GetDataSourceApiV1DataSourcesDataSourceIdGetErrors, type GetDataSourceApiV1DataSourcesDataSourceIdGetResponse, type GetDataSourceApiV1DataSourcesDataSourceIdGetResponses, type GetDefaultOrganizationApiV1OrganizationsDefaultGetData, type GetDefaultOrganizationApiV1OrganizationsDefaultGetError, type GetDefaultOrganizationApiV1OrganizationsDefaultGetErrors, type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponse, type GetDefaultOrganizationApiV1OrganizationsDefaultGetResponses, type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetData, type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetError, type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetErrors, type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponse, type GetExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGetResponses, type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetData, type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetError, type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetErrors, type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponse, type GetExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGetResponses, type GetFileApiV1FilesIdGetData, type GetFileApiV1FilesIdGetError, type GetFileApiV1FilesIdGetErrors, type GetFileApiV1FilesIdGetResponse, type GetFileApiV1FilesIdGetResponses, type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetData, type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetError, type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetErrors, type GetFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGetResponses, type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetData, type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetError, type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetErrors, type GetFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGetResponses, type GetJobApiParsingJobJobIdGetData, type GetJobApiParsingJobJobIdGetError, type GetJobApiParsingJobJobIdGetErrors, type GetJobApiParsingJobJobIdGetResponse, type GetJobApiParsingJobJobIdGetResponses, type GetJobApiV1ExtractionJobsJobIdGetData, type GetJobApiV1ExtractionJobsJobIdGetError, type GetJobApiV1ExtractionJobsJobIdGetErrors, type GetJobApiV1ExtractionJobsJobIdGetResponse, type GetJobApiV1ExtractionJobsJobIdGetResponses, type GetJobApiV1ParsingJobJobIdGetData, type GetJobApiV1ParsingJobJobIdGetError, type GetJobApiV1ParsingJobJobIdGetErrors, type GetJobApiV1ParsingJobJobIdGetResponse, type GetJobApiV1ParsingJobJobIdGetResponses, type GetJobImageResultApiParsingJobJobIdResultImageNameGetData, type GetJobImageResultApiParsingJobJobIdResultImageNameGetError, type GetJobImageResultApiParsingJobJobIdResultImageNameGetErrors, type GetJobImageResultApiParsingJobJobIdResultImageNameGetResponses, type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetData, type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetError, type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetErrors, type GetJobImageResultApiV1ParsingJobJobIdResultImageNameGetResponses, type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetData, type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetError, type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetErrors, type GetJobJsonRawResultApiParsingJobJobIdResultRawJsonGetResponses, type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetData, type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetError, type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetErrors, type GetJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGetResponses, type GetJobJsonResultApiParsingJobJobIdResultJsonGetData, type GetJobJsonResultApiParsingJobJobIdResultJsonGetError, type GetJobJsonResultApiParsingJobJobIdResultJsonGetErrors, type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponse, type GetJobJsonResultApiParsingJobJobIdResultJsonGetResponses, type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetData, type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetError, type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetErrors, type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponse, type GetJobJsonResultApiV1ParsingJobJobIdResultJsonGetResponses, type GetJobParametersApiParsingJobJobIdParametersGetData, type GetJobParametersApiParsingJobJobIdParametersGetError, type GetJobParametersApiParsingJobJobIdParametersGetErrors, type GetJobParametersApiParsingJobJobIdParametersGetResponses, type GetJobParametersApiV1ParsingJobJobIdParametersGetData, type GetJobParametersApiV1ParsingJobJobIdParametersGetError, type GetJobParametersApiV1ParsingJobJobIdParametersGetErrors, type GetJobParametersApiV1ParsingJobJobIdParametersGetResponses, type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetData, type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetError, type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetErrors, type GetJobRawMdResultApiParsingJobJobIdResultRawMarkdownGetResponses, type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetData, type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetError, type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetErrors, type GetJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGetResponses, type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetData, type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetError, type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetErrors, type GetJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGetResponses, type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetData, type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetError, type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetErrors, type GetJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGetResponses, type GetJobRawTextResultApiParsingJobJobIdResultPdfGetData, type GetJobRawTextResultApiParsingJobJobIdResultPdfGetError, type GetJobRawTextResultApiParsingJobJobIdResultPdfGetErrors, type GetJobRawTextResultApiParsingJobJobIdResultPdfGetResponses, type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetData, type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetError, type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetErrors, type GetJobRawTextResultApiParsingJobJobIdResultRawPdfGetResponses, type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetData, type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetError, type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetErrors, type GetJobRawTextResultApiParsingJobJobIdResultRawTextGetResponses, type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetData, type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetError, type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetErrors, type GetJobRawTextResultApiV1ParsingJobJobIdResultPdfGetResponses, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetData, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetError, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetErrors, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGetResponses, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetData, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetError, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetErrors, type GetJobRawTextResultApiV1ParsingJobJobIdResultRawTextGetResponses, type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetData, type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetError, type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetErrors, type GetJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGetResponses, type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetData, type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetError, type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetErrors, type GetJobRawXlsxResultApiParsingJobJobIdResultXlsxGetResponses, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetData, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetError, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetErrors, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGetResponses, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetData, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetError, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetErrors, type GetJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGetResponses, type GetJobResultApiParsingJobJobIdResultMarkdownGetData, type GetJobResultApiParsingJobJobIdResultMarkdownGetError, type GetJobResultApiParsingJobJobIdResultMarkdownGetErrors, type GetJobResultApiParsingJobJobIdResultMarkdownGetResponse, type GetJobResultApiParsingJobJobIdResultMarkdownGetResponses, type GetJobResultApiV1ExtractionJobsJobIdResultGetData, type GetJobResultApiV1ExtractionJobsJobIdResultGetError, type GetJobResultApiV1ExtractionJobsJobIdResultGetErrors, type GetJobResultApiV1ExtractionJobsJobIdResultGetResponse, type GetJobResultApiV1ExtractionJobsJobIdResultGetResponses, type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetData, type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetError, type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetErrors, type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponse, type GetJobResultApiV1ParsingJobJobIdResultMarkdownGetResponses, type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetData, type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetError, type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetErrors, type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponse, type GetJobStructuredResultApiParsingJobJobIdResultStructuredGetResponses, type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetData, type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetError, type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetErrors, type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponse, type GetJobStructuredResultApiV1ParsingJobJobIdResultStructuredGetResponses, type GetJobTextResultApiParsingJobJobIdResultTextGetData, type GetJobTextResultApiParsingJobJobIdResultTextGetError, type GetJobTextResultApiParsingJobJobIdResultTextGetErrors, type GetJobTextResultApiParsingJobJobIdResultTextGetResponse, type GetJobTextResultApiParsingJobJobIdResultTextGetResponses, type GetJobTextResultApiV1ParsingJobJobIdResultTextGetData, type GetJobTextResultApiV1ParsingJobJobIdResultTextGetError, type GetJobTextResultApiV1ParsingJobJobIdResultTextGetErrors, type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponse, type GetJobTextResultApiV1ParsingJobJobIdResultTextGetResponses, type GetJobsApiV1JobsGetData, type GetJobsApiV1JobsGetError, type GetJobsApiV1JobsGetErrors, type GetJobsApiV1JobsGetResponse, type GetJobsApiV1JobsGetResponses, type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetData, type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetError, type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetErrors, type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponse, type GetLatestRunFromUiApiV1ExtractionRunsLatestFromUiGetResponses, type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetData, type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetError, type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetErrors, type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponse, type GetMetronomeDashboardApiV1BillingMetronomeDashboardGetResponses, type GetOrganizationApiV1OrganizationsOrganizationIdGetData, type GetOrganizationApiV1OrganizationsOrganizationIdGetError, type GetOrganizationApiV1OrganizationsOrganizationIdGetErrors, type GetOrganizationApiV1OrganizationsOrganizationIdGetResponse, type GetOrganizationApiV1OrganizationsOrganizationIdGetResponses, type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetData, type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetError, type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetErrors, type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponse, type GetOrganizationUsageApiV1OrganizationsOrganizationIdUsageGetResponses, type GetParsingHistoryResultApiParsingHistoryGetData, type GetParsingHistoryResultApiParsingHistoryGetError, type GetParsingHistoryResultApiParsingHistoryGetErrors, type GetParsingHistoryResultApiParsingHistoryGetResponse, type GetParsingHistoryResultApiParsingHistoryGetResponses, type GetParsingHistoryResultApiV1ParsingHistoryGetData, type GetParsingHistoryResultApiV1ParsingHistoryGetError, type GetParsingHistoryResultApiV1ParsingHistoryGetErrors, type GetParsingHistoryResultApiV1ParsingHistoryGetResponse, type GetParsingHistoryResultApiV1ParsingHistoryGetResponses, type GetParsingJobDetailsApiParsingJobJobIdDetailsGetData, type GetParsingJobDetailsApiParsingJobJobIdDetailsGetError, type GetParsingJobDetailsApiParsingJobJobIdDetailsGetErrors, type GetParsingJobDetailsApiParsingJobJobIdDetailsGetResponses, type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetData, type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetError, type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetErrors, type GetParsingJobDetailsApiV1ParsingJobJobIdDetailsGetResponses, type GetPipelineApiV1PipelinesPipelineIdGetData, type GetPipelineApiV1PipelinesPipelineIdGetError, type GetPipelineApiV1PipelinesPipelineIdGetErrors, type GetPipelineApiV1PipelinesPipelineIdGetResponse, type GetPipelineApiV1PipelinesPipelineIdGetResponses, type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetData, type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetError, type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetErrors, type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponse, type GetPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGetResponses, type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetData, type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetError, type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetErrors, type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponse, type GetPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGetResponses, type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetData, type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetError, type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetErrors, type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponse, type GetPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGetResponses, type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetData, type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetError, type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetErrors, type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponse, type GetPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGetResponses, type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetData, type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetError, type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetErrors, type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponse, type GetPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGetResponses, type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetData, type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetError, type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetErrors, type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponse, type GetPipelineJobApiV1PipelinesPipelineIdJobsJobIdGetResponses, type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetData, type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetError, type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetErrors, type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponse, type GetPipelineStatusApiV1PipelinesPipelineIdStatusGetResponses, type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetData, type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetError, type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetErrors, type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponse, type GetPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGetResponses, type GetProjectApiV1ProjectsProjectIdGetData, type GetProjectApiV1ProjectsProjectIdGetError, type GetProjectApiV1ProjectsProjectIdGetErrors, type GetProjectApiV1ProjectsProjectIdGetResponse, type GetProjectApiV1ProjectsProjectIdGetResponses, type GetProjectUsageApiV1ProjectsProjectIdUsageGetData, type GetProjectUsageApiV1ProjectsProjectIdUsageGetError, type GetProjectUsageApiV1ProjectsProjectIdUsageGetErrors, type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponse, type GetProjectUsageApiV1ProjectsProjectIdUsageGetResponses, type GetReportApiV1ReportsReportIdGetData, type GetReportApiV1ReportsReportIdGetError, type GetReportApiV1ReportsReportIdGetErrors, type GetReportApiV1ReportsReportIdGetResponse, type GetReportApiV1ReportsReportIdGetResponses, type GetReportEventsApiV1ReportsReportIdEventsGetData, type GetReportEventsApiV1ReportsReportIdEventsGetError, type GetReportEventsApiV1ReportsReportIdEventsGetErrors, type GetReportEventsApiV1ReportsReportIdEventsGetResponse, type GetReportEventsApiV1ReportsReportIdEventsGetResponses, type GetReportMetadataApiV1ReportsReportIdMetadataGetData, type GetReportMetadataApiV1ReportsReportIdMetadataGetError, type GetReportMetadataApiV1ReportsReportIdMetadataGetErrors, type GetReportMetadataApiV1ReportsReportIdMetadataGetResponse, type GetReportMetadataApiV1ReportsReportIdMetadataGetResponses, type GetReportPlanApiV1ReportsReportIdPlanGetData, type GetReportPlanApiV1ReportsReportIdPlanGetError, type GetReportPlanApiV1ReportsReportIdPlanGetErrors, type GetReportPlanApiV1ReportsReportIdPlanGetResponse, type GetReportPlanApiV1ReportsReportIdPlanGetResponses, type GetRetrieverApiV1RetrieversRetrieverIdGetData, type GetRetrieverApiV1RetrieversRetrieverIdGetError, type GetRetrieverApiV1RetrieversRetrieverIdGetErrors, type GetRetrieverApiV1RetrieversRetrieverIdGetResponse, type GetRetrieverApiV1RetrieversRetrieverIdGetResponses, type GetRunApiV1ExtractionRunsRunIdGetData, type GetRunApiV1ExtractionRunsRunIdGetError, type GetRunApiV1ExtractionRunsRunIdGetErrors, type GetRunApiV1ExtractionRunsRunIdGetResponse, type GetRunApiV1ExtractionRunsRunIdGetResponses, type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetData, type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetError, type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetErrors, type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponse, type GetRunByJobIdApiV1ExtractionRunsByJobJobIdGetResponses, type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetData, type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponse, type GetSupportedFileExtensionsApiParsingSupportedFileExtensionsGetResponses, type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetData, type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponse, type GetSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGetResponses, type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetData, type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetError, type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetErrors, type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponse, type GetUserRoleApiV1OrganizationsOrganizationIdUsersRolesGetResponses, type HttpValidationError, type HuggingFaceInferenceApiEmbedding, type HuggingFaceInferenceApiEmbeddingConfig, type ImageBlock, type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutData, type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutError, type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutErrors, type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponse, type ImportPipelineMetadataApiV1PipelinesPipelineIdMetadataPutResponses, type IngestionErrorResponse, type InputMessage, JobNameMapping, JobNames, type JobRecord, type JobRecordWithUsageMetrics, type LLamaParseTransformConfig, type LegacyParseJobConfig, type ListBatchesApiV1BetaBatchesGetData, type ListBatchesApiV1BetaBatchesGetError, type ListBatchesApiV1BetaBatchesGetErrors, type ListBatchesApiV1BetaBatchesGetResponse, type ListBatchesApiV1BetaBatchesGetResponses, type ListDataSinksApiV1DataSinksGetData, type ListDataSinksApiV1DataSinksGetError, type ListDataSinksApiV1DataSinksGetErrors, type ListDataSinksApiV1DataSinksGetResponse, type ListDataSinksApiV1DataSinksGetResponses, type ListDataSourcesApiV1DataSourcesGetData, type ListDataSourcesApiV1DataSourcesGetError, type ListDataSourcesApiV1DataSourcesGetErrors, type ListDataSourcesApiV1DataSourcesGetResponse, type ListDataSourcesApiV1DataSourcesGetResponses, type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetData, type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetError, type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetErrors, type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponse, type ListEmbeddingModelConfigsApiV1EmbeddingModelConfigsGetResponses, type ListExtractRunsApiV1ExtractionRunsGetData, type ListExtractRunsApiV1ExtractionRunsGetError, type ListExtractRunsApiV1ExtractionRunsGetErrors, type ListExtractRunsApiV1ExtractionRunsGetResponse, type ListExtractRunsApiV1ExtractionRunsGetResponses, type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetData, type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetError, type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetErrors, type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponse, type ListExtractionAgentsApiV1ExtractionExtractionAgentsGetResponses, type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetData, type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetError, type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetErrors, type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponse, type ListFilePageFiguresApiV1FilesIdPageFiguresPageIndexGetResponses, type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetData, type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetError, type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetErrors, type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponse, type ListFilePageScreenshotsApiV1FilesIdPageScreenshotsGetResponses, type ListFilePagesFiguresApiV1FilesIdPageFiguresGetData, type ListFilePagesFiguresApiV1FilesIdPageFiguresGetError, type ListFilePagesFiguresApiV1FilesIdPageFiguresGetErrors, type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponse, type ListFilePagesFiguresApiV1FilesIdPageFiguresGetResponses, type ListFilesApiV1FilesGetData, type ListFilesApiV1FilesGetError, type ListFilesApiV1FilesGetErrors, type ListFilesApiV1FilesGetResponse, type ListFilesApiV1FilesGetResponses, type ListJobsApiV1ExtractionJobsGetData, type ListJobsApiV1ExtractionJobsGetError, type ListJobsApiV1ExtractionJobsGetErrors, type ListJobsApiV1ExtractionJobsGetResponse, type ListJobsApiV1ExtractionJobsGetResponses, type ListKeysApiV1ApiKeysGetData, type ListKeysApiV1ApiKeysGetError, type ListKeysApiV1ApiKeysGetErrors, type ListKeysApiV1ApiKeysGetResponse, type ListKeysApiV1ApiKeysGetResponses, type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetData, type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetError, type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetErrors, type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponse, type ListOrganizationUsersApiV1OrganizationsOrganizationIdUsersGetResponses, type ListOrganizationsApiV1OrganizationsGetData, type ListOrganizationsApiV1OrganizationsGetError, type ListOrganizationsApiV1OrganizationsGetErrors, type ListOrganizationsApiV1OrganizationsGetResponse, type ListOrganizationsApiV1OrganizationsGetResponses, type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetData, type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetError, type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetErrors, type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponse, type ListPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGetResponses, type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetData, type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetError, type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetErrors, type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponse, type ListPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGetResponses, type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetData, type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetError, type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetErrors, type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponse, type ListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGetResponses, type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetData, type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetError, type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetErrors, type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponse, type ListPipelineFiles2ApiV1PipelinesPipelineIdFiles2GetResponses, type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetData, type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetError, type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetErrors, type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponse, type ListPipelineFilesApiV1PipelinesPipelineIdFilesGetResponses, type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetData, type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetError, type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetErrors, type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponse, type ListPipelineJobsApiV1PipelinesPipelineIdJobsGetResponses, type ListProjectsApiV1ProjectsGetData, type ListProjectsApiV1ProjectsGetError, type ListProjectsApiV1ProjectsGetErrors, type ListProjectsApiV1ProjectsGetResponse, type ListProjectsApiV1ProjectsGetResponses, type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetData, type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetError, type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetErrors, type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponse, type ListProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGetResponses, type ListReportsApiV1ReportsListGetData, type ListReportsApiV1ReportsListGetError, type ListReportsApiV1ReportsListGetErrors, type ListReportsApiV1ReportsListGetResponse, type ListReportsApiV1ReportsListGetResponses, type ListRetrieversApiV1RetrieversGetData, type ListRetrieversApiV1RetrieversGetError, type ListRetrieversApiV1RetrieversGetErrors, type ListRetrieversApiV1RetrieversGetResponse, type ListRetrieversApiV1RetrieversGetResponses, type ListRolesApiV1OrganizationsOrganizationIdRolesGetData, type ListRolesApiV1OrganizationsOrganizationIdRolesGetError, type ListRolesApiV1OrganizationsOrganizationIdRolesGetErrors, type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponse, type ListRolesApiV1OrganizationsOrganizationIdRolesGetResponses, type ListSupportedModelsApiV1EvalsModelsGetData, type ListSupportedModelsApiV1EvalsModelsGetError, type ListSupportedModelsApiV1EvalsModelsGetErrors, type ListSupportedModelsApiV1EvalsModelsGetResponse, type ListSupportedModelsApiV1EvalsModelsGetResponses, type LlamaExtractSettings, type LlamaIndexCoreBaseLlmsTypesChatMessage, type LlamaParseParameters, LlamaParseSupportedFileExtensions, type LlmModelData, type LlmParameters, type LoadFilesJobConfig, ManagedIngestionStatus, type ManagedIngestionStatusResponse, type MessageAnnotation, MessageRole, type MetadataFilter, type MetadataFilters, type MetronomeDashboardResponse, MetronomeDashboardType, type MetronomeWebhookApiV1BillingMetronomeWebhookPostData, type MetronomeWebhookApiV1BillingMetronomeWebhookPostError, type MetronomeWebhookApiV1BillingMetronomeWebhookPostErrors, type MetronomeWebhookApiV1BillingMetronomeWebhookPostResponse, type MetronomeWebhookApiV1BillingMetronomeWebhookPostResponses, NodeRelationship, type NoneChunkingConfig, type NoneSegmentationConfig, ObjectType, type OpenAiEmbedding, type OpenAiEmbeddingConfig, type Options, type Organization, type OrganizationCreate, type OrganizationUpdate, type PageFigureMetadata, type PageScreenshotMetadata, type PageScreenshotNodeWithScore, type PageSegmentationConfig, type PaginatedExtractRunsResponse, type PaginatedJobsHistoryWithMetrics, type PaginatedListCloudDocumentsResponse, type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetData, type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetError, type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetErrors, type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponse, type PaginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGetResponses, type PaginatedListPipelineFilesResponse, type PaginatedReportResponse, type ParseJobConfig, ParsePlanLevel, ParserLanguages, type ParsingHistoryItem, type ParsingJob, type ParsingJobJsonResult, type ParsingJobMarkdownResult, type ParsingJobStructuredResult, type ParsingJobTextResult, ParsingMode, PartitionNames, type Permission, PgVectorDistanceMethod, type PgVectorHnswSettings, PgVectorVectorType, type PipelineConfigurationHashes, type PipelineCreateReadable, type PipelineCreateWritable, type PipelineDataSourceCreate, type PipelineDataSourceReadable, type PipelineDataSourceUpdate, type PipelineDataSourceWritable, type PipelineDeployment, type PipelineFile, type PipelineFileCreate, type PipelineFileUpdate, type PipelineFileUpdateDispatcherConfig, type PipelineFileUpdaterConfig, type PipelineManagedIngestionJobParams, type PipelineMetadataConfig, type PipelineReadable, PipelineType, type PipelineUpdateReadable, type PipelineUpdateWritable, type PipelineWritable, type PlanLimits, type PlaygroundSession, Pooling, type PresetCompositeRetrievalParams, type PresetRetrievalParams, type PresignedUrl, type ProgressEvent, type Project, type ProjectCreate, type ProjectUpdate, type PromptConf, type ReRankConfig, ReRankerType, type ReadFileContentApiV1FilesIdContentGetData, type ReadFileContentApiV1FilesIdContentGetError, type ReadFileContentApiV1FilesIdContentGetErrors, type ReadFileContentApiV1FilesIdContentGetResponse, type ReadFileContentApiV1FilesIdContentGetResponses, type RecurringCreditGrant, type RelatedNodeInfo, type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteData, type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteError, type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteErrors, type RemoveUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDeleteResponses, type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteData, type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteError, type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteErrors, type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponse, type RemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDeleteResponses, type Report, type ReportBlock, ReportBlockDependency, type ReportCreateResponse, type ReportEventItem, ReportEventType, type ReportMetadata, type ReportNameUpdate, type ReportPlan, type ReportPlanBlock, type ReportQuery, type ReportResponse, ReportState, type ReportStateEvent, type ReportUpdateEvent, type ReportVersionPatch, type RestartReportApiV1ReportsReportIdRestartPostData, type RestartReportApiV1ReportsReportIdRestartPostError, type RestartReportApiV1ReportsReportIdRestartPostErrors, type RestartReportApiV1ReportsReportIdRestartPostResponses, RetrievalMode, type RetrievalParams, type RetrieveApiV1RetrieversRetrieverIdRetrievePostData, type RetrieveApiV1RetrieversRetrieverIdRetrievePostError, type RetrieveApiV1RetrieversRetrieverIdRetrievePostErrors, type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponse, type RetrieveApiV1RetrieversRetrieverIdRetrievePostResponses, type RetrieveResults, type Retriever, type RetrieverCreate, type RetrieverPipeline, type RetrieverUpdate, type Role, type RunBatchJobsApiV1ExtractionJobsBatchPostData, type RunBatchJobsApiV1ExtractionJobsBatchPostError, type RunBatchJobsApiV1ExtractionJobsBatchPostErrors, type RunBatchJobsApiV1ExtractionJobsBatchPostResponse, type RunBatchJobsApiV1ExtractionJobsBatchPostResponses, type RunJobApiV1ExtractionJobsPostData, type RunJobApiV1ExtractionJobsPostError, type RunJobApiV1ExtractionJobsPostErrors, type RunJobApiV1ExtractionJobsPostResponse, type RunJobApiV1ExtractionJobsPostResponses, type RunJobOnFileApiV1ExtractionJobsFilePostData, type RunJobOnFileApiV1ExtractionJobsFilePostError, type RunJobOnFileApiV1ExtractionJobsFilePostErrors, type RunJobOnFileApiV1ExtractionJobsFilePostResponse, type RunJobOnFileApiV1ExtractionJobsFilePostResponses, type RunJobTestUserApiV1ExtractionJobsTestPostData, type RunJobTestUserApiV1ExtractionJobsTestPostError, type RunJobTestUserApiV1ExtractionJobsTestPostErrors, type RunJobTestUserApiV1ExtractionJobsTestPostResponse, type RunJobTestUserApiV1ExtractionJobsTestPostResponses, type RunSearchApiV1PipelinesPipelineIdRetrievePostData, type RunSearchApiV1PipelinesPipelineIdRetrievePostError, type RunSearchApiV1PipelinesPipelineIdRetrievePostErrors, type RunSearchApiV1PipelinesPipelineIdRetrievePostResponse, type RunSearchApiV1PipelinesPipelineIdRetrievePostResponses, SchemaRelaxMode, type ScreenshotApiParsingScreenshotPostData, type ScreenshotApiParsingScreenshotPostError, type ScreenshotApiParsingScreenshotPostErrors, type ScreenshotApiParsingScreenshotPostResponse, type ScreenshotApiParsingScreenshotPostResponses, type ScreenshotApiV1ParsingScreenshotPostData, type ScreenshotApiV1ParsingScreenshotPostError, type ScreenshotApiV1ParsingScreenshotPostErrors, type ScreenshotApiV1ParsingScreenshotPostResponse, type ScreenshotApiV1ParsingScreenshotPostResponses, type SearchPipelinesApiV1PipelinesGetData, type SearchPipelinesApiV1PipelinesGetError, type SearchPipelinesApiV1PipelinesGetErrors, type SearchPipelinesApiV1PipelinesGetResponse, type SearchPipelinesApiV1PipelinesGetResponses, type SemanticChunkingConfig, type SentenceChunkingConfig, type SetDefaultOrganizationApiV1OrganizationsDefaultPutData, type SetDefaultOrganizationApiV1OrganizationsDefaultPutError, type SetDefaultOrganizationApiV1OrganizationsDefaultPutErrors, type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponse, type SetDefaultOrganizationApiV1OrganizationsDefaultPutResponses, StatusEnum, type StripeWebhookApiV1BillingWebhookPostData, type StripeWebhookApiV1BillingWebhookPostError, type StripeWebhookApiV1BillingWebhookPostErrors, type StripeWebhookApiV1BillingWebhookPostResponse, type StripeWebhookApiV1BillingWebhookPostResponses, StructMode, type StructParseConf, type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostData, type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostError, type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostErrors, type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponse, type SuggestEditsEndpointApiV1ReportsReportIdSuggestEditsPostResponses, type SupportedLlmModel, SupportedLlmModelNames, type SyncFilesApiV1FilesSyncPutData, type SyncFilesApiV1FilesSyncPutError, type SyncFilesApiV1FilesSyncPutErrors, type SyncFilesApiV1FilesSyncPutResponse, type SyncFilesApiV1FilesSyncPutResponses, type SyncPipelineApiV1PipelinesPipelineIdSyncPostData, type SyncPipelineApiV1PipelinesPipelineIdSyncPostError, type SyncPipelineApiV1PipelinesPipelineIdSyncPostErrors, type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponse, type SyncPipelineApiV1PipelinesPipelineIdSyncPostResponses, type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostData, type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostError, type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostErrors, type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponse, type SyncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPostResponses, type TextBlock, type TextNode, type TextNodeWithScore, type TokenChunkingConfig, type UpdateChatAppApiV1AppsIdPutData, type UpdateChatAppApiV1AppsIdPutError, type UpdateChatAppApiV1AppsIdPutErrors, type UpdateChatAppApiV1AppsIdPutResponse, type UpdateChatAppApiV1AppsIdPutResponses, type UpdateDataSinkApiV1DataSinksDataSinkIdPutData, type UpdateDataSinkApiV1DataSinksDataSinkIdPutError, type UpdateDataSinkApiV1DataSinksDataSinkIdPutErrors, type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponse, type UpdateDataSinkApiV1DataSinksDataSinkIdPutResponses, type UpdateDataSourceApiV1DataSourcesDataSourceIdPutData, type UpdateDataSourceApiV1DataSourcesDataSourceIdPutError, type UpdateDataSourceApiV1DataSourcesDataSourceIdPutErrors, type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponse, type UpdateDataSourceApiV1DataSourcesDataSourceIdPutResponses, type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutData, type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutError, type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutErrors, type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponse, type UpdateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPutResponses, type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutData, type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutError, type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutErrors, type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponse, type UpdateExistingApiKeyApiV1ApiKeysApiKeyIdPutResponses, type UpdateExistingPipelineApiV1PipelinesPipelineIdPutData, type UpdateExistingPipelineApiV1PipelinesPipelineIdPutError, type UpdateExistingPipelineApiV1PipelinesPipelineIdPutErrors, type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponse, type UpdateExistingPipelineApiV1PipelinesPipelineIdPutResponses, type UpdateExistingProjectApiV1ProjectsProjectIdPutData, type UpdateExistingProjectApiV1ProjectsProjectIdPutError, type UpdateExistingProjectApiV1ProjectsProjectIdPutErrors, type UpdateExistingProjectApiV1ProjectsProjectIdPutResponse, type UpdateExistingProjectApiV1ProjectsProjectIdPutResponses, type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutData, type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutError, type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutErrors, type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponse, type UpdateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPutResponses, type UpdateOrganizationApiV1OrganizationsOrganizationIdPutData, type UpdateOrganizationApiV1OrganizationsOrganizationIdPutError, type UpdateOrganizationApiV1OrganizationsOrganizationIdPutErrors, type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponse, type UpdateOrganizationApiV1OrganizationsOrganizationIdPutResponses, type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutData, type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutError, type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutErrors, type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponse, type UpdatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPutResponses, type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutData, type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutError, type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutErrors, type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponse, type UpdatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPutResponses, type UpdateReportApiV1ReportsReportIdPatchData, type UpdateReportApiV1ReportsReportIdPatchError, type UpdateReportApiV1ReportsReportIdPatchErrors, type UpdateReportApiV1ReportsReportIdPatchResponse, type UpdateReportApiV1ReportsReportIdPatchResponses, type UpdateReportMetadataApiV1ReportsReportIdPostData, type UpdateReportMetadataApiV1ReportsReportIdPostError, type UpdateReportMetadataApiV1ReportsReportIdPostErrors, type UpdateReportMetadataApiV1ReportsReportIdPostResponse, type UpdateReportMetadataApiV1ReportsReportIdPostResponses, type UpdateReportPlanApiV1ReportsReportIdPlanPatchData, type UpdateReportPlanApiV1ReportsReportIdPlanPatchError, type UpdateReportPlanApiV1ReportsReportIdPlanPatchErrors, type UpdateReportPlanApiV1ReportsReportIdPlanPatchResponse, type UpdateReportPlanApiV1ReportsReportIdPlanPatchResponses, type UpdateRetrieverApiV1RetrieversRetrieverIdPutData, type UpdateRetrieverApiV1RetrieversRetrieverIdPutError, type UpdateRetrieverApiV1RetrieversRetrieverIdPutErrors, type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponse, type UpdateRetrieverApiV1RetrieversRetrieverIdPutResponses, type UploadFileApiParsingUploadPostData, type UploadFileApiParsingUploadPostError, type UploadFileApiParsingUploadPostErrors, type UploadFileApiParsingUploadPostResponse, type UploadFileApiParsingUploadPostResponses, type UploadFileApiV1FilesPostData, type UploadFileApiV1FilesPostError, type UploadFileApiV1FilesPostErrors, type UploadFileApiV1FilesPostResponse, type UploadFileApiV1FilesPostResponses, type UploadFileApiV1ParsingUploadPostData, type UploadFileApiV1ParsingUploadPostError, type UploadFileApiV1ParsingUploadPostErrors, type UploadFileApiV1ParsingUploadPostResponse, type UploadFileApiV1ParsingUploadPostResponses, type UploadFileFromUrlApiV1FilesUploadFromUrlPutData, type UploadFileFromUrlApiV1FilesUploadFromUrlPutError, type UploadFileFromUrlApiV1FilesUploadFromUrlPutErrors, type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponse, type UploadFileFromUrlApiV1FilesUploadFromUrlPutResponses, type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutData, type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutError, type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutErrors, type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponse, type UpsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPutResponses, type UpsertDataSinkApiV1DataSinksPutData, type UpsertDataSinkApiV1DataSinksPutError, type UpsertDataSinkApiV1DataSinksPutErrors, type UpsertDataSinkApiV1DataSinksPutResponse, type UpsertDataSinkApiV1DataSinksPutResponses, type UpsertDataSourceApiV1DataSourcesPutData, type UpsertDataSourceApiV1DataSourcesPutError, type UpsertDataSourceApiV1DataSourcesPutErrors, type UpsertDataSourceApiV1DataSourcesPutResponse, type UpsertDataSourceApiV1DataSourcesPutResponses, type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutData, type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutError, type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutErrors, type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponse, type UpsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPutResponses, type UpsertOrganizationApiV1OrganizationsPutData, type UpsertOrganizationApiV1OrganizationsPutError, type UpsertOrganizationApiV1OrganizationsPutErrors, type UpsertOrganizationApiV1OrganizationsPutResponse, type UpsertOrganizationApiV1OrganizationsPutResponses, type UpsertPipelineApiV1PipelinesPutData, type UpsertPipelineApiV1PipelinesPutError, type UpsertPipelineApiV1PipelinesPutErrors, type UpsertPipelineApiV1PipelinesPutResponse, type UpsertPipelineApiV1PipelinesPutResponses, type UpsertProjectApiV1ProjectsPutData, type UpsertProjectApiV1ProjectsPutError, type UpsertProjectApiV1ProjectsPutErrors, type UpsertProjectApiV1ProjectsPutResponse, type UpsertProjectApiV1ProjectsPutResponses, type UpsertRetrieverApiV1RetrieversPutData, type UpsertRetrieverApiV1RetrieversPutError, type UpsertRetrieverApiV1RetrieversPutErrors, type UpsertRetrieverApiV1RetrieversPutResponse, type UpsertRetrieverApiV1RetrieversPutResponses, type UsageAndPlan, type UsageMetricResponse, type UsageResponse, type UserJobRecord, type UserOrganization, type UserOrganizationCreate, type UserOrganizationDelete, type UserOrganizationRole, type UserOrganizationRoleCreate, type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostData, type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostError, type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostErrors, type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponse, type ValidateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPostResponses, type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostData, type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostError, type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostErrors, type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponse, type ValidateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPostResponses, type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostData, type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostError, type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostErrors, type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponse, type ValidateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPostResponses, type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostData, type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostError, type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostErrors, type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponse, type ValidateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPostResponses, type ValidationError, type VertexAiEmbeddingConfig, VertexEmbeddingMode, type VertexTextEmbedding, addDataSourcesToPipelineApiV1PipelinesPipelineIdDataSourcesPut, addFilesToPipelineApiApiV1PipelinesPipelineIdFilesPut, addUserToProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsPut, addUsersToOrganizationApiV1OrganizationsOrganizationIdUsersPut, assignRoleToUserInOrganizationApiV1OrganizationsOrganizationIdUsersRolesPut, batchRemoveUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersRemovePut, cancelPipelineSyncApiV1PipelinesPipelineIdSyncCancelPost, chatApiV1PipelinesPipelineIdChatPost, chatWithChatAppApiV1AppsIdChatPost, client, copyPipelineApiV1PipelinesPipelineIdCopyPost, createBatchApiV1BetaBatchesPost, createBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPost, createChatAppApiV1AppsPost, createCheckoutSessionApiV1BillingCheckoutSessionPost, createCustomerPortalSessionApiV1BillingCustomerPortalSessionPost, createDataSinkApiV1DataSinksPost, createDataSourceApiV1DataSourcesPost, createEmbeddingModelConfigApiV1EmbeddingModelConfigsPost, createExtractionAgentApiV1ExtractionExtractionAgentsPost, createIntentAndCustomerSessionApiV1BillingCreateIntentAndCustomerSessionPost, createOrganizationApiV1OrganizationsPost, createPipelineApiV1PipelinesPost, createProjectApiV1ProjectsPost, createReportApiV1ReportsPost, createRetrieverApiV1RetrieversPost, deleteApiKeyApiV1ApiKeysApiKeyIdDelete, deleteChatAppApiV1AppsIdDelete, deleteDataSinkApiV1DataSinksDataSinkIdDelete, deleteDataSourceApiV1DataSourcesDataSourceIdDelete, deleteEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdDelete, deleteExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdDelete, deleteExtractionRunApiV1ExtractionRunsRunIdDelete, deleteFileApiV1FilesIdDelete, deleteOrganizationApiV1OrganizationsOrganizationIdDelete, deletePipelineApiV1PipelinesPipelineIdDelete, deletePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdDelete, deletePipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdDelete, deletePipelineFileApiV1PipelinesPipelineIdFilesFileIdDelete, deletePipelineFilesMetadataApiV1PipelinesPipelineIdMetadataDelete, deleteProjectApiV1ProjectsProjectIdDelete, deleteReportApiV1ReportsReportIdDelete, deleteRetrieverApiV1RetrieversRetrieverIdDelete, directRetrieveApiV1RetrieversRetrievePost, downgradePlanApiV1BillingDowngradePlanPost, generateKeyApiV1ApiKeysPost, generatePresignedUrlApiParsingJobJobIdReadFilenameGet, generatePresignedUrlApiV1FilesPut, generatePresignedUrlApiV1ParsingJobJobIdReadFilenameGet, getBatchApiV1BetaBatchesBatchIdGet, getChatAppApiV1AppsIdGet, getChatAppsApiV1AppsGet, getCurrentProjectApiV1ProjectsCurrentGet, getDataSinkApiV1DataSinksDataSinkIdGet, getDataSourceApiV1DataSourcesDataSourceIdGet, getDefaultOrganizationApiV1OrganizationsDefaultGet, getExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdGet, getExtractionAgentByNameApiV1ExtractionExtractionAgentsByNameNameGet, getFileApiV1FilesIdGet, getFilePageFigureApiV1FilesIdPageFiguresPageIndexFigureNameGet, getFilePageScreenshotApiV1FilesIdPageScreenshotsPageIndexGet, getJobApiParsingJobJobIdGet, getJobApiV1ExtractionJobsJobIdGet, getJobApiV1ParsingJobJobIdGet, getJobImageResultApiParsingJobJobIdResultImageNameGet, getJobImageResultApiV1ParsingJobJobIdResultImageNameGet, getJobJsonRawResultApiParsingJobJobIdResultRawJsonGet, getJobJsonRawResultApiV1ParsingJobJobIdResultRawJsonGet, getJobJsonResultApiParsingJobJobIdResultJsonGet, getJobJsonResultApiV1ParsingJobJobIdResultJsonGet, getJobParametersApiParsingJobJobIdParametersGet, getJobParametersApiV1ParsingJobJobIdParametersGet, getJobRawMdResultApiParsingJobJobIdResultRawMarkdownGet, getJobRawMdResultApiV1ParsingJobJobIdResultRawMarkdownGet, getJobRawStructuredResultApiParsingJobJobIdResultRawStructuredGet, getJobRawStructuredResultApiV1ParsingJobJobIdResultRawStructuredGet, getJobRawTextResultApiParsingJobJobIdResultPdfGet, getJobRawTextResultApiParsingJobJobIdResultRawPdfGet, getJobRawTextResultApiParsingJobJobIdResultRawTextGet, getJobRawTextResultApiV1ParsingJobJobIdResultPdfGet, getJobRawTextResultApiV1ParsingJobJobIdResultRawPdfGet, getJobRawTextResultApiV1ParsingJobJobIdResultRawTextGet, getJobRawXlsxResultApiParsingJobJobIdResultRawXlsxGet, getJobRawXlsxResultApiParsingJobJobIdResultXlsxGet, getJobRawXlsxResultApiV1ParsingJobJobIdResultRawXlsxGet, getJobRawXlsxResultApiV1ParsingJobJobIdResultXlsxGet, getJobResultApiParsingJobJobIdResultMarkdownGet, getJobResultApiV1ExtractionJobsJobIdResultGet, getJobResultApiV1ParsingJobJobIdResultMarkdownGet, getJobStructuredResultApiParsingJobJobIdResultStructuredGet, getJobStructuredResultApiV1ParsingJobJobIdResultStructuredGet, getJobTextResultApiParsingJobJobIdResultTextGet, getJobTextResultApiV1ParsingJobJobIdResultTextGet, getJobsApiV1JobsGet, getLatestRunFromUiApiV1ExtractionRunsLatestFromUiGet, getMetronomeDashboardApiV1BillingMetronomeDashboardGet, getOrganizationApiV1OrganizationsOrganizationIdGet, getOrganizationUsageApiV1OrganizationsOrganizationIdUsageGet, getParsingHistoryResultApiParsingHistoryGet, getParsingHistoryResultApiV1ParsingHistoryGet, getParsingJobDetailsApiParsingJobJobIdDetailsGet, getParsingJobDetailsApiV1ParsingJobJobIdDetailsGet, getPipelineApiV1PipelinesPipelineIdGet, getPipelineDataSourceStatusApiV1PipelinesPipelineIdDataSourcesDataSourceIdStatusGet, getPipelineDocumentApiV1PipelinesPipelineIdDocumentsDocumentIdGet, getPipelineDocumentStatusApiV1PipelinesPipelineIdDocumentsDocumentIdStatusGet, getPipelineFileStatusApiV1PipelinesPipelineIdFilesFileIdStatusGet, getPipelineFileStatusCountsApiV1PipelinesPipelineIdFilesStatusCountsGet, getPipelineJobApiV1PipelinesPipelineIdJobsJobIdGet, getPipelineStatusApiV1PipelinesPipelineIdStatusGet, getPlaygroundSessionApiV1PipelinesPipelineIdPlaygroundSessionGet, getProjectApiV1ProjectsProjectIdGet, getProjectUsageApiV1ProjectsProjectIdUsageGet, getReportApiV1ReportsReportIdGet, getReportEventsApiV1ReportsReportIdEventsGet, getReportMetadataApiV1ReportsReportIdMetadataGet, getReportPlanApiV1ReportsReportIdPlanGet, getRetrieverApiV1RetrieversRetrieverIdGet, getRunApiV1ExtractionRunsRunIdGet, getRunByJobIdApiV1ExtractionRunsByJobJobIdGet, getSupportedFileExtensionsApiParsingSupportedFileExtensionsGet, getSupportedFileExtensionsApiV1ParsingSupportedFileExtensionsGet, getUserRoleApiV1OrganizationsOrganizationIdUsersRolesGet, importPipelineMetadataApiV1PipelinesPipelineIdMetadataPut, listBatchesApiV1BetaBatchesGet, listDataSinksApiV1DataSinksGet, listDataSourcesApiV1DataSourcesGet, listEmbeddingModelConfigsApiV1EmbeddingModelConfigsGet, listExtractRunsApiV1ExtractionRunsGet, listExtractionAgentsApiV1ExtractionExtractionAgentsGet, listFilePageFiguresApiV1FilesIdPageFiguresPageIndexGet, listFilePageScreenshotsApiV1FilesIdPageScreenshotsGet, listFilePagesFiguresApiV1FilesIdPageFiguresGet, listFilesApiV1FilesGet, listJobsApiV1ExtractionJobsGet, listKeysApiV1ApiKeysGet, listOrganizationUsersApiV1OrganizationsOrganizationIdUsersGet, listOrganizationsApiV1OrganizationsGet, listPipelineDataSourcesApiV1PipelinesPipelineIdDataSourcesGet, listPipelineDocumentChunksApiV1PipelinesPipelineIdDocumentsDocumentIdChunksGet, listPipelineDocumentsApiV1PipelinesPipelineIdDocumentsGet, listPipelineFiles2ApiV1PipelinesPipelineIdFiles2Get, listPipelineFilesApiV1PipelinesPipelineIdFilesGet, listPipelineJobsApiV1PipelinesPipelineIdJobsGet, listProjectsApiV1ProjectsGet, listProjectsByUserApiV1OrganizationsOrganizationIdUsersUserIdProjectsGet, listReportsApiV1ReportsListGet, listRetrieversApiV1RetrieversGet, listRolesApiV1OrganizationsOrganizationIdRolesGet, listSupportedModelsApiV1EvalsModelsGet, metronomeWebhookApiV1BillingMetronomeWebhookPost, paginatedListPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPaginatedGet, readFileContentApiV1FilesIdContentGet, removeUserFromProjectApiV1OrganizationsOrganizationIdUsersUserIdProjectsProjectIdDelete, removeUsersFromOrganizationApiV1OrganizationsOrganizationIdUsersMemberUserIdDelete, restartReportApiV1ReportsReportIdRestartPost, retrieveApiV1RetrieversRetrieverIdRetrievePost, runBatchJobsApiV1ExtractionJobsBatchPost, runJobApiV1ExtractionJobsPost, runJobOnFileApiV1ExtractionJobsFilePost, runJobTestUserApiV1ExtractionJobsTestPost, runSearchApiV1PipelinesPipelineIdRetrievePost, screenshotApiParsingScreenshotPost, screenshotApiV1ParsingScreenshotPost, searchPipelinesApiV1PipelinesGet, setDefaultOrganizationApiV1OrganizationsDefaultPut, stripeWebhookApiV1BillingWebhookPost, suggestEditsEndpointApiV1ReportsReportIdSuggestEditsPost, syncFilesApiV1FilesSyncPut, syncPipelineApiV1PipelinesPipelineIdSyncPost, syncPipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdSyncPost, updateChatAppApiV1AppsIdPut, updateDataSinkApiV1DataSinksDataSinkIdPut, updateDataSourceApiV1DataSourcesDataSourceIdPut, updateEmbeddingModelConfigApiV1EmbeddingModelConfigsEmbeddingModelConfigIdPut, updateExistingApiKeyApiV1ApiKeysApiKeyIdPut, updateExistingPipelineApiV1PipelinesPipelineIdPut, updateExistingProjectApiV1ProjectsProjectIdPut, updateExtractionAgentApiV1ExtractionExtractionAgentsExtractionAgentIdPut, updateOrganizationApiV1OrganizationsOrganizationIdPut, updatePipelineDataSourceApiV1PipelinesPipelineIdDataSourcesDataSourceIdPut, updatePipelineFileApiV1PipelinesPipelineIdFilesFileIdPut, updateReportApiV1ReportsReportIdPatch, updateReportMetadataApiV1ReportsReportIdPost, updateReportPlanApiV1ReportsReportIdPlanPatch, updateRetrieverApiV1RetrieversRetrieverIdPut, uploadFileApiParsingUploadPost, uploadFileApiV1FilesPost, uploadFileApiV1ParsingUploadPost, uploadFileFromUrlApiV1FilesUploadFromUrlPut, upsertBatchPipelineDocumentsApiV1PipelinesPipelineIdDocumentsPut, upsertDataSinkApiV1DataSinksPut, upsertDataSourceApiV1DataSourcesPut, upsertEmbeddingModelConfigApiV1EmbeddingModelConfigsPut, upsertOrganizationApiV1OrganizationsPut, upsertPipelineApiV1PipelinesPut, upsertProjectApiV1ProjectsPut, upsertRetrieverApiV1RetrieversPut, validateDataSinkConnectionApiV1ValidateIntegrationsValidateDataSinkConnectionPost, validateDataSourceConnectionApiV1ValidateIntegrationsValidateDataSourceConnectionPost, validateEmbeddingConnectionApiV1ValidateIntegrationsValidateEmbeddingConnectionPost, validateExtractionSchemaApiV1ExtractionExtractionAgentsSchemaValidationPost };
