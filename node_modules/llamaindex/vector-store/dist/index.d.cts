import { BaseVectorStore, VectorStoreBaseParams, VectorStoreQuery, VectorStoreQueryResult } from '@llamaindex/core/vector-store';
export * from '@llamaindex/core/vector-store';
import { BaseEmbedding } from '@llamaindex/core/embeddings';
import { BaseNode } from '@llamaindex/core/schema';

type MetadataValue = Record<string, any>;
declare class SimpleVectorStoreData {
    embeddingDict: Record<string, number[]>;
    textIdToRefDocId: Record<string, string>;
    metadataDict: Record<string, MetadataValue>;
}
declare class SimpleVectorStore extends BaseVectorStore {
    storesText: boolean;
    private data;
    private persistPath;
    constructor(init?: {
        data?: SimpleVectorStoreData | undefined;
    } & VectorStoreBaseParams);
    static fromPersistDir(persistDir?: string, embedModel?: BaseEmbedding): Promise<SimpleVectorStore>;
    client(): null;
    get(textId: string): Promise<number[]>;
    add(embeddingResults: BaseNode[]): Promise<string[]>;
    delete(refDocId: string): Promise<void>;
    private filterNodes;
    query(query: VectorStoreQuery): Promise<VectorStoreQueryResult>;
    persist(persistPath?: string): Promise<void>;
    protected static persistData(persistPath: string, data: SimpleVectorStoreData): Promise<void>;
    static fromPersistPath(persistPath: string, embeddingModel?: BaseEmbedding): Promise<SimpleVectorStore>;
    static fromDict(saveDict: SimpleVectorStoreData, embeddingModel?: BaseEmbedding): SimpleVectorStore;
    toDict(): SimpleVectorStoreData;
}

export { SimpleVectorStore };
